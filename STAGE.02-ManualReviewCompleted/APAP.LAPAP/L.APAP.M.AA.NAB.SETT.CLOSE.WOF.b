$PACKAGE APAP.LAPAP
SUBROUTINE L.APAP.M.AA.NAB.SETT.CLOSE.WOF
*------------------------------------------------------------------------
* Modification History :
*------------------------------------------------------------------------
*  DATE             WHO                   REFERENCE                  
* 21-APRIL-2023      Conversion Tool       R22 Auto Conversion - VM to @VM , FM to @FM and SM to @SM and T24.BP is removed from Insert
* 21-APRIL-2023      Harsha                R22 Manual Conversion - No changes                             
*------------------------------------------------------------------------
* Description: Migration routine to raise an Accounting entries to reverse the NAB accounting.
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.ACCOUNT
    $INSERT I_F.STMT.ENTRY
    $INSERT I_F.REDO.AA.INT.CLASSIFICATION
    $INSERT I_F.REDO.AA.NAB.HISTORY
    $INSERT I_F.REDO.H.REPORTS.PARAM


    GOSUB INIT
RETURN


INIT:
*****
    FN.ACCOUNT = 'F.ACCOUNT'
    F.ACCOUNT  = ''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)

    FN.REDO.CONCAT.ACC.NAB = 'F.REDO.CONCAT.ACC.NAB'
    F.REDO.CONCAT.ACC.NAB  = ''
    CALL OPF(FN.REDO.CONCAT.ACC.NAB,F.REDO.CONCAT.ACC.NAB)

    FN.AA.ARRANGEMENT = 'F.AA.ARRANGEMENT'
    F.AA.ARRANGEMENT  = ''
    CALL OPF(FN.AA.ARRANGEMENT,F.AA.ARRANGEMENT)

    FN.REDO.AA.INT.CLASSIFICATION = 'F.REDO.AA.INT.CLASSIFICATION'
    F.REDO.AA.INT.CLASSIFICATION  = ''
    CALL OPF(FN.REDO.AA.INT.CLASSIFICATION,F.REDO.AA.INT.CLASSIFICATION)

    FN.REDO.H.REPORTS.PARAM = "F.REDO.H.REPORTS.PARAM"
    F.REDO.H.REPORTS.PARAM = ''

    CALL OPF(FN.REDO.H.REPORTS.PARAM,F.REDO.H.REPORTS.PARAM)
**------------------------------------------------------------------------------------------
    Y.PARAM.ID = "LAPAP.ECB.BALANCES.WOF"
    R.REDO.H.REPORTS.PARAM = '';  PARAM.ERR = '';
    CALL CACHE.READ(FN.REDO.H.REPORTS.PARAM,Y.PARAM.ID,R.REDO.H.REPORTS.PARAM,PARAM.ERR)
    Y.DIRECTORIO.ARCHIVO = R.REDO.H.REPORTS.PARAM<REDO.REP.PARAM.OUT.DIR>
    Y.FIELD.NME.PARAM      = R.REDO.H.REPORTS.PARAM<REDO.REP.PARAM.FIELD.NAME>
    Y.FIELD.VAL.PARAM      = R.REDO.H.REPORTS.PARAM<REDO.REP.PARAM.FIELD.VALUE>
    LOCATE "NOMBRE.ARCHIVO" IN Y.FIELD.NME.PARAM<1,1> SETTING VALD.POS THEN
        Y.FILE.CLEAR.BALANCE = Y.FIELD.VAL.PARAM<1,VALD.POS>
        CHANGE @VM TO @FM IN Y.FILE.CLEAR.BALANCE
        CHANGE @SM TO @FM IN Y.FILE.CLEAR.BALANCE
        FILEEXTRACT.ID = Y.FILE.CLEAR.BALANCE<1>
    END
**------------------------------------------------------------------------------------------

    FN.FILEPATH = Y.DIRECTORIO.ARCHIVO
    F.FILEPATH = ''
    OPEN FN.FILEPATH TO F.FILEPATH ELSE
        RETURN
    END
    CALL OPF(FN.FILEPATH,F.FILEPATH)
    YTODAY = TODAY

    FN.TEMP.FILE.PATH = '../EXTRACT/MASSIVE.BP/MIG.CLS'
    OPEN FN.TEMP.FILE.PATH TO F.TEMP.FILE.PATH ELSE
        Y.MK.CMD = "mkdir ../EXTRACT/MASSIVE.BP/MIG.CLS"
        EXECUTE Y.MK.CMD
        OPEN FN.TEMP.FILE.PATH TO F.TEMP.FILE.PATH ELSE
        END
    END

    Y.ID = 'SYSTEM'
    CALL CACHE.READ(FN.REDO.AA.INT.CLASSIFICATION,Y.ID,R.REDO.AA.INT.CLASSIFICATION,CLS.ERR)
    GOSUB PROCESS
    YTMP.FILE = "MIG.CUENTA.HIJAS.":YTODAY:".csv"
    WRITE YFINA.ARRY TO F.TEMP.FILE.PATH,YTMP.FILE
RETURN

PROCESS:
********
    ERR.FILEPATH = ''; R.FILEPATH = ''; YFINA.ARRY = ''
    CALL F.READ(FN.FILEPATH,FILEEXTRACT.ID,R.FILEPATH,F.FILEPATH,ERR.FILEPATH)

    LOOP
        REMOVE PROCESS.ID FROM R.FILEPATH SETTING PR.POSN
    WHILE PROCESS.ID:PR.POSN

        ARR.ID = ''; ARR.ID = FIELD(PROCESS.ID,',',1)
        ARR.ERR = ''; R.AA.ARRANGEMENT = ''; Y.LOAN.ACC = ''; Y.LOAN.COMP = ''
        Y.LOAN.CUR = ''; TL.FLAG = 0
        CALL F.READ(FN.AA.ARRANGEMENT,ARR.ID,R.AA.ARRANGEMENT,F.AA.ARRANGEMENT,ARR.ERR)
        Y.LOAN.ACC = R.AA.ARRANGEMENT<AA.ARR.LINKED.APPL.ID>
        Y.LOAN.COMP = R.AA.ARRANGEMENT<AA.ARR.CO.CODE>
        Y.LOAN.CUR = R.AA.ARRANGEMENT<AA.ARR.CURRENCY>

        ACC.ERRR = ''; R.ACC = ''; Y.LOAN.CATEG = ''
        CALL F.READ(FN.ACCOUNT,Y.LOAN.ACC,R.ACC,F.ACCOUNT,ACC.ERRR)
        Y.LOAN.CATEG = R.ACC<AC.CATEGORY>

        GOSUB BEFORE.RAISE.ENTRIES
        IF TL.FLAG EQ 1 THEN
            CONTINUE
        END

        CNCT.ERR = ''; R.REDO.CONCAT.ACC.NAB = ''; Y.NAB.AMT = ''
        CALL F.READ(FN.REDO.CONCAT.ACC.NAB,Y.LOAN.ACC,R.REDO.CONCAT.ACC.NAB,F.REDO.CONCAT.ACC.NAB,CNCT.ERR)
        IF R.REDO.CONCAT.ACC.NAB THEN
            Y.NEW.AC = R.REDO.CONCAT.ACC.NAB<1>
            CALL F.READ(FN.ACCOUNT,Y.NEW.AC,R.CONT.ACC,F.ACCOUNT,ACC.ERR)
            Y.NAB.AMT = R.CONT.ACC<AC.WORKING.BALANCE>
            Y.NAB.AMT = ABS(Y.NAB.AMT)
            IF Y.NAB.AMT GT 0 THEN
                GOSUB RAISE.ENTRIES
            END
        END
    REPEAT
RETURN

BEFORE.RAISE.ENTRIES:
*********************
    Y.INTERNAL.ACC = ''
    LOCATE Y.LOAN.CATEG IN R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.PROD.CATEGORY,1> SETTING POS.CMP THEN
        LOCATE Y.LOAN.CUR IN R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.CURRENCY,POS.CMP,1> SETTING POS.CUR THEN
            Y.INTERNAL.ACC = R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.DEBIT.INT.ACCOUNT,POS.CMP,POS.CUR>
        END
    END ELSE
        CALL OCOMO('Product category not parameterized ':ARR.ID)
        TL.FLAG =1
        RETURN
    END
    IF Y.INTERNAL.ACC THEN
        Y.LOAN.CO.CODE = Y.LOAN.COMP
        CALL REDO.NAB.CREATE.INT.ACC(Y.LOAN.CO.CODE,Y.INTERNAL.ACC,Y.RET.INT.ACC)
        Y.INTERNAL.ACC = Y.RET.INT.ACC
        CALL F.READ(FN.ACCOUNT,Y.INTERNAL.ACC,R.INT.ACC,F.ACCOUNT,ACC.ERR)
        IF R.INT.ACC ELSE
            CALL OCOMO('Internal Account not created - ':ARR.ID)
            TL.FLAG =1
            RETURN
        END
    END ELSE
        CALL OCOMO('Internal Account not parameterized ':ARR.ID)
        TL.FLAG =1
        RETURN
    END
RETURN

RAISE.ENTRIES:
**************
    R.DR.STMT.ENTRY = ''
    R.STMT.ENTRY    = ''
    R.CR.STMT.ENTRY = ''

    R.DR.STMT.ENTRY<AC.STE.ACCOUNT.NUMBER>    = Y.INTERNAL.ACC
    R.DR.STMT.ENTRY<AC.STE.COMPANY.CODE>      = R.INT.ACC<AC.CO.CODE>
    R.DR.STMT.ENTRY<AC.STE.AMOUNT.LCY>        = -1*Y.NAB.AMT
    R.DR.STMT.ENTRY<AC.STE.TRANSACTION.CODE>  = '1'
    R.DR.STMT.ENTRY<AC.STE.PRODUCT.CATEGORY>  = R.INT.ACC<AC.CATEGORY>
    R.DR.STMT.ENTRY<AC.STE.VALUE.DATE>        = YTODAY
    R.DR.STMT.ENTRY<AC.STE.CURRENCY>          = R.INT.ACC<AC.CURRENCY>
    R.DR.STMT.ENTRY<AC.STE.OUR.REFERENCE>     = ARR.ID:'-':Y.LOAN.ACC
    R.DR.STMT.ENTRY<AC.STE.EXPOSURE.DATE>     = YTODAY
    R.DR.STMT.ENTRY<AC.STE.CURRENCY.MARKET>   = '1'
    R.DR.STMT.ENTRY<AC.STE.TRANS.REFERENCE>   = Y.NEW.AC
    R.DR.STMT.ENTRY<AC.STE.SYSTEM.ID>         = 'AC'
    R.DR.STMT.ENTRY<AC.STE.BOOKING.DATE>      = YTODAY

    CHANGE @FM TO @SM IN R.DR.STMT.ENTRY
    CHANGE @SM TO @VM IN R.DR.STMT.ENTRY

    R.STMT.ENTRY<-1> = R.DR.STMT.ENTRY

    R.CR.STMT.ENTRY<AC.STE.ACCOUNT.NUMBER>   = Y.NEW.AC
    R.CR.STMT.ENTRY<AC.STE.COMPANY.CODE>     = R.CONT.ACC<AC.CO.CODE>
    R.CR.STMT.ENTRY<AC.STE.AMOUNT.LCY>       = Y.NAB.AMT
    R.CR.STMT.ENTRY<AC.STE.TRANSACTION.CODE> = '51'
    R.CR.STMT.ENTRY<AC.STE.PRODUCT.CATEGORY> = R.CONT.ACC<AC.CATEGORY>
    R.CR.STMT.ENTRY<AC.STE.VALUE.DATE>       = YTODAY
    R.CR.STMT.ENTRY<AC.STE.CURRENCY>         = R.CONT.ACC<AC.CURRENCY>
    R.CR.STMT.ENTRY<AC.STE.OUR.REFERENCE>    = ARR.ID:'-':Y.LOAN.ACC
    R.CR.STMT.ENTRY<AC.STE.EXPOSURE.DATE>    = YTODAY
    R.CR.STMT.ENTRY<AC.STE.CURRENCY.MARKET>  = '1'
    R.CR.STMT.ENTRY<AC.STE.TRANS.REFERENCE>  = Y.NEW.AC
    R.CR.STMT.ENTRY<AC.STE.SYSTEM.ID>        = 'AC'
    R.CR.STMT.ENTRY<AC.STE.BOOKING.DATE>     = YTODAY

    CHANGE @FM TO @SM IN R.CR.STMT.ENTRY
    CHANGE @SM TO @VM IN R.CR.STMT.ENTRY

    R.STMT.ENTRY<-1> = R.CR.STMT.ENTRY

    IF Y.LOAN.COMP THEN
        CALL LOAD.COMPANY(Y.LOAN.COMP)
    END

    ACC.PRODUCT = 'AC'
    ACC.TYPE    = 'SAO'

    CALL EB.ACCOUNTING(ACC.PRODUCT,ACC.TYPE,R.STMT.ENTRY,'')
    CALL OCOMO('Processed the Arrangement: ':ARR.ID)
*    CALL JOURNAL.UPDATE('')
    YFINA.ARRY<-1> = ARR.ID:'-':Y.NEW.AC:'-SUCCESS'
RETURN

END
