$PACKAGE APAP.TAM
SUBROUTINE REDO.VERIFY.TRANSACTION
*****************************************************************************
* Company Name : ASOCIACION POPULAR DE AHORROS Y PRESTAMOS
* Developed By : DHAMU S
* Program Name : REDO.VERIFY.TRANSACTION
*****************************************************************
*Description: This routine is to verify the transaction happened
*******************************************************************************
*In parameter : None
*Out parameter : None
****************************************************************************
*Modification History:
**************************
*     Date            Who                  Reference               Description
*    ------          ------               -----------             --------------
*   3-12-2010       DHAMU S              ODR-2010-08-0469         Initial Creation
*                   Prabhu N             PACS00458569             Locked amount is added to Balance validation
*   18/12/2016      Vignesh Kumaar R     PACS00484045                          Exchange rate / Charge amount calculation
** 18-04-2023 R22 Auto Conversion - FM TO @FM, VM to @VM, SM to @SM
** 18-04-2023 Skanda R22 Manual Conversion - No changes
*--------------------------------------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
    $INSERT I_F.AC.LOCKED.EVENTS
    $INSERT I_F.CURRENCY
    $INSERT I_F.FT.TXN.TYPE.CONDITION
    $INSERT I_REDO.VISA.STLMT.FILE.PROCESS.COMMON
    $INSERT I_F.REDO.VISA.STLMT.05TO37
    $INSERT I_F.REDO.APAP.H.PARAMETER
    $INSERT I_F.REDO.LY.POINTS.US
    $INSERT I_F.ATM.REVERSAL


    GOSUB PROCESS
RETURN

********
PROCESS:
********

    Y.STLMT.LOCAL.DATE = R.REDO.STLMT.LINE<VISA.SETTLE.PURCHASE.DATE>
    Y.STLMT.CCY.CODE = R.REDO.STLMT.LINE<VISA.SETTLE.SRC.CCY.CODE>
    TXN.REF = R.ATM.REVERSAL<AT.REV.TXN.REF>

    Y.LY.STATUS.SET=''
    Y.LY.POINTS.US.ID=R.ATM.REVERSAL<AT.REV.LY.PTS.US.REF>
    IF Y.LY.POINTS.US.ID THEN
        FN.REDO.LY.POINTS.US='F.REDO.LY.POINTS.US'
        F.REDO.LY.POINTS.US=''
        CALL OPF(FN.REDO.LY.POINTS.US,F.REDO.LY.POINTS.US)
        CALL F.READ(FN.REDO.LY.POINTS.US,Y.LY.POINTS.US.ID,R.REDO.LY.POINTS.US,F.REDO.LY.POINTS.US,ERR)
        Y.LY.STATUS=R.REDO.LY.POINTS.US<REDO.PT.US.STATUS.US>
        IF Y.LY.STATUS EQ '2' THEN
            Y.LY.STATUS.SET='1'
        END
    END
    IF R.ATM.REVERSAL<AT.REV.VISA.STLMT.REF> NE '' THEN
        ERROR.MESSAGE = 'DUP.PROCESSED.TRANS'
        RETURN
    END

    GOSUB CHECK.COND
RETURN
*---------
CHECK.COND:
*---------
    IF TXN.REF NE '' AND TXN.REF[1,4] EQ 'ACLK' THEN

        CALL F.READ(FN.AC.LOCKED.EVENTS,TXN.REF,R.AC.LOCKED.EVENTS,F.AC.LOCKED.EVENTS,AC.LOCKED.EVENTS.ERR)
        IF R.AC.LOCKED.EVENTS EQ '' THEN
            ERROR.MESSAGE = 'DELAY.SUBMISSION'
            RETURN
        END

    END ELSE

        IF TXN.REF NE '' AND TXN.REF[1,4] NE 'ACLK' AND Y.LY.STATUS.SET EQ '' THEN
            ERROR.MESSAGE = 'DUP.PROCESSED.TRANS'
            RETURN
        END

    END



* Get the values of fields transaction date originator currency if they are not same

    Y.TRANSACTION.DATE = R.ATM.REVERSAL<AT.REV.LOCAL.DATE>
    Y.ORIGINATOR.CURRENCY = R.ATM.REVERSAL<AT.REV.CURRENCY.CODE>

* IF Y.STLMT.LOCAL.DATE NE Y.TRANSACTION.DATE OR Y.STLMT.CCY.CODE NE Y.ORIGINATOR.CURRENCY THEN
*     ERROR.MESSAGE = 'NO.MATCH.TRANSACTION'
*     RETURN
* END

    Y.STLMT.DEST.CCY.CODE=R.REDO.STLMT.LINE<VISA.SETTLE.DEST.CCY.CODE>
    Y.ATM.REV.DEST.CCY.CODE=R.ATM.REVERSAL<AT.REV.DEST.CCY>
* IF Y.STLMT.DEST.CCY.CODE NE Y.ATM.REV.DEST.CCY.CODE THEN
*    ERROR.MESSAGE='INVALID.CURRENCY'
*    RETURN
* END


    IF AMT.CHECK EQ 'FALSE' THEN
        VERIFY.FLAG =1
    END

*use the CR.12 routine to identify the available balance of account and conversion date

    ACCOUNT.ID  = R.AC.LOCKED.EVENTS<AC.LCK.ACCOUNT.NUMBER>
    Y.LOCKED.AMT= R.AC.LOCKED.EVENTS<AC.LCK.LOCKED.AMOUNT>
    CALL F.READ(FN.ACCOUNT,ACCOUNT.ID,R.ACCOUNT,F.ACCOUNT,ACCT.ERR)
    Y.AVAILABLE.BALANCE = R.ACCOUNT<AC.LOCAL.REF,POS.L.AC.AV.BAL>+Y.LOCKED.AMT
*Y.CONVERSION.RATE = R.ATM.REVERSAL<AT.REV.CONVERSION.RATE>

*get the value of source.amt along with charge and compare in DOP equivalent amount

    Y.STLMT.DEST.AMOUNT=R.REDO.STLMT.LINE<VISA.SETTLE.DEST.AMT>
    Y.DEST.STLMT.CCY   =R.REDO.STLMT.LINE<VISA.SETTLE.DEST.CCY.CODE>
    Y.TRANSACTION.AMT    =R.AC.LOCKED.EVENTS<AC.LCK.LOCAL.REF,POS.L.TXN.AMT>      ;*L.TXN.AMT

    IF Y.LY.STATUS.SET THEN
        Y.TRANSACTION.AMT=R.ATM.REVERSAL<AT.REV.TRANSACTION.AMOUNT>
    END
    IF AMT.CHECK EQ 'TRUE' THEN
        IF Y.STLMT.DEST.AMOUNT NE Y.TRANSACTION.AMT THEN
            ERROR.MESSAGE='INVALID.TRAN.AMT.OR.ACCT.NUM'
        END
    END
    IF TC.CODE EQ 05 OR TC.CODE EQ 07 THEN
        GOSUB CHECK.BALANCE
    END
RETURN
*--------------
CHECK.BALANCE:
*--------------
    Y.CHARGE.AMT=R.AC.LOCKED.EVENTS<AC.LCK.LOCAL.REF,POS.L.TXN.CHG.LOCAL>
*  IF AMT.CHECK EQ 'FALSE' AND NOT(Y.LY.STATUS.SET) THEN
    IF NOT(Y.LY.STATUS.SET) THEN
        IF C$R.LCCY<EB.CUR.NUMERIC.CCY.CODE> EQ Y.DEST.STLMT.CCY THEN
            Y.CHECK.BAL=Y.STLMT.DEST.AMOUNT+Y.CHARGE.AMT
            IF Y.AVAILABLE.BALANCE LT Y.CHECK.BAL THEN
                ERROR.MESSAGE='NOT.SUFFICIENT.BALANCE'
            END
        END ELSE
*       Y.CHECK.BAL=Y.STLMT.DEST.AMOUNT*R.ATM.REVERSAL<AT.REV.EXCH.RATE>+Y.CHARGE.AMT
            GOSUB FIX.FOR.MANTIS.6910
            Y.CHECK.BAL = BUY.AMT + Y.CHARGE.AMT
            IF Y.AVAILABLE.BALANCE LT Y.CHECK.BAL THEN
                ERROR.MESSAGE='NOT.SUFFICIENT.BALANCE'
            END
        END
    END
RETURN

*------------------*
FIX.FOR.MANTIS.6910:
*------------------*
* Fix for PACS00484045 [Exchange rate / Charge amount calculation]
    FN.REDO.APAP.H.PARAMETER='F.REDO.APAP.H.PARAMETER'
    PARAMETER.ID = 'SYSTEM'
    CALL CACHE.READ(FN.REDO.APAP.H.PARAMETER,PARAMETER.ID,R.REDO.APAP.H.PARAMETER,PARAMETER.ERROR)

    IF Y.DEST.STLMT.CCY NE C$R.LCCY<EB.CUR.NUMERIC.CCY.CODE> THEN
        DEAL.CURRENCY       = 'USD'
        CCY.MKT             = R.REDO.APAP.H.PARAMETER<PARAM.CURRENCY.MARKET>
        CCY.BUY             = LCCY
        BUY.AMT             = ''
        CCY.SELL            = 'USD'
        SELL.AMT            = Y.STLMT.DEST.AMOUNT
        BASE.CCY            =''
        TREASURY.RATE       =''
        EXCH.RATE           =''
        CUST.SPREAD         =''
        SPREAD.PCT          =''
        LOCAL.CCY.BUY       =''
        LOCAL.CCY.SELL      =''
        RETURN.CODE         =''
        CALL CUSTRATE(CCY.MKT,CCY.BUY,BUY.AMT,CCY.SELL,SELL.AMT,BASE.CCY,TREASURY.RATE,EXCH.RATE,CUST.SPREAD,SPREAD.PCT,LOCAL.CCY.BUY,LOCAL.CCY.SELL,RETURN.CODE)
        GOSUB GET.CHARGE.AMT
    END
RETURN
*--------------
GET.CHARGE.AMT:
*--------------
    Y.FTTC.ID=R.ATM.REVERSAL<AT.REV.FTTC.ID>
    FN.FT.TXN.TYPE.CONDITION='F.FT.TXN.TYPE.CONDITION'
    F.FT.TXN.TYPE.CONDITION=''
    CALL OPF(FN.FT.TXN.TYPE.CONDITION,F.FT.TXN.TYPE.CONDITION)

    CALL CACHE.READ(FN.FT.TXN.TYPE.CONDITION, Y.FTTC.ID, R.FT.TXN.TYPE.CONDITION, FT.ERR) ;* R22 Auto conversion
    IF R.FT.TXN.TYPE.CONDITION THEN
        Y.FT.TXN.CHRG=R.FT.TXN.TYPE.CONDITION<FT6.CHARGE.TYPES>
        Y.FT.TXN.CHRG.CNT=DCOUNT(R.FT.TXN.TYPE.CONDITION<FT6.CHARGE.TYPES>,@VM)
        T.DATAA=''

        LOOP
            REMOVE Y.FT.CHRG FROM Y.FT.TXN.CHRG SETTING POS.CHRG
        WHILE Y.FT.CHRG:POS.CHRG
            T.DATAA<1,-1>=Y.FT.CHRG
            T.DATAA<2,-1>='CHG'
        REPEAT

        Y.FT.COMM=R.FT.TXN.TYPE.CONDITION<FT6.COMM.TYPES>
        Y.FT.COMM.CNT=DCOUNT(R.FT.TXN.TYPE.CONDITION<FT6.COMM.TYPES>,@VM)
        LOOP
            REMOVE Y.FT.COM FROM Y.FT.TXN.CHRG SETTING POS.CHRG
        WHILE Y.FT.CHRG:POS.CHRG
            T.DATAA<1,-1>=Y.FT.COM
            T.DATAA<2,-1>='COM'
        REPEAT
        CCY.MARKET='1'
        IF T.DATAA THEN
            CALL CALCULATE.CHARGE(CUSTOMER, DEAL.AMOUNT, DEAL.CURRENCY, CCY.MARKET,CROSS.RATE, CROSS.CURRENCY, DRAWDOWN.CCY, T.DATAA, CUST.COND, Y.CHARGE.AMT, TOT.CHARGE.FCCY)
        END
    END
RETURN
END
