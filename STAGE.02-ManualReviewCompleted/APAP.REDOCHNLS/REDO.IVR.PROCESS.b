* @ValidationCode : Mjo4NjkzNDI5NjA6Q3AxMjUyOjE2ODI2NzAwMDUwNzk6SVRTUzotMTotMTo1MTU0OjE6ZmFsc2U6Ti9BOlIyMV9BTVIuMDotMTotMQ==
* @ValidationInfo : Timestamp         : 28 Apr 2023 13:50:05
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSS
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : 5154
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOCHNLS
SUBROUTINE REDO.IVR.PROCESS(R.DATA)
*-----------------------------------------------------------------------------
*DESCRIPTION:
*------------
* This is an Authorisation routine to create an OFS message to input a transaction or execute an enquiry according with the
* operation requested in T24 and get the respond
*
* Input/Output:
*--------------
* IN : -NA-
* OUT : -NA-
*---------------
*-----------------------------------------------------------------------------
* Modification History :
*   Date            Who                   Reference               Description
*  29-JUN-2010  SWAMINATHAN.S.R         ODR-2009-12-0287        INITIAL VERSION
*  01-FEB-2011  RMONDRAGON / HPASQUEL                           UPDATE TO NOFILE RTN AND OFS.GLOBUS.MANAGER USE
*  03-OCT-2011  hpasquel@temenos.com    EB.COMPILE rating       Rating is high
*  11-NOV-2011  RMONDRAGON              ODR-2009-12-0287        Update needed for TWS
*  11-JUN-2012  RMONDRAGON              ODR-2011-02-0099        PACS00200772
*  31-AUG-2012  RMONDRAGON              ODR-2011-02-0099        Update for REDO.IVR.RECEPTOR record
*  14-FEB-2013  RMONDRAGON              ODR-2011-02-0099        Update
*  21-DEC-2019  Nanda                     PACS00809542                 OFS update of REDO.IVR.RECEPTOR stopped and write used.
*
* 11-APR-2023     Conversion tool   R22 Auto conversion     FM TO @FM, VM to @VM, ++ to +=, CHAR to CHARX,TNO to C$T24.SESSION.NO, I to I.VAR
* 12-APR-2023      Harishvikram C   Manual R22 conversion     CALL routine format modified
*-----------------------------------------------------------------------------
* <region name= Inserts>
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_ENQUIRY.COMMON
    $INSERT I_F.REDO.IVR.RECEPTOR
    $INSERT I_F.REDO.IVR.PARAMS
    $INSERT I_GTS.COMMON
    $INSERT I_TwsCommon
    $INSERT I_F.USER
    $INSERT JBC.h
* </region>
*-----------------------------------------------------------------------------

    GOSUB INIT
    GOSUB PROCESS
RETURN
*
*********
INIT:
*********
*Open files REDO.IVR.RECEPTOR and REDO.IVR.PARAMS

    FN.REDO.IVR.RECEPTOR = 'F.REDO.IVR.RECEPTOR'
    F.REDO.IVR.RECEPTOR = ''
    CALL OPF(FN.REDO.IVR.RECEPTOR,F.REDO.IVR.RECEPTOR)

    FN.REDO.IVR.PARAMS = 'F.REDO.IVR.PARAMS'
    F.REDO.IVR.PARAMS = ''
    CALL OPF(FN.REDO.IVR.PARAMS,F.REDO.IVR.PARAMS)

    Y.DATA.IN = '' ; TEMP1 = '' ; TEMP2 = ''

    Y.INT.CODE = 'IVR001'
    Y.INT.TYPE = 'ONLINE'
    Y.BAT.NO   = ''
    Y.BAT.TOT  = ''
    Y.INFO.OR  = 'T24'
    Y.INFO.DE  = 'IVR Enquiry-Operation.'
    Y.MON.TP   = '05'
    Y.DESC     = 'IVR Operation cant be executed.'
    Y.REC.CON  = ''
    Y.EX.USER  = OPERATOR
    Y.EX.PC    = ''

RETURN
*
**********
PROCESS:
**********
*Obtain value of INTERACT.NO and read the record REDO.IVR.PARAMS with the value of INTERACT.NO, if the record not found assign 'Operacion No Existe'
*to DATA.OUT field of REDO.IVR.RECEPTOR application

    LOCATE "DATA.IN" IN D.FIELDS<1> SETTING DATA.POS THEN
        Y.DATAOPER = D.RANGE.AND.VALUE<DATA.POS>
    END

    LOCATE "OP.NO" IN D.FIELDS<1> SETTING OP.POS THEN
        Y.INTERNO = D.RANGE.AND.VALUE<OP.POS>
    END
*
    CALL F.READ(FN.REDO.IVR.PARAMS,Y.INTERNO,R.REDO.IVR.PARAMS,F.REDO.IVR.PARAMS,Y.ERR.REDO.IVR.PARAMS)
    IF R.REDO.IVR.PARAMS EQ '' THEN
        R.DATA<-1> = 'RET.CODE*3'
    END ELSE
        GOSUB GET.US.PWD
        GOSUB TRANSACTION
    END
RETURN
*
***********
GET.US.PWD:
***********

    KEY1 = '456123'
    R.REDO.IVR.PARAMS2 = ''; Y.ERR.REDO.IVR.PARAMS2 = ''
    CALL CACHE.READ(FN.REDO.IVR.PARAMS,'SYSTEM',R.REDO.IVR.PARAMS2,Y.ERR.REDO.IVR.PARAMS2)
    Y.USER.OFS = DECRYPT(R.REDO.IVR.PARAMS2<REDO.IVR.PAR.USER>,KEY1,JBASE_CRYPT_DES_BASE64)
    Y.PWD.OFS = DECRYPT(R.REDO.IVR.PARAMS2<REDO.IVR.PAR.PWD>,KEY1,JBASE_CRYPT_DES_BASE64)

RETURN
*
************
TRANSACTION:
************
*Read the value of APP.MAP field from REDO.IVR.PARAMS application and T24 mapping is done

    Y.APP.ENQ = R.REDO.IVR.PARAMS<REDO.IVR.PAR.APP.ENQ>
    Y.APP.MAP = R.REDO.IVR.PARAMS<REDO.IVR.PAR.APP.MAP>
    Y.APPLICATION = Y.APP.ENQ

    GOSUB MAPPING

    FINDSTR ',' IN Y.APPLICATION SETTING APP.POS THEN
        GOSUB TRANSACTION.VERSION
    END ELSE
        GOSUB TRANSACTION.ENQUIRY
    END

RETURN
*
********
MAPPING:
********
*If value is present in APP.MAP of REDO.IVR.PARAMS application, mapping should be done from APP.MAP field values and assign to DATA.IN field of
*REDO.IVR.RECEPTOR application

    Y.DATAPARAM.COUNT = DCOUNT(Y.APP.MAP,@VM)
    Y.CNT = 1
    LOOP
    WHILE Y.CNT LE Y.DATAPARAM.COUNT

        Y.APP.MAP.X = Y.APP.MAP<1,Y.CNT>
        TEMP1 = FIELD(Y.APP.MAP.X,":",1,1)
        TEMP2 = FIELD(Y.APP.MAP.X,":",2,1)

        IF TEMP2 NE "" THEN
            TEMP3 = FIELD(Y.DATAOPER,",",Y.CNT)
            Y.MAPVALUE = TEMP1:":":TEMP2:"=":TEMP3
        END ELSE
            TEMP3 = FIELD(Y.DATAOPER,",",Y.CNT)
            Y.MAPVALUE = TEMP1:":1:1=":TEMP3
        END

        IF Y.DATA.IN EQ '' THEN
            Y.DATA.IN = Y.MAPVALUE
        END ELSE
            Y.DATA.IN = Y.DATA.IN:@FM:Y.MAPVALUE
        END

        Y.CNT += 1

    REPEAT
RETURN
*
********************
TRANSACTION.ENQUIRY:
********************
*If APP.ENQ field contains ENQUIRY, OFS.ENQUIRY.MANAGER is called to execute enquiry and value return is mapped to DATA.OUT field of REDO.IVR.RECEPTOR

    Y.ENQ.ID = Y.APPLICATION
    Y.SEL.CRITERIA = Y.DATA.IN
    Y.RETURN.DATA = ""
    Y.SYNTAX.TYPE = "OFS"
*
    GOSUB SAVE.STATUS
    GOSUB SAVE.TWS.VAR
    GOSUB RESET.TWS.VAR

    CALL OFS.ENQUIRY.MANAGER(Y.ENQ.ID,Y.SEL.CRITERIA,Y.RETURN.DATA,Y.SYNTAX.TYPE)

    GOSUB REPORT.LOG

    GOSUB RESTORE.STATUS
    GOSUB RESET.TWS.VAR

    GOSUB PROC.FORMAT.1
    GOSUB PROC.FORMAT.2

    GOSUB RESTORE.TWS.VAR

    GOSUB PREP.RESULT.SET

    GOSUB PROCESS.RESPONSE

RETURN
*
***********
REPORT.LOG:
***********

    Y.STR = FIELD(Y.RETURN.DATA,',',2)
    IF Y.STR EQ '' THEN
        Y.ID.PROC  = 'IVR Operation No. ':Y.INTERNO
        CALL APAP.REDOCHNLS.REDO.INTERFACE.REC.ACT(Y.INT.CODE,Y.INT.TYPE,Y.BAT.NO,Y.BAT.TOT,Y.INFO.OR,Y.INFO.DE,Y.ID.PROC,Y.MON.TP,Y.DESC,Y.REC.CON,Y.EX.USER,Y.EX.PC);*Manual R22 conversion
    END

RETURN

**************
PROC.FORMAT.1:
**************

    Y.RETURN.DATA.NEXT = Y.RETURN.DATA

    Y.POS = INDEX(Y.RETURN.DATA,",",2) + 1
    Y.RETURN.DATA = SUBSTRINGS(Y.RETURN.DATA,Y.POS,999999)

    CHANGE '","' TO @FM IN Y.RETURN.DATA

    Y.OUT = ""
    LOOP
        REMOVE Y.ROW FROM Y.RETURN.DATA SETTING Y.POS
    WHILE Y.POS : Y.ROW
        Y.ROW = CHANGE(Y.ROW,CHARX(9),@FM)
        Y.TOT.FLDS = DCOUNT(Y.ROW,@FM)
        Y.CNT.X = 1
        FOR I.VAR = 1 TO Y.TOT.FLDS
            Y.OUT := TRIM(CHANGE(Y.ROW<I.VAR>,'"',""))
            IF I.VAR LT Y.TOT.FLDS THEN
                Y.OUT := "%"
            END
        NEXT I.VAR
        Y.OUT := ','
    REPEAT

RETURN

**************
PROC.FORMAT.2:
**************

    Y.TOT.ROW.CNT = DCOUNT(Y.OUT,',')
    Y.ROW.CNT = 1
    Y.RES.SET.FLG = 'N'
    LOOP
    WHILE Y.ROW.CNT LT Y.TOT.ROW.CNT
        Y.ROW.OUT = FIELD(Y.OUT,',',Y.ROW.CNT)
        Y.TO.CNT = FIELD(Y.RETURN.DATA.NEXT,',',2)
        Y.TOT.CNT = DCOUNT(Y.TO.CNT,'/')
        Y.CNT = 1
        Y.FINAL.OUT = ''
        GOSUB PROC.FORMAT.3
        Y.ROW.CNT += 1
    REPEAT

RETURN

**************
PROC.FORMAT.3:
**************

    LOOP
    WHILE Y.CNT LE Y.TOT.CNT
        Y.FIELD.NAME = FIELD(Y.TO.CNT,'/',Y.CNT)
        Y.FIELD.NAME = FIELD(Y.FIELD.NAME,':',1)
        IF Y.ROW.CNT EQ 1 AND Y.FIELD.NAME EQ 'RESULT_SET' THEN
            Y.RES.SET.FLG = 'Y'
        END
        IF Y.RES.SET.FLG EQ 'Y' AND Y.ROW.CNT GE 2 AND Y.ROW.CNT LE Y.TOT.ROW.CNT THEN
            Y.CNT = Y.TOT.CNT
            Y.FIELD.NAME = 'RESULT_SET'
        END
        Y.FIELD.VALUE = FIELD(Y.ROW.OUT,'%',Y.CNT)
        IF Y.FIELD.VALUE NE '' THEN
            Y.NOREC = FIELD(Y.RETURN.DATA.NEXT,',',3)
            Y.NOREC = FIELD(Y.NOREC,' ',2)
            Y.NOREC2 = 'records'
            Y.EQUAL = COMPARE(Y.NOREC,Y.NOREC2,'L')
            IF Y.FIELD.NAME EQ 'RET_CODE' AND Y.EQUAL EQ 0 THEN
                R.DATA<-1> = Y.FIELD.NAME:'*2'
                Y.ROW.CNT = Y.TOT.ROW.CNT
                RETURN
            END ELSE
                GOSUB FORMAT.VAL
            END
        END ELSE
            IF Y.FIELD.NAME NE 'RESULT_SET' THEN
                R.DATA<-1> = Y.FIELD.NAME:'*NODATA'
            END
        END
        Y.CNT += 1
    REPEAT

RETURN

***********
FORMAT.VAL:
***********

    Y.CNT.VAL = DCOUNT(Y.FIELD.VALUE,CHARX(10))
    IF Y.CNT.VAL EQ 0 THEN
        R.DATA<-1> = Y.FIELD.NAME:'*':Y.FIELD.VALUE
    END ELSE
        Y.NEXT.VAL = 1
        Y.FIELD.VALUE1 = ''
        LOOP
        WHILE Y.NEXT.VAL LE Y.CNT.VAL
            Y.TEMP.VAL = FIELD(Y.FIELD.VALUE,CHARX(10),Y.NEXT.VAL)
            Y.FIELD.VALUE1 := '*':Y.TEMP.VAL
            Y.NEXT.VAL += 1
        REPEAT
        R.DATA<-1> = Y.FIELD.NAME:Y.FIELD.VALUE1
    END

RETURN

****************
PREP.RESULT.SET:
****************

    CHANGE @FM TO '/' IN Y.DATA.IN
    Y.R.DATA = ''
    Y.R.DATA = R.DATA
    CHANGE '_' TO '.' IN Y.R.DATA
    CHANGE @FM TO '/' IN Y.R.DATA

    IF Y.RES.SET.FLG EQ 'Y' THEN
        Y.R.DATA.TEMP = FIELD(Y.R.DATA,'RESULT.SET',1)
        Y.RES.SET.TOT.CNT = DCOUNT(Y.R.DATA,'RESULT.SET')
        Y.RES.SET.CNT = 2
        LOOP
        WHILE Y.RES.SET.CNT LE Y.RES.SET.TOT.CNT
            Y.TO.RES.SET = FIELD(Y.R.DATA,'RESULT.SET',Y.RES.SET.CNT)
            CHANGE '/' TO '=' IN Y.TO.RES.SET
            IF Y.RES.SET.CNT EQ 2 THEN
                Y.R.DATA.TEMP := 'RESULT.SET':Y.TO.RES.SET
            END ELSE
                Y.R.DATA.TEMP := '/':'RESULT.SET':Y.TO.RES.SET
            END
            Y.RES.SET.CNT += 1
        REPEAT
        Y.R.DATA = Y.R.DATA.TEMP
    END

    Y.RETURN.DATA.NEW = Y.R.DATA

RETURN

********************
TRANSACTION.VERSION:
********************
*If APP.ENQ field contains VERSION, OFS message is formed and OFS.POST.MESSAGE is called to execute the OFS message and value return is mapped to
*DATA.OUT field of REDO.IVR.RECEPTOR

    Y.OFSVERSION = Y.APPLICATION
    Y.OFSRECORD = ""
*
    Y.OFSRECORD = Y.OFSVERSION:"/I/PROCESS,":Y.USER.OFS:"/":Y.PWD.OFS:",,"
    CHANGE @FM TO "," IN Y.DATA.IN
    Y.MSG = Y.OFSRECORD:Y.DATA.IN
    Y.OFS.SOURCE.ID = "IVRPROC"
 
    OFS.RESP   = ""; TXN.COMMIT = "" ;* R22 Manual conversion - Start
*CALL OFS.GLOBUS.MANAGER(Y.OFS.SOURCE.ID,Y.MSG)
    CALL OFS.CALL.BULK.MANAGER(Y.OFS.SOURCE.ID,Y.MSG, OFS.RESP, TXN.COMMIT) ;* R22 Manual conversion - End
    GOSUB PROC.RESP.VERSION

*    GOSUB PROCESS.RESPONSE

RETURN
*
******************
PROC.RESP.VERSION:
******************

    TEMP = FIELD(Y.MSG,"/",3)
    IF FIELD(TEMP,",",1) EQ "1" THEN
        GOSUB IF.TXN.W.OVER
    END ELSE
        Y.RETURN.DATA.NEW = FIELD(Y.MSG,"/",4)
        CHANGE ":" TO "." IN Y.RETURN.DATA.NEW
        CHANGE "=" TO "-" IN Y.RETURN.DATA.NEW
        CHANGE "," TO "/" IN Y.RETURN.DATA.NEW
        R.DATA<-1> = 'RET_CODE*2'
        R.DATA<-1> = 'ERROR*':Y.RETURN.DATA.NEW
    END

    Y.R.DATA = R.DATA
    CHANGE '_' TO '.' IN Y.R.DATA
    CHANGE @FM TO '/' IN Y.R.DATA

    Y.RETURN.DATA.NEW = Y.R.DATA

RETURN

*****************
PROCESS.RESPONSE:
*****************

    SAVE.APPLICATION = APPLICATION
    SAVE.PGM.TYPE = PGM.TYPE
    APPLICATION = 'REDO.IVR.RECEPTOR'
    PGM.TYPE = 'U'
    RETURN.ID = ''
    APP.PREFIX = ''
    CALL UNIQUE.ID(RETURN.ID,APP.PREFIX)

    APPLICATION = SAVE.APPLICATION
    PGM.TYPE = SAVE.PGM.TYPE

    REDO.IVR.REP.ID = RETURN.ID

*    Y.OFSRECORD = ""
*
*    Y.OFSRECORD = "REDO.IVR.RECEPTOR,INPUT/I/PROCESS,":Y.USER.OFS:"/":Y.PWD.OFS:",,"
    CHANGE ':' TO "=" IN Y.DATA.IN
    CHANGE "," TO "/" IN Y.DATA.IN
    GOSUB MAPPING.OFS

*    Y.DATA.IN = "INTERACT.NO=":Y.INTERNO:",DATA.IN=":Y.DATA.IN:",DATA.OUT=":Y.RETURN.DATA.NEW:","
*    Y.MSG = Y.OFSRECORD:Y.DATA.IN
*
*    Y.OFS.SOURCE.ID = "IVRPROC"
*
*    CALL OFS.GLOBUS.MANAGER(Y.OFS.SOURCE.ID,Y.MSG)
    R.REDO.IVR.RECEPTOR = ''
    R.REDO.IVR.RECEPTOR<REDO.IVR.REC.INTERACT.NO> = Y.INTERNO
    R.REDO.IVR.RECEPTOR<REDO.IVR.REC.DATA.IN> = Y.DATA.IN
    R.REDO.IVR.RECEPTOR<REDO.IVR.REC.DATA.OUT> = Y.RETURN.DATA.NEW
    R.REDO.IVR.RECEPTOR<REDO.IVR.REC.INPUTTER> = C$T24.SESSION.NO:"_":OPERATOR
    R.REDO.IVR.RECEPTOR<REDO.IVR.REC.AUTHORISER> = C$T24.SESSION.NO:"_":OPERATOR
    R.REDO.IVR.RECEPTOR<REDO.IVR.REC.CURR.NO> = '1'
    TIME.STAMP = TIMEDATE()
    CURR.DATE = OCONV(DATE(),"D-")
    CURR.DATE = CURR.DATE[9,2]:CURR.DATE[1,2]:CURR.DATE[4,2]:TIME.STAMP[1,2]:TIME.STAMP[4,2]
    R.REDO.IVR.RECEPTOR<REDO.IVR.REC.DATE.TIME> = CURR.DATE
    R.REDO.IVR.RECEPTOR<REDO.IVR.REC.CO.CODE> = ID.COMPANY
    R.REDO.IVR.RECEPTOR<REDO.IVR.REC.DEPT.CODE> = R.USER<EB.USE.DEPARTMENT.CODE>
    WRITE R.REDO.IVR.RECEPTOR TO F.REDO.IVR.RECEPTOR,REDO.IVR.REP.ID
RETURN

************
MAPPING.OFS:
************

    Y.DATAPARAM.COUNT.OFS = DCOUNT(Y.APP.MAP,@VM)
    Y.CNT = 1
    LOOP
    WHILE Y.CNT LE Y.DATAPARAM.COUNT.OFS

        Y.APP.MAP.Y = Y.APP.MAP<1,Y.CNT>
        TEMP1 = FIELD(Y.APP.MAP.Y,":",1,1)
        TEMP2 = FIELD(Y.APP.MAP.Y,":",2,1)

        IF TEMP2 NE "" THEN
            TEMP3 = FIELD(Y.DATAOPER,",",Y.CNT)
            ACC.NUM.MASK = ""
            ACC.NUM.MASK = TEMP3
            LEN.DATA = LEN(ACC.NUM.MASK)
            IF LEN.DATA EQ '16' THEN
                LEN.DIFF = LEN.DATA - 3
                LAST.DATA = ACC.NUM.MASK[LEN.DIFF,LEN.DATA]
                ACC.NUM.MASK = ACC.NUM.MASK[1,6]:'XXXXXX':LAST.DATA
                TEMP3.D   =  ACC.NUM.MASK
            END ELSE
                IF TEMP1 EQ 'PIN.USR' THEN
                    TEMP3.D = 'XXXX'
                END
            END
            Y.MAPVALUE.D = TEMP1:":":TEMP2:"=":TEMP3.D
        END ELSE
            TEMP3 = FIELD(Y.DATAOPER,",",Y.CNT)
            ACC.NUM.MASK = ""
            ACC.NUM.MASK = TEMP3
            LEN.DATA = LEN(ACC.NUM.MASK)
            IF LEN.DATA EQ '16' THEN
                LEN.DIFF = LEN.DATA - 3
                LAST.DATA = ACC.NUM.MASK[LEN.DIFF,LEN.DATA]
                ACC.NUM.MASK = ACC.NUM.MASK[1,6]:'XXXXXX':LAST.DATA
                TEMP3.D   =  ACC.NUM.MASK
            END ELSE
                IF TEMP1 EQ 'PIN.USR' THEN
                    TEMP3.D = 'XXXX'
                END
            END
            Y.MAPVALUE.D = TEMP1:":1:1=":TEMP3.D
        END

        IF Y.DATA.IN.D EQ '' THEN
            Y.DATA.IN.D = Y.MAPVALUE.D
        END ELSE
            Y.DATA.IN.D = Y.DATA.IN.D:@FM:Y.MAPVALUE.D
        END

        Y.CNT += 1

    REPEAT
    Y.DATA.IN = Y.DATA.IN.D

RETURN

**************
IF.TXN.W.OVER:
**************

    Y.TEMP.RESP = FIELD(Y.MSG,"/",4)
    FINDSTR 'OVERRIDE=' IN Y.TEMP.RESP SETTING OV.POS THEN
        Y.RETURN.DATA.NEW = FIELD(Y.MSG,"/",1)
        Y.OV = FIELD(Y.TEMP.RESP,'OVERRIDE=',2)
        Y.OV = FIELD(Y.OV,',',1)
        R.DATA<-1> = 'RET_CODE*3'
        R.DATA<-1> = 'TXN_REF*':Y.RETURN.DATA.NEW
        R.DATA<-1> = 'OVERRIDE*':Y.OV
        Y.RETURN.DATA.NEW := '/':Y.OV
    END ELSE
        Y.TEMP.RESP = Y.MSG
        FINDSTR 'OVERRIDE:1:1=' IN Y.TEMP.RESP SETTING OV.POS THEN
            Y.RETURN.DATA.NEW = FIELD(Y.MSG,"/",1)
            Y.OV = FIELD(Y.TEMP.RESP,'OVERRIDE:1:1=',2)
            Y.OV = FIELD(Y.OV,',',1)
            R.DATA<-1> = 'RET_CODE*3'
            R.DATA<-1> = 'TXN_REF*':Y.RETURN.DATA.NEW
            R.DATA<-1> = 'OVERRIDE*':Y.OV
            Y.RETURN.DATA.NEW := '/':Y.OV
        END ELSE
            Y.RETURN.DATA.NEW = FIELD(Y.MSG,"/",1)
            R.DATA<-1> = 'RET_CODE*1'
            R.DATA<-1> = 'TXN_REF*':Y.RETURN.DATA.NEW
        END
    END

RETURN

*-----------------------------------------------------------------------------
SAVE.STATUS:
*-----------------------------------------------------------------------------
    OLD.R.ENQ = R.ENQ
    DIM OLD.PAGE.TABLE(500)
    DIM OLD.LISTS(500)
    DIM OLD.L.INDEX(500)
    DIM OLD.C.INDEX(500)
    DIM OLD.S.LIST(500)
    DIM OLD.S.INDEX(500)
    DIM OLD.CONCAT(500)
    DIM OLD.S.DEPTH(500)
    DIM OLD.DUM(500)
    DIM OLD.ENQ.SL(500)
    DIM OLD.ARG(500)
    DIM OLD.DUM.ARY(500)
    DIM OLD.NQ.DSP(500)
    DIM OLD.HARDCOPY(500)
    DIM OLD.DUMMY(500)
    DIM OLD.DUMMY3(500)
    DIM OLD.DUMMY4(500)
    DIM OLD.DUMMY5(500)
    DIM OLD.DUMMY6(500)
    DIM OLD.DUMMY7(500)
    DIM OLD.DUMMY8(500)
    DIM OLD.DUMMY9(500)
    DIM OLD.DUMMY10(500)
    DIM OLD.DUMMY11(500)
    DIM OLD.DUMMY12(500)
    DIM OLD.DUMMY13(500)
    DIM OLD.LIST(500)
    DIM OLD.CODE(500)
    DIM OLD.ENQ.UNUSED.VAR4(500)
    DIM OLD.RANGE(500)
    DIM OLD.SECOND.INC(500)
    DIM OLD.UNSORTED.LIST(500)
    DIM OLD.FIELD.PAD.WIDTH(500)
    DIM OLD.FIELD.PAD.JUST(500)
    DIM OLD.FIELD.TRANSFORM(500)
*
    MAT OLD.PAGE.TABLE = MAT PAGE.TABLE
    MAT OLD.LISTS = MAT LISTS
    MAT OLD.L.INDEX = MAT L.INDEX
    MAT OLD.C.INDEX = MAT C.INDEX
    MAT OLD.S.LIST = MAT S.LIST
    MAT OLD.S.INDEX = MAT S.INDEX
    MAT OLD.CONCAT = MAT CONCAT
    MAT OLD.S.DEPTH = MAT S.DEPTH
    MAT OLD.DUM = MAT DUM
    OLD.CURRENT.PAGE = CURRENT.PAGE
    OLD.LAST.PAGE.BUILT = LAST.PAGE.BUILT
    OLD.NEXT.ENQ.DATA = NEXT.ENQ.DATA
    OLD.INCOMPLETE.DISPLAY = INCOMPLETE.DISPLAY
    OLD.INCOMPLETE.PAGE = INCOMPLETE.PAGE
    OLD.ALL.PAGES.BUILT = ALL.PAGES.BUILT
    OLD.LINE = LINE
    OLD.EXTRACT.DATA = EXTRACT.DATA
    OLD.S = S
    OLD.SM.COUNT = SM.COUNT
    OLD.NEXT.VALUE.NEEDED = NEXT.VALUE.NEEDED
    OLD.VC = VC
    OLD.VM.COUNT = VM.COUNT
    OLD.NEXT.ID.NEEDED = NEXT.ID.NEEDED
    OLD.NO.MORE.IDS = NO.MORE.IDS
    OLD.CURRENT.DATA = CURRENT.DATA
    OLD.TOTAL.DATA = TOTAL.DATA
    OLD.LEVEL = LEVEL
    MAT OLD.ENQ.SL = MAT ENQ.SL
    MAT OLD.ARG = MAT ARG
    MAT OLD.DUM.ARY = MAT DUM.ARY
    MAT OLD.NQ.DSP = MAT NQ.DSP
    MAT OLD.HARDCOPY = MAT HARDCOPY
    OLD.ENQUIRY.LEVEL = ENQUIRY.LEVEL
    OLD.SPOOL.BRK.FLDS = SPOOL.BRK.FLDS
    OLD.SPOOL.CUST.ACCT = SPOOL.CUST.ACCT
    OLD.CHK.CACHE = CHK.CACHE
    OLD.CHK.DATA = CHK.DATA
    OLD.PAGE.TO.DISPLAY = PAGE.TO.DISPLAY
    OLD.HEADER = HEADER
    OLD.LAST.CCY = LAST.CCY
    OLD.REC.CON = REC.CON
    OLD.SORT.LIST = SORT.LIST
    OLD.TOTAL = TOTAL
    OLD.NQ = NQ
    OLD.NQ.FLAG = NQ.FLAG
    OLD.NEXT.ENQ = NEXT.ENQ
    OLD.START.OF.PAGE.FLAG = START.OF.PAGE.FLAG
    OLD.FORMATTED.DATA = FORMATTED.DATA
    OLD.F.DATA.FILE = F.DATA.FILE
    OLD.F.ENQ = F.ENQ
    OLD.F.STD = F.STD
    GOSUB SAVE.STATUS.A       ;* Problems with Rating.. then A calls to B, B calls to C

RETURN
*-----------------------------------------------------------------------------------------
SAVE.STATUS.A:
*-----------------------------------------------------------------------------------------
    OLD.F.ENQUIRY.LEVEL = F.ENQUIRY.LEVEL
    OLD.START.LINE = START.LINE
    OLD.LAST.PAGE.LINE = LAST.PAGE.LINE
    OLD.LENGTH.OF.PAGE = LENGTH.OF.PAGE
    OLD.NO.OF.PAGE.FIELDS = NO.OF.PAGE.FIELDS
    OLD.PAGE.FIELDS = PAGE.FIELDS
    OLD.NO.OF.MULTI.FIELDS = NO.OF.MULTI.FIELDS
    OLD.MULTI.FIELDS = MULTI.FIELDS
    OLD.NO.OF.BREAK.FIELDS = NO.OF.BREAK.FIELDS
    OLD.BREAK.FIELDS = BREAK.FIELDS
    OLD.NO.OF.PROCESS.BREAKS = NO.OF.PROCESS.BREAKS
    OLD.PROCESS.BREAKS = PROCESS.BREAKS
    OLD.NO.OF.TOTAL.FIELDS = NO.OF.TOTAL.FIELDS
    OLD.TOTAL.FIELDS = TOTAL.FIELDS
    OLD.NO.OF.NXT.LEVEL.FIELDS = NO.OF.NXT.LEVEL.FIELD
    OLD.NXT.LEVEL.FIELDS = NXT.LEVEL.FIELDS
    OLD.LABEL.FIELD = LABEL.FIELD
    OLD.FLD.CNV = FLD.CNV
    OLD.ENQ.KEYS = ENQ.KEYS
    OLD.ENQUIRY.COMPANY = ENQUIRY.COMPANY
    OLD.PREVIOUS.DATA = PREVIOUS.DATA
    OLD.ENQ.SELECTION = ENQ.SELECTION
    OLD.ENQ.SEL.REC = ENQ.SEL.REC
*
    GOSUB SAVE.STATUS.B
RETURN
RETURN
*-----------------------------------------------------------------------------------------
SAVE.STATUS.B:
*-----------------------------------------------------------------------------------------
    OLD.R.ENQ = R.ENQ
    OLD.MAX.LEVEL = MAX.LEVEL
    OLD.DATA.FILE.NAME = DATA.FILE.NAME
    OLD.FULL.FILE.NAME = FULL.FILE.NAME
    OLD.OPERAND.LIST = OPERAND.LIST
    OLD.CLEAR.PAGE = CLEAR.PAGE
    OLD.NEXT.OPERATION = NEXT.OPERATION
    OLD.INST = INST
    OLD.FIRST.TIME = FIRST.TIME
    OLD.R.RECORD = R.RECORD
    OLD.ID = ID
    OLD.O.DATA = O.DATA
    OLD.ID.FOUND = ID.FOUND
    OLD.LAST.LEVEL = LAST.LEVEL
    OLD.SCR.ATTRIBUTE = SCR.ATTRIBUTE
    OLD.SMS.PROFILE = SMS.PROFILE
    OLD.NQ.FUNCTION = NQ.FUNCTION
    OLD.PREVIOUS.RECORD = PREVIOUS.RECORD
    MAT OLD.DUMMY = MAT DUMMY
    MAT OLD.DUMMY3 = MAT DUMMY3
    MAT OLD.DUMMY4 = MAT DUMMY4
    MAT OLD.DUMMY5 = MAT DUMMY5
    MAT OLD.DUMMY6 = MAT DUMMY6
    MAT OLD.DUMMY7 = MAT DUMMY7
    MAT OLD.DUMMY8 = MAT DUMMY8
    OLD.ENQ.ERROR = ENQ.ERROR
    OLD.DISPLAY.SELECT = DISPLAY.SELECT
    MAT OLD.DUMMY9 = MAT DUMMY9
    OLD.LINE.OFFSET = LINE.OFFSET
    OLD.CLEAR.LOGICAL.SCREEN = CLEAR.LOGICAL.SCREEN
    OLD.LOGICAL.OPERANDS = LOGICAL.OPERANDS
    OLD.RANGE.AND.VALUE = RANGE.AND.VALUE
    OLD.D.FIELDS = D.FIELDS
    OLD.D.CONVERSIONS = D.CONVERSIONS
    OLD.D.LOGICAL.OPERANDS = D.LOGICAL.OPERANDS
    OLD.D.RANGE.AND.VALUE = D.RANGE.AND.VALUE
    MAT OLD.DUMMY10 = MAT DUMMY10
    MAT OLD.DUMMY11 = MAT DUMMY11
    MAT OLD.DUMMY12 = MAT DUMMY12
    MAT OLD.DUMMY13 = MAT DUMMY13
    OLD.ENQ.OFS.OUTPUT = ENQ.OFS.OUTPUT
    MAT OLD.LIST = MAT LIST
    OLD.LAST.LIST = LAST.LIST
*
    GOSUB SAVE.STATUS.C
RETURN
*-----------------------------------------------------------------------------------------
SAVE.STATUS.C:
*-----------------------------------------------------------------------------------------
    MAT OLD.CODE = MAT CODE
    MAT OLD.ENQ.UNUSED.VAR4 = MAT ENQ.UNUSED.VAR4
    MAT OLD.RANGE = MAT RANGE
    OLD.HEADER.HARDCOPY = HEADER.HARDCOPY
    OLD.HCPY.SEP = HCPY.SEP
    MAT OLD.SECOND.INC = MAT SECOND.INC
    OLD.STATUS.LINE = STATUS.LINE
    OLD.ENQ.COMP.MNE = ENQ.COMP.MNE
    MAT OLD.UNSORTED.LIST = MAT UNSORTED.LIST
    OLD.STATIC.HEADER = STATIC.HEADER
    OLD.STATIC.HEADER.DATA = STATIC.HEADER.DATA
    OLD.FILE.PAD.WIDTH = FILE.PAD.WIDTH
    OLD.FILE.JUST = FILE.JUST
    MAT OLD.FIELD.PAD.WIDTH = MAT FIELD.PAD.WIDTH
    MAT OLD.FIELD.PAD.JUST = MAT FIELD.PAD.JUST
    MAT OLD.FIELD.TRANSFORM = MAT FIELD.TRANSFORM
    OLD.LOWEST.KEY = LOWEST.KEY
    OLD.HIGHEST.KEY = HIGHEST.KEY
    OLD.SORT.ADJUSTMENT = SORT.ADJUSTMENT
    OLD.SORTED.LIST = SORTED.LIST
    OLD.NBR.IN.LIST = NBR.IN.LIST
    OLD.MATCHED.II = MATCHED.II
    OLD.TOTAL.KEYS = TOTAL.KEYS
    OLD.LAST.LARGE = LAST.LARGE
    OLD.NBR.FIRST.GROUPS = NBR.FIRST.GROUPS
    OLD.CURRENT.SELECTION = CURRENT.SELECTION
    OLD.BRK.NEW.PAGE = BRK.NEW.PAGE
    OLD.NOT.FIRST.PAGE.FLAG = NOT.FIRST.PAGE.FLAG
    OLD.ENQ.TOTAL.PAGES = ENQ.TOTAL.PAGES
    OLD.OFS$ENQ.KEYS = OFS$ENQ.KEYS
    OLD.OFS$ENQ.KEY.COUNT = OFS$ENQ.KEY.COUNT
    OLD.ENQ$FILE.VERSION = ENQ$FILE.VERSION
    OLD.ENQ$SIM.REF = ENQ$SIM.REF
    OLD.ENQ$THIS.FILE.VERSION = ENQ$THIS.FILE.VERSION

RETURN
*-----------------------------------------------------------------------------
RESTORE.STATUS:
*-----------------------------------------------------------------------------
    MAT NQ.DSP = '' ;* CLEAR ARRAY HOLDING USER SELECTION DISPLAY
    NQ.FLAG = ''    ;* CLEAR FLAG INDICATING SELECTION
    R.ENQ = OLD.R.ENQ

    MAT PAGE.TABLE = MAT OLD.PAGE.TABLE
    MAT LISTS = MAT OLD.LISTS
    MAT L.INDEX = MAT OLD.L.INDEX
    MAT C.INDEX = MAT OLD.C.INDEX
    MAT S.LIST = MAT OLD.S.LIST
    MAT S.INDEX = MAT OLD.S.INDEX
    MAT CONCAT = MAT OLD.CONCAT
    MAT S.DEPTH = MAT OLD.S.DEPTH
    MAT DUM = MAT OLD.DUM
    CURRENT.PAGE = OLD.CURRENT.PAGE
    LAST.PAGE.BUILT = OLD.LAST.PAGE.BUILT
    NEXT.ENQ.DATA = OLD.NEXT.ENQ.DATA
    INCOMPLETE.DISPLAY = OLD.INCOMPLETE.DISPLAY
    INCOMPLETE.PAGE = OLD.INCOMPLETE.PAGE
    ALL.PAGES.BUILT = OLD.ALL.PAGES.BUILT
    LINE = OLD.LINE
    EXTRACT.DATA = OLD.EXTRACT.DATA
    S = OLD.S
    SM.COUNT = OLD.SM.COUNT
    NEXT.VALUE.NEEDED = OLD.NEXT.VALUE.NEEDED
    VC = OLD.VC
    VM.COUNT = OLD.VM.COUNT
    NEXT.ID.NEEDED = OLD.NEXT.ID.NEEDED
    NO.MORE.IDS = OLD.NO.MORE.IDS
    CURRENT.DATA = OLD.CURRENT.DATA
    TOTAL.DATA = OLD.TOTAL.DATA
    LEVEL = OLD.LEVEL
    MAT ENQ.SL = MAT OLD.ENQ.SL
    MAT ARG = MAT OLD.ARG
    MAT DUM.ARY = MAT OLD.DUM.ARY
    MAT NQ.DSP = MAT OLD.NQ.DSP
    MAT HARDCOPY = MAT OLD.HARDCOPY
    ENQUIRY.LEVEL = OLD.ENQUIRY.LEVEL
    SPOOL.BRK.FLDS = OLD.SPOOL.BRK.FLDS
    SPOOL.CUST.ACCT = OLD.SPOOL.CUST.ACCT
    CHK.CACHE = OLD.CHK.CACHE
    CHK.DATA = OLD.CHK.DATA
    PAGE.TO.DISPLAY = OLD.PAGE.TO.DISPLAY
    HEADER = OLD.HEADER
    LAST.CCY = OLD.LAST.CCY
    REC.CON = OLD.REC.CON
    SORT.LIST = OLD.SORT.LIST
    TOTAL = OLD.TOTAL
    NQ = OLD.NQ
    NQ.FLAG = OLD.NQ.FLAG
    NEXT.ENQ = OLD.NEXT.ENQ
    START.OF.PAGE.FLAG = OLD.START.OF.PAGE.FLAG
    FORMATTED.DATA = OLD.FORMATTED.DATA
    F.DATA.FILE = OLD.F.DATA.FILE
    F.ENQ = OLD.F.ENQ
    F.STD = OLD.F.STD
    F.ENQUIRY.LEVEL = OLD.F.ENQUIRY.LEVEL
    START.LINE = OLD.START.LINE
    LAST.PAGE.LINE = OLD.LAST.PAGE.LINE
    LENGTH.OF.PAGE = OLD.LENGTH.OF.PAGE
    NO.OF.PAGE.FIELDS = OLD.NO.OF.PAGE.FIELDS
    PAGE.FIELDS = OLD.PAGE.FIELDS
    NO.OF.MULTI.FIELDS = OLD.NO.OF.MULTI.FIELDS
    MULTI.FIELDS = OLD.MULTI.FIELDS
    NO.OF.BREAK.FIELDS = OLD.NO.OF.BREAK.FIELDS
    BREAK.FIELDS = OLD.BREAK.FIELDS
    NO.OF.PROCESS.BREAKS = OLD.NO.OF.PROCESS.BREAKS
    PROCESS.BREAKS = OLD.PROCESS.BREAKS
    NO.OF.TOTAL.FIELDS = OLD.NO.OF.TOTAL.FIELDS
    TOTAL.FIELDS = OLD.TOTAL.FIELDS
    NO.OF.NXT.LEVEL.FIELD = OLD.NO.OF.NXT.LEVEL.FIELDS
    NXT.LEVEL.FIELDS = OLD.NXT.LEVEL.FIELDS
    LABEL.FIELD = OLD.LABEL.FIELD
    FLD.CNV = OLD.FLD.CNV
    ENQ.KEYS = OLD.ENQ.KEYS
    ENQUIRY.COMPANY = OLD.ENQUIRY.COMPANY
    PREVIOUS.DATA = OLD.PREVIOUS.DATA
    ENQ.SELECTION = OLD.ENQ.SELECTION
    ENQ.SEL.REC = OLD.ENQ.SEL.REC
    MAX.LEVEL = OLD.MAX.LEVEL
    DATA.FILE.NAME = OLD.DATA.FILE.NAME
    FULL.FILE.NAME = OLD.FULL.FILE.NAME
    OPERAND.LIST = OLD.OPERAND.LIST
    CLEAR.PAGE = OLD.CLEAR.PAGE
    NEXT.OPERATION = OLD.NEXT.OPERATION
    INST = OLD.INST
    FIRST.TIME = OLD.FIRST.TIME
    R.RECORD = OLD.R.RECORD
    ID = OLD.ID
    O.DATA = OLD.O.DATA
    ID.FOUND = OLD.ID.FOUND
    LAST.LEVEL = OLD.LAST.LEVEL
    SCR.ATTRIBUTE = OLD.SCR.ATTRIBUTE
    SMS.PROFILE = OLD.SMS.PROFILE
    NQ.FUNCTION = OLD.NQ.FUNCTION
    MAT DUMMY = MAT OLD.DUMMY
    PREVIOUS.RECORD = OLD.PREVIOUS.RECORD
    MAT DUMMY3 = MAT OLD.DUMMY3
    MAT DUMMY4 = MAT OLD.DUMMY4
    MAT DUMMY5 = MAT OLD.DUMMY5
    MAT DUMMY6 = MAT OLD.DUMMY6
    MAT DUMMY7 = MAT OLD.DUMMY7
    MAT DUMMY8 = MAT OLD.DUMMY8
    ENQ.ERROR = OLD.ENQ.ERROR
    DISPLAY.SELECT = OLD.DISPLAY.SELECT
    MAT DUMMY9 = MAT OLD.DUMMY9
    LINE.OFFSET = OLD.LINE.OFFSET
    CLEAR.LOGICAL.SCREEN = OLD.CLEAR.LOGICAL.SCREEN
    LOGICAL.OPERANDS = OLD.LOGICAL.OPERANDS
    RANGE.AND.VALUE = OLD.RANGE.AND.VALUE
    D.FIELDS = OLD.D.FIELDS
    D.CONVERSIONS = OLD.D.CONVERSIONS
    D.LOGICAL.OPERANDS = OLD.D.LOGICAL.OPERANDS
    D.RANGE.AND.VALUE = OLD.D.RANGE.AND.VALUE
    MAT DUMMY10 = MAT OLD.DUMMY10
    MAT DUMMY11 = MAT OLD.DUMMY11
    MAT DUMMY12 = MAT OLD.DUMMY12
    MAT DUMMY13 = MAT OLD.DUMMY13
    ENQ.OFS.OUTPUT = OLD.ENQ.OFS.OUTPUT
    MAT LIST = MAT OLD.LIST
    LAST.LIST = OLD.LAST.LIST
    MAT CODE = MAT OLD.CODE
    MAT ENQ.UNUSED.VAR4 = MAT OLD.ENQ.UNUSED.VAR4
    MAT RANGE = MAT OLD.RANGE
    HEADER.HARDCOPY = OLD.HEADER.HARDCOPY
    HCPY.SEP = OLD.HCPY.SEP
    MAT SECOND.INC = MAT OLD.SECOND.INC
    STATUS.LINE = OLD.STATUS.LINE
    ENQ.COMP.MNE = OLD.ENQ.COMP.MNE
    MAT UNSORTED.LIST = MAT OLD.UNSORTED.LIST
    STATIC.HEADER = OLD.STATIC.HEADER
    STATIC.HEADER.DATA = OLD.STATIC.HEADER.DATA
    FILE.PAD.WIDTH = OLD.FILE.PAD.WIDTH
    FILE.JUST = OLD.FILE.JUST
    MAT FIELD.PAD.WIDTH = MAT OLD.FIELD.PAD.WIDTH
    MAT FIELD.PAD.JUST = MAT OLD.FIELD.PAD.JUST
    MAT FIELD.TRANSFORM = MAT OLD.FIELD.TRANSFORM
    LOWEST.KEY = OLD.LOWEST.KEY
    HIGHEST.KEY = OLD.HIGHEST.KEY
    SORT.ADJUSTMENT = OLD.SORT.ADJUSTMENT
    SORTED.LIST = OLD.SORTED.LIST
    NBR.IN.LIST = OLD.NBR.IN.LIST
    MATCHED.II = OLD.MATCHED.II
    TOTAL.KEYS = OLD.TOTAL.KEYS
    LAST.LARGE = OLD.LAST.LARGE
    NBR.FIRST.GROUPS = OLD.NBR.FIRST.GROUPS
    CURRENT.SELECTION = OLD.CURRENT.SELECTION
    BRK.NEW.PAGE = OLD.BRK.NEW.PAGE
    NOT.FIRST.PAGE.FLAG = OLD.NOT.FIRST.PAGE.FLAG
    ENQ.TOTAL.PAGES = OLD.ENQ.TOTAL.PAGES
    OFS$ENQ.KEYS = OLD.OFS$ENQ.KEYS
    OFS$ENQ.KEY.COUNT = OLD.OFS$ENQ.KEY.COUNT
    ENQ$FILE.VERSION = OLD.ENQ$FILE.VERSION
    ENQ$SIM.REF = OLD.ENQ$SIM.REF
    ENQ$THIS.FILE.VERSION = OLD.ENQ$THIS.FILE.VERSION

RETURN

*-----------------------------------------------------------------------------
SAVE.TWS.VAR:
*-----------------------------------------------------------------------------

    DIM OLD.C$twsReserved(10)

    OLD.c$isTws = c$isTws
    OLD.c$twsAbsolutePageNo = c$twsAbsolutePageNo
    MAT OLD.C$twsReserved = MAT C$twsReserved

RETURN

*-----------------------------------------------------------------------------
RESET.TWS.VAR:
*-----------------------------------------------------------------------------

    c$isTws = 0
    c$twsAbsolutePageNo = 0
    C$twsReserved(10) = ''

RETURN

*-----------------------------------------------------------------------------
RESTORE.TWS.VAR:
*-----------------------------------------------------------------------------

    c$isTws = OLD.c$isTws
    c$twsAbsolutePageNo = OLD.c$twsAbsolutePageNo
    MAT C$twsReserved = MAT OLD.C$twsReserved

RETURN

*-----------------------------------------------------------------------------
END
