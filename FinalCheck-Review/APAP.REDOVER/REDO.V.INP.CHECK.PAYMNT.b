* @ValidationCode : MjoxNTg2MzM3OTU6Q3AxMjUyOjE2ODI2OTE1MTAxNjQ6SVRTUzotMTotMTo5MTE6MTpmYWxzZTpOL0E6UjIxX0FNUi4wOi0xOi0x
* @ValidationInfo : Timestamp         : 28 Apr 2023 19:48:30
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSS
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : 911
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOVER
SUBROUTINE REDO.V.INP.CHECK.PAYMNT
*--------------------------------------------------------------------------------
*Company   Name    :Asociacion Popular de Ahorros y Prestamos
*Developed By      :BHARATH.C
*Program   Name    :REDO.V.INP.CHECK.PAYMNT
*---------------------------------------------------------------------------------

*DESCRIPTION       : This routine is for Raising Override Message if overpayment is breached
*
*LINKED WITH       : TELLER & FT
* ----------------------------------------------------------------------------------
* 03-JUL-2011       MARIMUTHU S        PACS00082427
*Modification history
*Date                Who               Reference                  Description
*13-04-2023      conversion tool     R22 Auto code conversion     SM TO @SM,FM TO @FM,VM TO @VM
*13-04-2023      Mohanraj R          R22 Manual code conversion   CALL method format modified

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.TELLER
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.ACCOUNT
    $INSERT I_F.OVERRIDE
    $INSERT I_F.AA.BILL.DETAILS
    $INSERT I_F.AA.ACCOUNT.DETAILS
    $USING APAP.TAM
    
*Tus Start
    $INSERT I_F.EB.CONTRACT.BALANCES
*Tus End
    GOSUB INIT
    GOSUB OPENFILE
    GOSUB PROCESS
RETURN

INIT:

    LOC.APPLICATION='TELLER':@FM:'FUNDS.TRANSFER'
    LOC.FIELDS='L.TT.MAX.AMOUNT':@VM:'L.TT.MIN.AMOUNT':@VM:'L.TT.MAX.TIME':@VM:'L.TT.MIN.TIME':@VM:'L.TT.OVRDUE.AMT':@FM:'L.FT.MAX.AMOUNT':@VM:'L.FT.MIN.AMOUNT':@VM:'L.FT.MAX.TIME':@VM:'L.FT.MIN.TIME':@VM:'L.FT.OVRDUE.AMT'
    LOC.POS=''

RETURN
*********************************
OPENFILE:
    FN.ACCOUNT='F.ACCOUNT'
    F.ACCOUNT=''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)

    FN.AA.ARRANGEMENT='F.AA.ARRANGEMENT'
    F.AA.ARRANGEMENT=''
    CALL OPF(FN.AA.ARRANGEMENT,F.AA.ARRANGEMENT)

    FN.AA.BILL.DETAILS = 'F.AA.BILL.DETAILS'
    F.AA.BILL.DETAILS  = ''
    CALL OPF(FN.AA.BILL.DETAILS,F.AA.BILL.DETAILS)

    FN.AA.ACCOUNT.DETAILS = 'F.AA.ACCOUNT.DETAILS'
    F.AA.ACCOUNT.DETAILS  = ''
    CALL OPF(FN.AA.ACCOUNT.DETAILS,F.AA.ACCOUNT.DETAILS)

RETURN
**********************************
PROCESS:
*Getting the Local fields position

    CALL MULTI.GET.LOC.REF(LOC.APPLICATION,LOC.FIELDS,LOC.POS)

    L.TT.MAX.AMOUNT.POS=LOC.POS<1,1>
    L.TT.MIN.AMOUNT.POS=LOC.POS<1,2>
    L.TT.MAX.TIME.POS=LOC.POS<1,3>
    L.TT.MIN.TIME.POS=LOC.POS<1,4>
    L.TT.OVRDUE.AMT.POS=LOC.POS<1,5>
    L.FT.MAX.AMOUNT.POS=LOC.POS<2,1>
    L.FT.MIN.AMOUNT.POS=LOC.POS<2,2>
    L.FT.MAX.TIME.POS=LOC.POS<2,3>
    L.FT.MIN.TIME.POS=LOC.POS<2,4>
    L.FT.OVRDUE.AMT.POS=LOC.POS<2,5>

*Checking for Application
    IF APPLICATION EQ 'TELLER' THEN
        Y.TT.FLAG = '1'
        GOSUB PROCESSTELLER
    END

    IF APPLICATION EQ 'FUNDS.TRANSFER' THEN
        Y.FT.FLAG = '1'
        GOSUB PROCESSFT
    END
RETURN
**************************************
PROCESSTELLER:
*Checking for overpayment

    AMOUNT.LOCAL.1.VAL=R.NEW(TT.TE.AMOUNT.LOCAL.1)
    L.TT.MAX.AMOUNT.VAL=R.NEW(TT.TE.LOCAL.REF)<1,L.TT.MAX.AMOUNT.POS>
    L.TT.MIN.AMOUNT.VAL=R.NEW(TT.TE.LOCAL.REF)<1,L.TT.MIN.AMOUNT.POS>
    L.TT.MAX.TIME.VAL=R.NEW(TT.TE.LOCAL.REF)<1,L.TT.MAX.TIME.POS>
    L.TT.MIN.TIME.VAL=R.NEW(TT.TE.LOCAL.REF)<1,L.TT.MIN.TIME.POS>
    L.TT.OVRDUE.AMT.VAL=R.NEW(TT.TE.LOCAL.REF)<1,L.TT.OVRDUE.AMT.POS>

********FIND THE difference between START.DATE and the value in VALUE.DATE.2

    AA.ACCT.NO=R.NEW(TT.TE.ACCOUNT.2)
    TELLER.VALUE.DATE.2=R.NEW(TT.TE.VALUE.DATE.2)
    SEL.CMD="SELECT ":FN.AA.ARRANGEMENT :" WITH LINKED.APPL.ID EQ ": AA.ACCT.NO
    CALL EB.READLIST(SEL.CMD,SEL.LIST,'',NO.OF.REC,DATA.ERR)
    AA.ARRANGEMENT.ID=SEL.LIST
    CALL F.READ(FN.AA.ARRANGEMENT,AA.ARRANGEMENT.ID,R.AA.ARRANGEMENT,F.AA.ARRANGEMENT,AA.ARRANGEMENT.ERR)
    AA.ARRANGEMENT.START.DATE=R.AA.ARRANGEMENT<AA.ARR.START.DATE>

    CALL EB.NO.OF.MONTHS(AA.ARRANGEMENT.START.DATE,TELLER.VALUE.DATE.2,RETURN.DATE)
**************
    IF AMOUNT.LOCAL.1.VAL GT L.TT.MAX.AMOUNT.VAL AND L.TT.MAX.AMOUNT.VAL NE '' THEN
        TEXT ='TT.MAX.AMT.EXCEEDS'
        AF=TT.TE.LOCAL.REF
        AV=L.TT.MAX.AMOUNT.POS
        CURR.NO=DCOUNT(R.NEW(TT.TE.OVERRIDE),@VM)
        CALL STORE.OVERRIDE(CURR.NO)
    END

    IF AMOUNT.LOCAL.1.VAL LT L.TT.MIN.AMOUNT.VAL THEN
        TEXT ='TT.LT.MIN.AMT'
        AF=TT.TE.LOCAL.REF
        AV=L.TT.MIN.AMOUNT.POS
        CURR.NO=DCOUNT(R.NEW(TT.TE.OVERRIDE),@VM)
        CALL STORE.OVERRIDE(CURR.NO)
    END

    IF RETURN.DATE GT L.TT.MAX.TIME.VAL THEN
        TEXT ='TT.MAX.TIME.EXCEEDS'
        AF=TT.TE.LOCAL.REF
        AV=L.TT.MAX.TIME.POS
        CURR.NO=DCOUNT(R.NEW(TT.TE.OVERRIDE),@VM)
        CALL STORE.OVERRIDE(CURR.NO)
    END
    IF RETURN.DATE LT L.TT.MIN.TIME.VAL THEN
        TEXT = 'TT.LT.MIN.TIME'
        AF=TT.TE.LOCAL.REF
        AV=L.TT.MIN.TIME.POS
        CURR.NO=DCOUNT(R.NEW(TT.TE.OVERRIDE),@VM)
        CALL STORE.OVERRIDE(CURR.NO)
    END

*Checking whether bill settle status is unpaid  * newly added
    CALL F.READ(FN.AA.ACCOUNT.DETAILS,AA.ARRANGEMENT.ID,R.AA.ACCOUNT.DETAILS,F.AA.ACCOUNT.DETAILS,DETAIL1.ERR)
    Y.BILL.ID = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID>
    GOSUB CHECK.VM.BILL

RETURN
**************
CHECK.VM.BILL:
**************
    Y.BILL.VM.COUNT = DCOUNT(Y.BILL.ID,@VM)
    Y.INT.VM = 1
    LOOP
    WHILE Y.INT.VM LE Y.BILL.VM.COUNT
        BILL.ID = Y.BILL.ID<1,Y.INT.VM>
        IF CODE.FLAG EQ '1' THEN
*BREAK
            RETURN
        END
        IF TYPE.FLAG EQ '1' THEN
*BREAK
            RETURN
        END
        GOSUB CHECK.SM.BILL
        Y.INT.VM +=1
    REPEAT
RETURN
**************
CHECK.SM.BILL:
**************
    Y.BILL.ID.COUNT  = DCOUNT(BILL.ID,@SM)
    Y.INT = 1
    LOOP
    WHILE Y.INT LE Y.BILL.ID.COUNT
        NEW.BILL.ID = Y.BILL.ID<1,Y.INT.VM,Y.INT>
* PACS00082427 -S
* GOSUB ACTUAL.PROCESS
* PACS00082427 -E
        IF CODE.FLAG EQ '1' THEN
*BREAK
            RETURN
        END
        IF TYPE.FLAG EQ '1' THEN
*BREAK
            RETURN
        END
        Y.INT +=1
    REPEAT
RETURN
***************
ACTUAL.PROCESS:
***************
    CALL F.READ(FN.AA.BILL.DETAILS,NEW.BILL.ID,R.AA.BILL.DETAILS,F.AA.BILL.DETAILS,BILL.ERR)
    SETTLE.STATUS.VAL = R.AA.BILL.DETAILS<AA.BD.SETTLE.STATUS,1>
    IF Y.TT.FLAG EQ '1' THEN
        IF L.TT.OVRDUE.AMT.VAL EQ 0 THEN
            IF SETTLE.STATUS.VAL EQ 'UNPAID' THEN
                R.NEW(TT.TE.TRANSACTION.CODE)='81'
                CODE.FLAG  = '1'
            END ELSE
                R.NEW(TT.TE.TRANSACTION.CODE)='83'
            END
        END
    END
    IF Y.FT.FLAG EQ '1' THEN
        L.FT.OVRDUE.AMT.VAL=R.NEW(FT.LOCAL.REF)<1,L.FT.OVRDUE.AMT.POS>
        IF L.FT.OVRDUE.AMT.VAL EQ 0 THEN
            IF SETTLE.STATUS.VAL EQ 'UNPAID' THEN
                R.NEW(FT.TRANSACTION.TYPE) = 'ACRP'
                TYPE.FLAG = '1'
            END ELSE
                R.NEW(FT.TRANSACTION.TYPE) = 'ACCR'
            END
        END
    END
RETURN
*********************************
PROCESSFT:

* process for FUNDS.TRANSFER
    DEBIT.ACCT.NO=R.NEW(FT.DEBIT.ACCT.NO)
    CREDIT.AMOUNT=R.NEW(FT.CREDIT.AMOUNT)
    CHARGE.AMT=R.NEW(FT.CHARGE.AMT)
    COMMISSION.AMT=R.NEW(FT.COMMISSION.AMT)
    TAX.AMT=R.NEW(FT.TAX.AMT)

    CALL F.READ(FN.ACCOUNT,DEBIT.ACCT.NO,R.ACCOUNT,F.ACCOUNT,ACCOUNT.ERR)
    R.ECB= '' ; ECB.ERR= '' ;*Tus Start
    CALL EB.READ.HVT("EB.CONTRACT.BALANCES",DEBIT.ACCT.NO,R.ECB,ECB.ERR)
*ONLINE.ACTUAL.BALANCE=R.ACCOUNT<AC.ONLINE.ACTUAL.BAL>
    ONLINE.ACTUAL.BALANCE=R.ECB<ECB.ONLINE.ACTUAL.BAL>;*Tus End
*TOTAL.AMOUNT=CREDIT.AMOUNT+COMMISSION.AMT+TAX.AMT+CHARGE.AMT
    TOTAL.AMOUNT=ONLINE.ACTUAL.BALANCE+COMMISSION.AMT+TAX.AMT+CHARGE.AMT
*IF TOTAL.AMOUNT LT ONLINE.ACTUAL.BALANCE THEN

    IF NUM(DEBIT.ACCT.NO[1,3]) THEN
        IF TOTAL.AMOUNT LT CREDIT.AMOUNT THEN
            ETEXT='FT-INSUFFICIENT.BAL'
            AF=FT.CREDIT.AMOUNT
            CALL STORE.END.ERROR
        END
    END

* Y.ADVANCE.PAYMENT = CREDIT.AMOUNT - R.NEW(FT.LOCAL.REF)<1,L.FT.OVRDUE.AMT.POS>

    Y.ADVANCE.PAYMENT = CREDIT.AMOUNT

    L.FT.MAX.AMOUNT.VAL=R.NEW(FT.LOCAL.REF)<1,L.FT.MAX.AMOUNT.POS>
    IF Y.ADVANCE.PAYMENT GE L.FT.MAX.AMOUNT.VAL AND L.FT.MAX.AMOUNT.VAL NE '' THEN
        TEXT ='TT.MAX.AMT.EXCEEDS'
        CURR.NO=DCOUNT(R.NEW(FT.OVERRIDE),@VM)+1
        CALL STORE.OVERRIDE(CURR.NO)

*   ETEXT='FT-VERIFY.AMOUNT'
*   AF=FT.CREDIT.AMOUNT
*  CALL STORE.END.ERROR
    END

    L.FT.MIN.AMOUNT.VAL = R.NEW(FT.LOCAL.REF)<1,L.FT.MIN.AMOUNT.POS>
    IF Y.ADVANCE.PAYMENT LE L.FT.MIN.AMOUNT.VAL AND Y.ADVANCE.PAYMENT NE 0 THEN
        TEXT ='TT.LT.MIN.AMT'
        CURR.NO=DCOUNT(R.NEW(FT.OVERRIDE),@VM)+1
        CALL STORE.OVERRIDE(CURR.NO)

*        ETEXT='FT-VERIFY.AMOUNT'
*        AF=FT.CREDIT.AMOUNT
*        CALL STORE.END.ERROR
    END

    CREDIT.ACCOUNT=R.NEW(FT.CREDIT.ACCT.NO)
*SEL.CMD="SELECT ":FN.AA.ARRANGEMENT :" WITH LINKED.APPL.ID EQ ": CREDIT.ACCOUNT
*CALL EB.READLIST(SEL.CMD,SEL.LIST,'',NO.OF.REC,DATA.ERR)
    IN.ARR.ID = ''
    OUT.ID    = ''
    ERR.TEXT  = ''
    CALL APAP.TAM.redoConvertAccount(CREDIT.ACCOUNT,IN.ARR.ID,OUT.ID,ERR.TEXT) ;* R22 Manual Conversion - CALL method format modified
    AA.ARRANGEMENT.ID = OUT.ID

** PACS00082427 - S
    CALL F.READ(FN.AA.ARRANGEMENT,AA.ARRANGEMENT.ID,R.AA.ARRANGEMENT,F.AA.ARRANGEMENT,AA.ARR.ERR)
** PACS00082427 - E
    AA.ARRANGEMENT.START.DATE=R.AA.ARRANGEMENT<AA.ARR.START.DATE>
    CREDIT.VALUE.DATE=R.NEW(FT.CREDIT.VALUE.DATE)
    CALL EB.NO.OF.MONTHS(AA.ARRANGEMENT.START.DATE,CREDIT.VALUE.DATE,DIF.CREDIT.VALUE.DATE)

    L.FT.MAX.TIME.VAL=R.NEW(FT.LOCAL.REF)<1,L.FT.MAX.TIME.POS>
    L.FT.MIN.TIME.VAL=R.NEW(FT.LOCAL.REF)<1,L.FT.MIN.TIME.POS>

    IF DIF.CREDIT.VALUE.DATE GT L.FT.MAX.TIME.VAL  THEN
        TEXT ='TT.MAX.TIME.EXCEEDS'
        CURR.NO=DCOUNT(R.NEW(FT.OVERRIDE),@VM)+1
        CALL STORE.OVERRIDE(CURR.NO)

*    ETEXT='FT-VERIFY.AMOUNT'
*    AF=FT.CREDIT.VALUE.DATE
*    CALL STORE.END.ERROR
    END
    IF DIF.CREDIT.VALUE.DATE LT L.FT.MIN.TIME.VAL  THEN
        TEXT = 'TT.LT.MIN.TIME'
        CURR.NO=DCOUNT(R.NEW(FT.OVERRIDE),@VM)+1
        CALL STORE.OVERRIDE(CURR.NO)
*     ETEXT='FT-VERIFY.AMOUNT'
*     AF=FT.CREDIT.VALUE.DATE
*     CALL STORE.END.ERROR
    END

*Checking whether bill settle status is unpaid  * newly added
    CALL F.READ(FN.AA.ACCOUNT.DETAILS,AA.ARRANGEMENT.ID,R.AA.ACCOUNT.DETAILS,F.AA.ACCOUNT.DETAILS,DETAIL1.ERR)
    Y.BILL.ID = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID>
    GOSUB CHECK.VM.BILL

RETURN
*********************************
END
