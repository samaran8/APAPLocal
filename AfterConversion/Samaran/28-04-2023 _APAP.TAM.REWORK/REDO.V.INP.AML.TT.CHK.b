* @ValidationCode : Mjo4NjcwMzg0NTA6Q3AxMjUyOjE2ODI2OTAxMDYxNTY6c2FtYXI6LTE6LTE6MDoxOmZhbHNlOk4vQTpERVZfMjAyMTA4LjA6LTE6LTE=
* @ValidationInfo : Timestamp         : 28 Apr 2023 19:25:06
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : samar
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : DEV_202108.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.TAM
*-----------------------------------------------------------------------------
* <Rating>-222</Rating>
*-----------------------------------------------------------------------------
SUBROUTINE REDO.V.INP.AML.TT.CHK
****************************************************************
*-------------------------------------------------------------------------
* Company Name  : ASOCIACION POPULAR DE AHORROS Y PRESTAMOS
* Developed By  : SUDHARSANAN S & GANESH R
* Program Name  : REDO.V.INP.AML.TT.CHK
* ODR NUMBER    : ODR-2009-10-0472
*-------------------------------------------------------------------------

* Description :This i/p routine is triggered when TELLER transaction is made
* In parameter : None
* out parameter : None
*--------------------------------------------------------------------------------
*
* MODIFICATION HISTORY:
* DATE            WHO            REFERENCE        DESCRIPTION
*
* 08-04-11    SUDHARSANAN S      PACS00033638     Transaction between internal accounts is more than limit value amount then needs to generate the RTE form
* 22-06-11    Prabhu             PACS00061657     Credit card Teller transaction also added in RTE
* 04-11-11    Joaquin Costa
* 20-01-12    Victor Nava                         OFS$DEAL.SLIP.PRINTING variable was moved to PROCESS section to avoid
*                                                 DEAL.SLIP.FORMAT screen empty
* 07-06-12    Victor Nava                         Avoiding AML OVERRIDE for both sides Internal accounts
* 09-04-13    Vignesh Kummar R   PACS00265093     Single Auth already setted in REDO.TELLER.SINGLE.AUTH
* 28-04-13    Vignesh Kumaar R   PACS00310646     AML RTE VALIDATION FOR THE TILL SUSPENSE ACCOUNT
* 08-10-13    Vignesh Kumaar R   PACS00306796     Commented the RTE forms
* 16-12-14    Vignesh Kumaar R   PACS00392651     AA OVERPAYMENT THROUGH CASH/CHEQUE
*----------------------------------------------------------------------------------
*Modification History
*DATE                WHO                         REFERENCE                DESCRIPTION
*19-04-2023       Conversion Tool        R22 Auto Code conversion          No Changes
*19-04-2023       Samaran T               R22 Manual Code Conversion       CALL ROUTINE FORMAT MODIFIED,FM TO @FM,VM TO @VM
*-------------------------------------------------------------------------------------------
*
    $INSERT I_COMMON
    $INSERT I_EQUATE
*
    $INSERT I_TT.COMMON
    $INSERT I_GTS.COMMON
    $INSERT I_DEAL.SLIP.COMMON
    $INSERT I_RC.COMMON
*
    $INSERT I_F.TELLER
    $INSERT I_F.TELLER.PARAMETER
    $INSERT I_F.TRANSACTION
    $INSERT I_F.CURRENCY
    $INSERT I_F.ACCOUNT
    $INSERT I_F.CUSTOMER
    $INSERT I_F.CUSTOMER.ACCOUNT
    $INSERT I_F.STMT.ENTRY
    $INSERT I_F.DEAL.SLIP.FORMAT
    $INSERT I_F.OVERRIDE
    $INSERT I_F.TELLER.TRANSACTION
    $INSERT I_F.VERSION
*
    $INSERT I_F.T24.FUND.SERVICES
    $INSERT I_F.REDO.MULTITXN.PARAMETER
    $INSERT I_F.REDO.CREDIT.TRANS.TELLER
    $INSERT I_F.REDO.AML.PARAM
    $INSERT I_F.REDO.AA.OVERPAYMENT ;*
*
    GOSUB INITIALISE
    GOSUB OPEN.FILES
    GOSUB CHECK.PRELIM.CONDITIONS

    IF PROCESS.GOAHEAD THEN
        GOSUB PROCESS
    END
*
RETURN
* ======
PROCESS:
* ======
*
    GOSUB GET.CUSTOMER.ID
    GOSUB GET.TRANSACTION.AMOUNT
*
    GOSUB GET.TODAY.CREDIT.TXN.AMOUNT
    GOSUB GET.OVERPYMT.AMOUNT
*
*  PACS00033638 - S
*
    GOSUB GET.TODAY.TXN.AMOUNT
*
*  PACS00033638 - E
*
    TOT.TODAY.TXN.AMT = TOT.CREDIT.CARD.TXN.AMT + TOT.TODAY.TXN.AMT + Y.GET.OVER.PAY.AMT
*
    IF TOT.TODAY.TXN.AMT GE Y.AMT.LIMIT.LCY THEN
*
        Y.INITIAL.ID = R.NEW(TT.TE.LOCAL.REF)<1,POS.IN.ID>
        IF Y.INITIAL.ID[1,2] NE 'FT' THEN
            TEXT    = VAR.OVERRIDE.ID
            CALL STORE.OVERRIDE(CURR.NO+1)

            GOSUB ANALISE.OVERRIDE.MESSAGE

* Commented as RTE form will be produced in the REDO.GET.SPOOL enquiry itself
*
*            IF VAR.RTE.CHK EQ 'YES' AND R.VERSION(EB.VER.VERSION.TYPE) NE 'NV' THEN
*                OFS$DEAL.SLIP.PRINTING = 1
*                CALL PRODUCE.DEAL.SLIP('AML.TT.RTE.FORM')
*                GOSUB GET.HOLD.ID
*                CALL APAP.REDOVER.REDO.V.AUT.RTE.REPRINT(Y.HID)    ;*R22 MANUAL CODE CONVERSION
*                PRT.ADVICED.PRODUCED = ""
*            END
* End of Fix

        END
    END
*
*
RETURN
* ==============

* ==============
GET.CUSTOMER.ID:
* ==============
*
    TT.ACCT.NO = R.NEW(TT.TE.ACCOUNT.2)
    IF PGM.VERSION EQ ',REDO.OVERPYMT.CASH' THEN
        TT.ACCT.NO = R.NEW(TT.TE.NARRATIVE.1)<1,1>
    END
*
    CALL F.READ(FN.ACCOUNT,TT.ACCT.NO,R.ACCOUNT,F.ACCOUNT,ACC.ERR)
    CUS.ACC.ID = R.ACCOUNT<AC.CUSTOMER>
    IF CUS.ACC.ID THEN
        Y.CUSTOMER.CODE = CUS.ACC.ID
    END ELSE
        Y.CUSTOMER.CODE = R.NEW(TT.TE.LOCAL.REF)<1,POS.CUSTOMER.CODE>
        IF Y.CUSTOMER.CODE THEN
            CUS.ACC.ID = Y.CUSTOMER.CODE
        END
    END
*
RETURN
*
* =====================
GET.TRANSACTION.AMOUNT:
* =====================
*
    TT.TXN.CCY = R.NEW(TT.TE.CURRENCY.1)
*
    IF TT.TXN.CCY EQ LCCY THEN
        TT.TXN.AMT = R.NEW(TT.TE.AMOUNT.LOCAL.1)
    END ELSE
        TT.TXN.AMT = R.NEW(TT.TE.AMOUNT.FCY.1)
    END
*
    TOT.TXN.AMT = TT.TXN.AMT
    TT.LCCY     = LCCY
    IF TT.TXN.CCY NE TT.LCCY THEN
        CALL CACHE.READ(FN.CURRENCY,TT.TXN.CCY,R.CURRENCY,CURR.ERR)
        CUR.AMLBUY.RATE = R.CURRENCY<EB.CUR.LOCAL.REF,POS.L.CU.AMLBUY.RT>
        TOT.TXN.AMT     = TT.TXN.AMT * CUR.AMLBUY.RATE
    END
*
RETURN
*
* ==========================
GET.TODAY.CREDIT.TXN.AMOUNT:
* ==========================
*
    TOT.CREDIT.CARD.TXN.AMT = 0
*
    IF Y.CUSTOMER.CODE THEN
        Y.CUSTOMER.CODE         = Y.CUSTOMER.CODE : '.' :TODAY
*
        CALL F.READ(FN.REDO.CREDIT.TRANS.TELLER,Y.CUSTOMER.CODE,R.REDO.CREDIT.TRANS.TELLER,F.REDO.CREDIT.TRANS.TELLER,TILL.ERR)
        IF R.REDO.CREDIT.TRANS.TELLER THEN
            GOSUB GET.TOTAL.CREDIT.TXN.AMOUNT
        END
    END
*
RETURN
*
* ===================
GET.TODAY.TXN.AMOUNT:
* ===================
*
    IF CUS.ACC.ID THEN
        GOSUB GET.CUST.ACCT.TODAY.TXN.AMOUNT
    END ELSE
        GOSUB GET.INT.ACC.TODAY.TXN.AMOUNT
    END
*
RETURN
*
* ==========================
GET.TOTAL.CREDIT.TXN.AMOUNT:
* ==========================
*
    Y.TELLER.ID.LIST = R.REDO.CREDIT.TRANS.TELLER<CT.TRANSACTION.ID>
    CHANGE @VM TO @FM IN Y.TELLER.ID.LIST
    Y.ID.CNT      = DCOUNT(Y.TELLER.ID.LIST,@FM)
    Y.ID.LOOP.CNT = 1
    Y.LCCY.AMT    = 0
*
    LOOP
    WHILE Y.ID.LOOP.CNT LE Y.ID.CNT
        CALL F.READ(FN.TELLER,Y.TELLER.ID.LIST<Y.ID.LOOP.CNT>,R.TELLER,F.TELLER,ERR)
        TOT.CREDIT.CARD.TXN.AMT += R.TELLER<TT.TE.AMOUNT.LOCAL.1>
        Y.ID.LOOP.CNT++
    REPEAT
*
RETURN
*
* =============================
GET.CUST.ACCT.TODAY.TXN.AMOUNT:
* =============================
*
    CALL F.READ(FN.CUSTOMER.ACCOUNT,CUS.ACC.ID,R.CUSTOMER.ACCOUNT,F.CUSTOMER.ACCOUNT,CUS.ACC.ERR)
*
    LOOP
        REMOVE Y.ACC.ID FROM R.CUSTOMER.ACCOUNT SETTING Y.POS
    WHILE Y.ACC.ID:Y.POS
        CALL F.READ(FN.ACCT.ENT.TODAY,Y.ACC.ID,R.ACCT.ENT.TODAY,F.ACCT.ENT.TODAY,ACCT.ENT.ERR)
        CALL F.READ(FN.ACCOUNT,Y.ACC.ID,R.ACCOUNT,F.ACCOUNT,ACC.ERR)
        GOSUB GET.AMLBUY.RATE     ;* 2012MAY24 - Code Review
        LOOP
            REMOVE Y.STMT.ENTRY FROM R.ACCT.ENT.TODAY SETTING Y.STMT.POS
        WHILE Y.STMT.ENTRY:Y.STMT.POS
            CALL F.READ(FN.STMT.ENTRY,Y.STMT.ENTRY,R.STMT.ENTRY,F.STMT.ENTRY,STMT.ERR)
            IF R.STMT.ENTRY EQ '' THEN
                CALL F.READ(FN.STMT.ENTRY.DETAIL,Y.STMT.ENTRY,R.STMT.ENTRY,F.STMT.ENTRY.DETAIL,STMT.ERR)
            END
            STMT.TXN.CODE = R.STMT.ENTRY<AC.STE.TRANSACTION.CODE>
            STMT.VAL.DATE = R.STMT.ENTRY<AC.STE.VALUE.DATE>
            IF STMT.VAL.DATE EQ TODAY THEN
                R.TRANSACTION = ''; TRANS.ERR = '' ; WTR.AML.CHECK = ''
                GOSUB VALIDATE.AML.CHECK        ;* 2012MAY24 - Code Review
            END
        REPEAT
    REPEAT
*
    TOT.TODAY.TXN.AMT = ABS(TOT.TODAY.TXN.AMT)
    TOT.TODAY.TXN.AMT = TOT.TXN.AMT + TOT.TODAY.TXN.AMT
*
RETURN
*
*------------------*
GET.OVERPYMT.AMOUNT:
*------------------*
* Fix for PACS00392651 [AA OVERPAYMENT THROUGH CASH/CHEQUE]

    Y.GET.OVER.PAY.AMT = 0
    SEL.CMD.OVER = ''
    SEL.LIST.OVER = ''

    SEL.CMD.OVER = 'SELECT ':FN.REDO.AA.OVERPAYMENT:' WITH @ID LIKE ':CUS.ACC.ID:'.':TODAY:'... AND PAYMENT.METHOD EQ CASH AND STATUS NE REVERSADO'
    CALL EB.READLIST(SEL.CMD.OVER,SEL.LIST.OVER,'','',SEL.ERR)
    LOOP
        REMOVE OVER.ID FROM SEL.LIST.OVER SETTING OVER.POS
    WHILE OVER.ID:OVER.POS
        CALL F.READ(FN.REDO.AA.OVERPAYMENT,OVER.ID,R.REDO.AA.OVERPAYMENT,F.REDO.AA.OVERPAYMENT,REDO.AA.OVERPAYMENT.ERR)
        Y.GET.OVER.PAY.AMT += R.REDO.AA.OVERPAYMENT<REDO.OVER.AMOUNT>

    REPEAT

*    IF PGM.VERSION EQ ',REDO.OVERPYMT.CASH' THEN
*        Y.GET.OVER.PAY.AMT += R.NEW(TT.TE.AMOUNT.LOCAL.1)
*    END

RETURN

* =================
VALIDATE.AML.CHECK:
* =================
*
    CALL CACHE.READ(FN.TRANSACTION,STMT.TXN.CODE,R.TRANSACTION,TRANS.ERR)
    WTR.AML.CHECK = R.TRANSACTION<AC.TRA.LOCAL.REF><1,POS.L.TR.AML.CHECK>
*
    IF WTR.AML.CHECK EQ 'Y' THEN
*
        IF WACCT.CCY EQ TT.LCCY THEN
            TOT.TODAY.TXN.AMT += R.STMT.ENTRY<AC.STE.AMOUNT.LCY>
        END ELSE
            TOT.TODAY.TXN.AMT += R.STMT.ENTRY<AC.STE.AMOUNT.FCY> * CUR.AMLBUY.RATE
        END

    END ELSE
        GET.TFS.ID = R.STMT.ENTRY<AC.STE.THEIR.REFERENCE>
        GOSUB GET.TFS.TOTAL
    END
*
RETURN
*-----------------------------------------------------------------------------------------------------------------------
GET.TFS.TOTAL:
*-----------------------------------------------------------------------------------------------------------------------

    IF GET.TFS.ID[1,5] EQ 'T24FS' THEN
        CALL F.READ(FN.T24.FUND.SERVICES,GET.TFS.ID,R.T24.FUND.SERVICES,F.T24.FUND.SERVICES,TFS.ERR)

        LOCATE GET.TFS.ID IN Y.TFS.LIST SETTING POS THEN
            RETURN
        END
        Y.TFS.LIST <-1> = GET.TFS.ID
        Y.TFS.TXN.CODES = R.T24.FUND.SERVICES<TFS.TRANSACTION>
        Y.TFS.TXN.COUNT = DCOUNT(Y.TFS.TXN.CODES,@VM)
        Y.TFS.COUNT = 1

        LOOP
        WHILE Y.TFS.COUNT LE Y.TFS.TXN.COUNT
            TFS.TRANSACTION.ID = Y.TFS.TXN.CODES<1,Y.TFS.COUNT>

            IF TFS.TRANSACTION.ID EQ 'CASHDEPD' THEN

                TOT.TODAY.TXN.AMT += R.T24.FUND.SERVICES<TFS.AMOUNT,Y.TFS.COUNT>

            END
            Y.TFS.COUNT++
        REPEAT
    END
RETURN

* ==============
GET.AMLBUY.RATE:
* ==============
*
    WACCT.CCY = R.ACCOUNT<AC.CURRENCY>
    CALL CACHE.READ(FN.CURRENCY,WACCT.CCY,R.CURRENCY,CURR.ERR)
    CUR.AMLBUY.RATE = R.CURRENCY<EB.CUR.LOCAL.REF,POS.L.CU.AMLBUY.RT>
*
RETURN
*
* ===========================
GET.INT.ACC.TODAY.TXN.AMOUNT:
* ===========================
*
    VAR.CATEGORY = TT.ACCT.NO[4,5]
    CALL CACHE.READ(FN.TELLER.PARAMETER,ID.COMPANY,R.TELLER.PARAMETER,TELL.PARA.ERR)
    VAR.TRAN.CAT = R.TELLER.PARAMETER<TT.PAR.TRAN.CATEGORY>
    CHANGE @VM TO @FM IN VAR.TRAN.CAT

* Fix for PACS00310646 [AML RTE VALIDATION FOR THE TILL SUSPENSE ACCOUNT]

    FN.REDO.MULTITXN.PARAMETER = 'F.REDO.MULTITXN.PARAMETER'
    F.REDO.MULTITXN.PARAMETER = ''
    CALL OPF(FN.REDO.MULTITXN.PARAMETER,F.REDO.MULTITXN.PARAMETER)
*  CALL F.READ(FN.REDO.MULTITXN.PARAMETER,'SYSTEM',R.REDO.MULTITXN.PARAMETER,F.REDO.MULTITXN.PARAMETER,IN.ERR) ;*Tus Start
    CALL CACHE.READ(FN.REDO.MULTITXN.PARAMETER,'SYSTEM',R.REDO.MULTITXN.PARAMETER,IN.ERR) ; * Tus End
    GET.SUSP.CATEG = R.REDO.MULTITXN.PARAMETER<RMP.NEW.CATEG,1,1>
    VAR.TRAN.CAT<-1> = GET.SUSP.CATEG

* End of Fix

    LOCATE VAR.CATEGORY IN VAR.TRAN.CAT SETTING POS.CAT THEN
        TOT.TODAY.TXN.AMT = TOT.TXN.AMT
    END ELSE
        VAR.CATEGORY1 = R.NEW(TT.TE.ACCOUNT.1)
        VAR.CATEGORY1 = VAR.CATEGORY1[4,5]
        LOCATE VAR.CATEGORY1 IN VAR.TRAN.CAT SETTING POS.CAT1 THEN
            TOT.TODAY.TXN.AMT = TOT.TXN.AMT
        END
    END
*
RETURN
*
* =======================
ANALISE.OVERRIDE.MESSAGE:
* =======================
*
*  Checking for Overrides
*
    CALL F.READ(FN.OVERRIDE,VAR.OVERRIDE.ID,R.OVERRIDE,F.OVERRIDE,ERR.MSG)
*
* Getting the Override Message
*
    VAR.MESSAGE1 = R.OVERRIDE<EB.OR.MESSAGE,1,2>
    VAR.MESSAGE2 = 'YES'
*
*  Getting the Override Message Values
*
    VAR.OFS.OVERRIDE1 = OFS$OVERRIDES<1>
    VAR.OFS.OVERRIDE2 = OFS$OVERRIDES<2>
*
*  Converting to FM for locate Purpose
*
    CHANGE @VM TO @FM IN VAR.OFS.OVERRIDE1
    CHANGE @VM TO @FM IN VAR.OFS.OVERRIDE2
*
*  Checking FOR the override MESSAGE
*
    VAR.RTE.CHK = ""
*
    LOCATE VAR.MESSAGE1 IN VAR.OFS.OVERRIDE1 SETTING POS1 THEN
        R.NEW(TT.TE.LOCAL.REF)<1,POS.L.RTE.FORM> = 'YES'
    END ELSE
        POS1 = ''
    END
*
    LOCATE VAR.MESSAGE2 IN VAR.OFS.OVERRIDE2 SETTING POS2 THEN
        VAR.RTE.CHK = R.NEW(TT.TE.LOCAL.REF)<1,POS.L.RTE.FORM>
    END
*
RETURN
*
* ================
CONFIRM.AML.CHECK:
* ================
*
    PROCESS.GOAHEAD = ""
    Y.TT.TXN.CODE1  = R.TELLER.TRASACTION<TT.TR.TRANSACTION.CODE.1>
    Y.TT.TXN.CODE2  = R.TELLER.TRASACTION<TT.TR.TRANSACTION.CODE.2>
    WTR.AML.CHECK   = ''
*
    CALL CACHE.READ(FN.TRANSACTION,Y.TT.TXN.CODE1,R.TRANSACTION,TRANS.ERR)
    WTR.AML.CHECK = R.TRANSACTION<AC.TRA.LOCAL.REF><1,POS.L.TR.AML.CHECK>
    IF WTR.AML.CHECK EQ 'Y' THEN
        PROCESS.GOAHEAD = "1"
    END ELSE
        CALL CACHE.READ(FN.TRANSACTION,Y.TT.TXN.CODE2,R.TRANSACTION,TRANS.ERR)
        WTR.AML.CHECK = R.TRANSACTION<AC.TRA.LOCAL.REF><1,POS.L.TR.AML.CHECK>
        IF WTR.AML.CHECK EQ 'Y' THEN
            PROCESS.GOAHEAD = "1"
        END
    END
*
    IF ALPHA(W.ACCT1[1,3]) AND ALPHA(W.ACCT2[1,3]) AND WTR.AML.CHECK EQ "" THEN
        PROCESS.GOAHEAD = ""
    END
*
RETURN
*
* ==============
RAISE.OVE.ZEROA:
* ==============
*
    Y.REC.STAT = R.NEW(TT.TE.RECORD.STATUS)
    IF Y.REC.STAT EQ "" THEN
        VAR.NO.OF.AUTH = R.VERSION(EB.VER.NO.OF.AUTH)
        IF VAR.NO.OF.AUTH EQ '0' THEN
            TEXT    = 'TT.AUT.REVERSAL'
            CALL STORE.OVERRIDE(CURR.NO)
        END
*
    END
*
RETURN
*
* ==========
GET.HOLD.ID:
* ==========
    Y.HID = C$LAST.HOLD.ID
*
RETURN
*
* =========
INITIALISE:
* =========
*
    PROCESS.GOAHEAD        = 1
* VNL - 2012JAN20 S/E    OFS$DEAL.SLIP.PRINTING = 1
*    V$FUNCTION             = "I"
    Y.PARAM.ID             = "SYSTEM"
    VAR.OVERRIDE.ID        = 'AML.TXN.AMT.EXCEED'
    SAVE.APPLICATION       = APPLICATION
*

    LRF.APP   = 'TRANSACTION' : @FM : 'CURRENCY' : @FM : 'TELLER'
    LRF.FIELD = 'L.TR.AML.CHECK' : @FM : 'L.CU.AMLBUY.RT' : @FM : 'L.RTE.FORM' : @VM :'L.TT.CLIENT.COD' : @VM : 'L.INITIAL.ID':@VM:'L.ACT.INT':@VM:'L.NATIONALITY': @VM : 'L.PEP.INTERM' : @VM :'L.TYPE.PEP.INT'
    LRF.POS   = ''
    CALL MULTI.GET.LOC.REF(LRF.APP,LRF.FIELD,LRF.POS)
    POS.L.TR.AML.CHECK = LRF.POS<1,1>
    POS.L.CU.AMLBUY.RT = LRF.POS<2,1>
    POS.L.RTE.FORM     = LRF.POS<3,1>
    POS.CUSTOMER.CODE  = LRF.POS<3,2>
    POS.IN.ID  = LRF.POS<3,3>
    POS.TT.INT = LRF.POS<3,4>
    POS.TT.NAT = LRF.POS<3,5>
    POS.TT.INTERM = LRF.POS<3,6>
    POS.TT.TYPE = LRF.POS<3,7>
*
    TOT.TODAY.TXN.AMT = ''
    CURR.NO = DCOUNT(R.NEW(TT.TE.OVERRIDE),@VM)      ;* Code Review - 20120820
*
    W.ACCT1 = R.NEW(TT.TE.ACCOUNT.1)
    W.ACCT2 = R.NEW(TT.TE.ACCOUNT.2)
*
    FN.ACCOUNT = 'F.ACCOUNT'
    F.ACCOUNT  = ''
*
    FN.CUSTOMER.ACCOUNT = 'F.CUSTOMER.ACCOUNT'
    F.CUSTOMER.ACCOUNT  = ''
*
    FN.TRANSACTION = 'F.TRANSACTION'
    F.TRANSACTION  = ''
*
    FN.CURRENCY = 'F.CURRENCY'
    F.CURRENCY  = ''
*
    FN.ACCT.ENT.TODAY = 'F.ACCT.ENT.TODAY'
    F.ACCT.ENT.TODAY  = ''
*
    FN.STMT.ENTRY = 'F.STMT.ENTRY'
    F.STMT.ENTRY  = ''
*
    FN.TELLER.PARAMETER = 'F.TELLER.PARAMETER'
    F.TELLER.PARAMETER  = ''
*
    FN.TELLER = 'F.TELLER'
    F.TELLER  = ''
*
    FN.STMT.ENTRY.DETAIL = 'F.STMT.ENTRY.DETAIL'
    F.STMT.ENTRY.DETAIL  = ''
*
    FN.REDO.AML.PARAM = 'F.REDO.AML.PARAM'
    F.REDO.AML.PARAM  = ''
*
    FN.OVERRIDE = 'F.OVERRIDE'
    F.OVERRIDE  = ''
*
    FN.TELLER.TRANSACTION = 'F.TELLER.TRANSACTION'
    F.TELLER.TRANSACTION  = ''
*
    FN.REDO.CREDIT.TRANS.TELLER = 'F.REDO.CREDIT.TRANS.TELLER'
    F.REDO.CREDIT.TRANS.TELLER  = ''
*** Add by CODE REVIEW
    TILL.ERR = ''
***
    FN.T24.FUND.SERVICES = 'F.T24.FUND.SERVICES'
    F.T24.FUND.SERVICES = ''
    CALL OPF(FN.T24.FUND.SERVICES,F.T24.FUND.SERVICES)

    FN.REDO.AA.OVERPAYMENT = 'F.REDO.AA.OVERPAYMENT'
    F.REDO.AA.OVERPAYMENT = ''
    CALL OPF(FN.REDO.AA.OVERPAYMENT,F.REDO.AA.OVERPAYMENT)

RETURN
*
* =========
OPEN.FILES:
* =========
*
    CALL OPF(FN.REDO.CREDIT.TRANS.TELLER,F.REDO.CREDIT.TRANS.TELLER)
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)
*
RETURN
*
* ======================
CHECK.PRELIM.CONDITIONS:
* ======================
*
    LOOP.CNT  = 1
    MAX.LOOPS = 3
*
    LOOP WHILE LOOP.CNT LE MAX.LOOPS AND PROCESS.GOAHEAD
        BEGIN CASE

            CASE LOOP.CNT EQ 1
                IF V$FUNCTION EQ "R" THEN
*                GOSUB RAISE.OVE.ZEROA ;* Fix for PACS00265093 [Single Auth already setted in REDO.TELLER.SINGLE.AUTH]
                    PROCESS.GOAHEAD = ""
                END
*
            CASE LOOP.CNT EQ 2
                TT.TXN.CODE = R.NEW(TT.TE.TRANSACTION.CODE)
                CALL CACHE.READ(FN.TELLER.TRANSACTION,TT.TXN.CODE,R.TELLER.TRASACTION,TELLER.TRANS.ERR)
                GOSUB CONFIRM.AML.CHECK
*
            CASE LOOP.CNT EQ 3
                CALL CACHE.READ(FN.REDO.AML.PARAM,Y.PARAM.ID,R.AML.PARAM,AML.ERR)
                Y.AMT.LIMIT.LCY = R.AML.PARAM<AML.PARAM.AMT.LIMIT.LCY>
*
        END CASE
*
        LOOP.CNT += 1
    REPEAT
*
RETURN
*
END
