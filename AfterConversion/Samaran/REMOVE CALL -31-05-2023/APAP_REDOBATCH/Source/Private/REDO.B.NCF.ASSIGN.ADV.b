* @ValidationCode : MjotMzA3NDY1MjgwOkNwMTI1MjoxNjg0ODU0MzkzNTc3OklUU1M6LTE6LTE6MTA1ODoxOmZhbHNlOk4vQTpSMjFfQU1SLjA6LTE6LTE=
* @ValidationInfo : Timestamp         : 23 May 2023 20:36:33
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSS
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : 1058
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOBATCH
SUBROUTINE REDO.B.NCF.ASSIGN.ADV(VAR.ARRANGE.ID)
*-----------------------------------------------------------------------------
*DESCRIPTION:
*------------
*This Routine will generate NCF for the remaining amount in advance payment
* Input/Output:
*--------------
* IN  : VAR.ARRANGE.ID
* OUT : -NA-
*
* Dependencies:
*---------------
* CALLS : -NA-
* CALLED BY : -NA-
*
* Revision History:
*------------------
*   Date               who           Reference            Description
* 25-MAR-2010        Prabhu.N       ODR-2009-10-0321     Initial Creation
* Date                   who                   Reference              
* 12-04-2023         CONVERSTION TOOL     R22 AUTO CONVERSTION - FM TO @FM AND VM TO @VM 
* 12-04-2023          ANIL KUMAR B        R22 MANUAL CONVERSTION -NO CHANGES
*--------------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.AA.SCHEDULED.ACTIVITY
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.TELLER
    $INSERT I_F.AA.ACCOUNT.DETAILS
    $INSERT I_F.AA.BILL.DETAILS
    $INSERT I_F.REDO.NCF.ISSUED
    $INSERT I_F.REDO.L.NCF.UNMAPPED
    $INSERT I_F.REDO.L.NCF.STATUS
    $INSERT I_F.REDO.L.NCF.STOCK
    $INSERT I_F.REDO.AA.REPAY
    $INSERT I_REDO.B.NCF.ASSIGN.ADV.COMMON
    GOSUB INIT
RETURN
*----
INIT:
*----
    CALL F.READ(FN.REDO.AA.REPAY,VAR.ARRANGE.ID,R.REDO.AA.REPAY,F.REDO.AA.REPAY,REP.ERR)
    VAR.CUSTOMER  =R.REDO.AA.REPAY<AA.RP.CUSTOMER>
    VAR.ACCOUNT   =R.REDO.AA.REPAY<AA.RP.ACCOUNT>
    VAR.TXN.ID    =R.REDO.AA.REPAY<AA.RP.TXN.ID>
    IF R.REDO.AA.REPAY NE '' THEN
        GOSUB PROCESS
        GOSUB ASSIGN.NCF
        CALL F.RELEASE(FN.REDO.L.NCF.STOCK,'SYSTEM',F.REDO.L.NCF.STOCK)
    END
RETURN
*-------
PROCESS:
*-------
    CALL F.READ(FN.AA.ACCOUNT.DETAILS,VAR.ARRANGE.ID,R.AA.ACCOUNT.DETAILS,F.AA.ACCOUNT.DETAILS,ERR)
    VAR.SET.STATUS.LIST=R.AA.ACCOUNT.DETAILS<AA.AD.SET.STATUS>
    VAR.BILL.ID.ARRAY=R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID>
    CHANGE @VM TO @FM IN VAR.SET.STATUS.LIST
    CHANGE @VM TO @FM IN VAR.BILL.ID.ARRAY
    VAR.BILL.ID.ARRAY.SIZE=DCOUNT(VAR.BILL.ID.ARRAY,@FM)
    VAR.BILL.ID=VAR.BILL.ID.ARRAY<VAR.BILL.ID.ARRAY.SIZE>
    LOOP
        REMOVE VAR.SET.STATUS FROM VAR.SET.STATUS.LIST SETTING POS
        REMOVE VAR.BILL.ID FROM VAR.BILL.ID.ARRAY SETTING BILL.POS
    WHILE VAR.SET.STATUS:POS
        IF   VAR.SET.STATUS EQ 'UNPAID' THEN
            VAR.BILL.LIST<-1>=VAR.BILL.ID
        END
    REPEAT
    IF VAR.BILL.LIST NE '' THEN
        LOOP
            REMOVE VAR.BILL.ID FROM VAR.BILL.LIST SETTING BILL.POS
        WHILE  VAR.BILL.ID:BILL.POS
            GOSUB BILL.PROCESS
        REPEAT
    END
RETURN
*------------
BILL.PROCESS:
*------------
    CALL F.READ(FN.AA.BILL.DETAILS,VAR.BILL.ID,R.AA.BILL.DETAILS,F.AA.BILL.DETAILS,ERR)
    VAR.OS.TOT.PROP.AMOUNT= SUM(R.AA.BILL.DETAILS<AA.BD.OS.PROP.AMOUNT>)
    Y.PROPRTY.ARRAY=R.AA.BILL.DETAILS<AA.BD.PROPERTY>
    Y.OS.PROP.AMT.ARRAY=R.AA.BILL.DETAILS<AA.BD.OS.PROP.AMOUNT>
    Y.PROPERTY.ARRAY=CHANGE(Y.PROPRTY.ARRAY,@VM,@FM)
    Y.OS.PROP.AMT.ARRAY=CHANGE(Y.OS.PROP.AMT.ARRAY,@VM,@FM)
    Y.OS.PROP.AMT.TOT += VAR.OS.TOT.PROP.AMOUNT
    VAR.CNT = 1
    CNT.PROP = DCOUNT(Y.PROPERTY.ARRAY,@FM)
    LOOP
    WHILE VAR.CNT LE CNT.PROP
        Y.PROPERTY = Y.PROPERTY.ARRAY<VAR.CNT>
        Y.OS.PROP.AMT = Y.OS.PROP.AMT.ARRAY<VAR.CNT>
        IF Y.PROPERTY EQ 'PRINCIPALINT' THEN
            Y.OS.PROP.AMT.INT += Y.OS.PROP.AMT
            VAR.CNT = CNT.PROP+1
        END
        VAR.CNT += 1
    REPEAT
    GOSUB GET.NCF
RETURN
*--------
GET.NCF:
*--------
    CALL F.READU(FN.REDO.L.NCF.STOCK,'SYSTEM',R.NCF.STOCK,F.REDO.L.NCF.STOCK,ST.ERR,'')

    IF R.NCF.STOCK<ST.QTY.AVAIL.ORG> GT '0' THEN
        R.NCF.ISSUED<ST.IS.NCF>=R.NCF.STOCK<ST.SERIES>:R.NCF.STOCK<ST.BUSINESS.DIV>:R.NCF.STOCK<ST.PECF>:R.NCF.STOCK<ST.AICF>:R.NCF.STOCK<ST.TCF>:R.NCF.STOCK<ST.SEQUENCE.NO>
        VAR.PREV.RANGE=R.NCF.STOCK<ST.PRE.ED.RG.OR>
        VAR.PREV.RANGE=VAR.PREV.RANGE<1,DCOUNT(VAR.PREV.RANGE,@VM)>
        IF R.NCF.STOCK<ST.SEQUENCE.NO> EQ VAR.PREV.RANGE THEN
            R.NCF.STOCK<ST.SEQUENCE.NO>=R.NCF.STOCK<ST.L.STRT.RNGE.ORG>
        END
        ELSE
            R.NCF.STOCK<ST.SEQUENCE.NO>=R.NCF.STOCK<ST.SEQUENCE.NO>+1
        END
        R.NCF.STOCK<ST.NCF.ISSUED.ORG>=R.NCF.STOCK<ST.NCF.ISSUED.ORG>+1
        R.NCF.STOCK<ST.QTY.AVAIL.ORG>=R.NCF.STOCK<ST.QTY.AVAIL.ORG>-1
        IF  R.NCF.STOCK<ST.QTY.AVAIL.ORG> GE R.NCF.STOCK<ST.L.MIN.NCF.ORG>  THEN
            R.NCF.STOCK<ST.NCF.STATUS.ORG>='AVAILABLE'
        END
        ELSE
            R.NCF.STOCK<ST.NCF.STATUS.ORG>='UNAVAILABLE'
        END
    END
RETURN
*-----------
ASSIGN.NCF:
*------------

    R.NCF.ISSUED<ST.IS.TXN.ID>=VAR.TXN.ID
    R.NCF.ISSUED<ST.IS.CHARGE.AMOUNT>=Y.OS.PROP.AMT.INT
    R.NCF.ISSUED<ST.IS.DATE>=TODAY
    R.NCF.ISSUED<ST.IS.CUSTOMER>=VAR.CUSTOMER
    R.NCF.ISSUED<ST.IS.ACCOUNT> =VAR.ACCOUNT
    R.NCF.STATUS<NCF.ST.TRANSACTION.ID>=VAR.ARRANGE.ID
    R.NCF.STATUS<NCF.ST.STATUS>='AVAILABLE'
    R.NCF.STATUS<NCF.ST.DATE>  =TODAY
    R.NCF.STATUS<NCF.ST.CHARGE.AMOUNT> =Y.OS.PROP.AMT.INT
    R.NCF.UNMAPPED<ST.UN.CHARGE.AMOUNT>=Y.OS.PROP.AMT.INT
    R.NCF.UNMAPPED<ST.UN.TXN.ID>=VAR.TXN.ID
    R.NCF.UNMAPPED<ST.UN.BATCH> ='YES'
    VAR.REMAIN.AMT=R.REDO.AA.REPAY<AA.RP.AMOUNT>-Y.OS.PROP.AMT.TOT
    R.NCF.ID=VAR.ACCOUNT:'.':TODAY:'.':VAR.TXN.ID
    GOSUB WRITE.NCF
RETURN
*---------
WRITE.NCF:
*---------
    IF R.NCF.STOCK<ST.QTY.AVAIL.ORG>  GT '0' THEN
        CALL F.WRITE(FN.REDO.NCF.ISSUED,R.NCF.ID,R.NCF.ISSUED)
    END
    ELSE
        CALL F.WRITE(FN.REDO.L.NCF.UNMAPPED,R.NCF.ID,R.NCF.UNMAPPED)
    END
    IF R.NCF.STOCK THEN
        CALL F.WRITE(FN.REDO.L.NCF.STOCK,'SYSTEM',R.NCF.STOCK)
    END
    CALL F.WRITE(FN.REDO.L.NCF.STATUS,R.NCF.ID,R.NCF.STATUS)
    IF VAR.REMAIN.AMT LE '0' THEN
        CALL F.DELETE(FN.REDO.AA.REPAY,VAR.ARRANGE.ID)
    END
    ELSE
        R.REDO.AA.REPAY<AA.RP.AMOUNT>=VAR.REMAIN.AMT
        CALL  F.WRITE(FN.REDO.AA.REPAY,VAR.ARRANGE.ID,R.REDO.AA.REPAY)
    END
RETURN
END
