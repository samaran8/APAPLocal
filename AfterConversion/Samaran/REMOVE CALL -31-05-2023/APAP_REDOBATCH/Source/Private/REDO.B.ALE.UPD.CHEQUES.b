* @ValidationCode : MjotMTg5MjI2NTY5MDpDcDEyNTI6MTY4NDg1NDM3OTI0MDpJVFNTOi0xOi0xOjEwNDg6MTpmYWxzZTpOL0E6UjIxX0FNUi4wOi0xOi0x
* @ValidationInfo : Timestamp         : 23 May 2023 20:36:19
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSS
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : 1048
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOBATCH
SUBROUTINE REDO.B.ALE.UPD.CHEQUES(Y.APG.ID)
****************************************************************
*-------------------------------------------------------------------------
* Company Name  : ASOCIACION POPULAR DE AHORROS Y PRESTAMOS
* Developed By  : Prabhu
* Program Name  :
*-------------------------------------------------------------------------
* Description: This routine is a load routine used to load the variables
*
*----------------------------------------------------------
* Linked with:
* In parameter :
* out parameter : None
*------------------------------------------------------------------------
* MODIFICATION HISTORY
*--------------------------------------------
*   DATE              ODR                             DESCRIPTION
* 23.10.2011          PACS00146120    Prabhu                Initial Creation
* Date                   who                   Reference
* 06-04-2023         CONVERSTION TOOL     R22 AUTO CONVERSTION SM TO @SM AND VM TO @VM AND FM TO @FM AND ++ TO += 1 AND VAR1- TO -=
* 06-04-2023          ANIL KUMAR B        R22 MANUAL CONVERSTION -NO CHANGES
*------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
    $INSERT I_F.REDO.CLEARING.OUTWARD
    $INSERT I_F.APAP.H.GARNISH.DETAILS
    $INSERT I_F.AC.LOCKED.EVENTS
    $INSERT I_F.REDO.TFS.ALE
    $INSERT I_REDO.B.ALE.UPD.CHEQUES.COMMON
    $INSERT I_F.REDO.GAR.LOCK.ALE


    GOSUB READ.FILE

RETURN
*-------------------------------------------------------------------------
READ.FILE:

    Y.RETURN.AMT=''
    CALL F.READ(FN.APAP.H.GARNISH.DETAILS,Y.APG.ID,R.AHG,F.APAP.H.GARNISH.DETAILS,ERR)
    Y.ALL.ALE.IDS    =R.AHG<APAP.GAR.FIT.ALE>
    Y.FIT.AMOUNT.REQ =R.AHG<APAP.GAR.FIT.AMOUNT.REQ>
    Y.ACC.LOCKED.LIST=R.AHG<APAP.GAR.FIT.ACC>
    Y.GAR.ACC.LIST   =R.AHG<APAP.GAR.ACCOUNT.NO>
    CHANGE @VM TO @FM IN Y.ALL.ALE.IDS
    CHANGE @VM TO @FM IN Y.ACC.LOCKED.LIST
    CHANGE @VM TO @FM IN Y.GAR.ACC.LIST
    Y.AFG.CUST=R.AHG<APAP.GAR.CUSTOMER>
    CALL F.READ(FN.REDO.GAR.LOCK.ALE,Y.AFG.CUST,R.REDO.GAR.LOCK.ALE,F.REDO.GAR.LOCK.ALE,ERR)
    Y.REDO.GAR.LOCK.ALE.LIST=R.REDO.GAR.LOCK.ALE<TT.ALE.ALE>
    CHANGE @VM TO @FM IN Y.REDO.GAR.LOCK.ALE.LIST
    CHANGE @SM TO @FM IN Y.REDO.GAR.LOCK.ALE.LIST
    Y.ALE.CNT=1
    Y.ALE.TOT=DCOUNT(Y.REDO.GAR.LOCK.ALE.LIST,@FM)
    LOOP
    WHILE Y.ALE.CNT LE Y.ALE.TOT
        CALL F.READ(FN.AC.LOCKED.EVENTS,Y.REDO.GAR.LOCK.ALE.LIST<Y.ALE.CNT>,R.ALE,F.AC.LOCKED.EVENTS,ERR)
        IF ERR THEN
            ERR=''
            CALL EB.READ.HISTORY.REC(F.AC.LOCKED.EVENTS$HIS,Y.REDO.GAR.LOCK.ALE.LIST<Y.ALE.CNT>,R.ALE,ERR)
        END
        Y.ALE.CNT += 1
        Y.REDO.TFS.ALE=R.ALE<AC.LCK.DESCRIPTION>
        CALL F.READ(FN.REDO.TFS.ALE,Y.REDO.TFS.ALE,R.REDO.TFS.ALE,F.REDO.TFS.ALE,ERR)
        IF R.REDO.TFS.ALE THEN
            Y.REDO.CLEAR.OUT.ID.LIST<-1>=R.REDO.TFS.ALE<TFS.ALE.REDO.CLEAR.OUT>
        END
        ELSE
            Y.REDO.CLEAR.OUT.ID.LIST<-1>=Y.REDO.TFS.ALE
        END
    REPEAT
    R.REDO.GAR.LOCK.ALE<TT.ALE.ALE>=''
    Y.ALE.OUT.CLEARID=R.REDO.GAR.LOCK.ALE<TT.ALE.OUT.CLEAR.ID>
    Y.ALE.OUT.CLEARID<-1>=Y.REDO.CLEAR.OUT.ID.LIST
    CHANGE @VM TO @FM IN Y.ALE.OUT.CLEARID
    Y.ALE.USED.CLEARID.LIST=R.REDO.GAR.LOCK.ALE<TT.ALE.USED.CLEARID>
    CHANGE @VM TO @FM IN Y.ALE.USED.CLEARID.LIST
    Y.ALE.REMAIN.AMOUNT=R.REDO.GAR.LOCK.ALE<TT.ALE.AMT.REMAIN>
    CHANGE @VM TO @FM IN Y.ALE.REMAIN.AMOUNT
    Y.TT.ALE.AHG=R.REDO.GAR.LOCK.ALE<TT.ALE.AHG>
    Y.ACC.TOT=DCOUNT(Y.ACC.LOCKED.LIST,@FM)
    Y.ACC.CNT=1
    LOOP
    WHILE Y.ACC.CNT LE Y.ACC.TOT
        GOSUB PROCESS.ACC
        IF Y.CLEARED.AMT THEN
            Y.GRP.ACC.LIST<-1>=Y.ACC.LOCKED.LIST<Y.ACC.CNT>
            Y.CLEARED.AMT.LIST<-1>=Y.CLEARED.AMT
        END
        Y.ACC.CNT += 1
    REPEAT
    GOSUB CLEARED.PROCESS
    IF NOT(Y.IN.PROCESS) THEN
        R.AHG<APAP.GAR.AMOUNT.LOCKED>=R.AHG<APAP.GAR.AMOUNT.LOCKED>-Y.FIT.AMOUNT.REQ
        Y.FIT.AMOUNT.REQ=0
        CHANGE @VM TO @FM IN Y.TT.ALE.AHG
        LOCATE Y.APG.ID IN Y.TT.ALE.AHG SETTING Y.APG.POS THEN
            DEL Y.TT.ALE.AHG<Y.APG.POS>
        END
        CHANGE @FM TO @VM IN Y.TT.ALE.AHG
        R.REDO.GAR.LOCK.ALE<TT.ALE.AHG>=Y.TT.ALE.AHG
        Y.SET.AHG.UPD=1
    END
    IF Y.SET.AHG.UPD THEN
        R.AHG<APAP.GAR.FIT.AMOUNT.REQ>=Y.FIT.AMOUNT.REQ
        CALL F.WRITE(FN.APAP.H.GARNISH.DETAILS,Y.APG.ID,R.AHG)
    END
    CHANGE @FM TO @VM IN Y.ALE.REMAIN.AMOUNT
    CHANGE @FM TO @VM IN Y.ALE.USED.CLEARID.LIST
    CHANGE @FM TO @VM IN Y.ALE.OUT.CLEARID
    R.REDO.GAR.LOCK.ALE<TT.ALE.OUT.CLEAR.ID>=Y.ALE.OUT.CLEARID
    R.REDO.GAR.LOCK.ALE<TT.ALE.AMT.REMAIN>=Y.ALE.REMAIN.AMOUNT
    R.REDO.GAR.LOCK.ALE<TT.ALE.USED.CLEARID>=Y.ALE.USED.CLEARID.LIST
    IF Y.TT.ALE.AHG THEN
        CALL F.WRITE(FN.REDO.GAR.LOCK.ALE,Y.AFG.CUST,R.REDO.GAR.LOCK.ALE)
    END
    ELSE
        CALL F.DELETE(FN.REDO.GAR.LOCK.ALE,Y.AFG.CUST)
    END
RETURN

PROCESS.ACC:
    Y.CLEARED.AMT=''
    Y.AL.CLEARED.AMT=''
    Y.ALE.IDS=Y.ALL.ALE.IDS<Y.ACC.CNT>
    CHANGE @SM TO @FM IN Y.ALE.IDS
    Y.ALE.TOT   =DCOUNT(Y.ALE.IDS,@FM)
    Y.ALE.CNT   =1
    LOOP
    WHILE Y.ALE.CNT LE Y.ALE.TOT AND Y.FIT.AMOUNT.REQ GT 0
        Y.USED.AMT=R.AHG<APAP.GAR.FIT.USED,Y.ALE.CNT>
        GOSUB PROCESS.ALE
        R.AHG<APAP.GAR.FIT.USED,Y.ALE.CNT>=Y.USED.AMT
        Y.ALE.CNT += 1
    REPEAT
RETURN

PROCESS.ALE:

    Y.AL.CLEARED.AMT=''
    CALL F.READ(FN.AC.LOCKED.EVENTS,Y.ALE.IDS<Y.ALE.CNT>,R.ALE,F.AC.LOCKED.EVENTS,ERR)
    IF ERR THEN
        ERR=''
        CALL EB.READ.HISTORY.REC(F.AC.LOCKED.EVENTS$HIS,Y.ALE.IDS<Y.ALE.CNT>,R.ALE,ERR)
    END
    Y.TFS.ALE.ID=R.ALE<AC.LCK.DESCRIPTION>
    Y.ACCOUNT   =R.ALE<AC.LCK.ACCOUNT.NUMBER>
    ERR=''
    CALL F.READ(FN.REDO.TFS.ALE,Y.TFS.ALE.ID,R.REDO.TFS.ALE,F.REDO.TFS.ALE,ERR)
    IF NOT(ERR) THEN
        Y.CLEAR.OUT.ID.LIST=R.REDO.TFS.ALE<TFS.ALE.REDO.CLEAR.OUT>
    END
    ELSE
        Y.CLEAR.OUT.ID.LIST=R.ALE<AC.LCK.DESCRIPTION>
    END
    Y.CLEAR.OUT.ID.CNT=1
    CHANGE @VM TO @FM IN Y.CLEAR.OUT.ID.LIST
    Y.CLEAR.OUT.ID.TOT=DCOUNT(Y.CLEAR.OUT.ID.LIST,@FM)
    LOOP
    WHILE Y.CLEAR.OUT.ID.CNT LE Y.CLEAR.OUT.ID.TOT  AND Y.FIT.AMOUNT.REQ GT 0
        Y.CLEAR.OUT.ID=Y.CLEAR.OUT.ID.LIST<Y.CLEAR.OUT.ID.CNT>
        GOSUB CHECK.OUTWARD
        Y.CLEAR.OUT.ID.CNT += 1
    REPEAT
*    IF Y.ALE.IN.PROCESS THEN
*        R.REDO.GAR.LOCK.ALE<TT.ALE.AMT.REMAIN,-1>  =Y.REDO.GAR.LOCK.AMT
*        R.REDO.GAR.LOCK.ALE<TT.ALE.USED.CLEARID,-1>=Y.REDO.GAR.LOCK.RCO
*    END
*    ELSE
*        LOCATE Y.ALE.IDS<Y.ALE.CNT> IN Y.REDO.GAR.LOCK.ALE.LIST SETTING Y.GAR.ALE.POS THEN
*            DEL Y.REDO.GAR.LOCK.ALE.LIST<Y.GAR.ALE.POS>
*        END
*        CHANGE FM TO VM IN Y.REDO.GAR.LOCK.ALE.LIST
*        R.REDO.GAR.LOCK.ALE<TT.ALE.ALE>=Y.REDO.GAR.LOCK.ALE.LIST
*    END

    IF NOT(Y.CLEARED.AMT) THEN
        RETURN
    END
RETURN

CHECK.OUTWARD:

    CALL F.READ(FN.REDO.CLEARING.OUTWARD,Y.CLEAR.OUT.ID,R.REDO.CLEARING.OUTWARD,F.REDO.CLEARING.OUTWARD,ERR)
    IF NOT(R.REDO.CLEARING.OUTWARD) THEN
        RETURN
    END
    Y.EXP.DATE  = R.REDO.CLEARING.OUTWARD<CLEAR.OUT.EXPOSURE.DATE>
    IF Y.EXP.DATE EQ TODAY THEN
        Y.CHEQUE.AMT=R.REDO.CLEARING.OUTWARD<CLEAR.OUT.AMOUNT>
        LOCATE Y.CLEAR.OUT.ID IN Y.ALE.OUT.CLEARID SETTING Y.CLEAR.ID.POS THEN
            DEL Y.ALE.OUT.CLEARID<Y.CLEAR.ID.POS>
        END
        ELSE
            LOCATE Y.CLEAR.OUT.ID IN Y.ALE.USED.CLEARID.LIST SETTING Y.CLEAR.ID.POS THEN
                GOSUB CHECK.USED.OUTWARD
            END
            ELSE
                RETURN
            END
        END
        IF R.REDO.CLEARING.OUTWARD<CLEAR.OUT.CHQ.STATUS> EQ 'CLEARED' THEN
            IF Y.USED.AMT THEN
                IF Y.CHEQUE.AMT GT Y.USED.AMT  THEN
                    Y.CHEQUE.AMT -= Y.USED.AMT ;*R22 AUTO CONVERSTIONY.CHEQUE.AMT-Y.USED.AMT TO -= Y.USED.AMT
                    Y.USED.AMT=0
                END
                ELSE
                    Y.USED.AMT -= Y.CHEQUE.AMT ;*R22 AUTO CONVERSTION VAR1- TO -=
                    RETURN
                END
            END

            IF Y.FIT.AMOUNT.REQ GT Y.CHEQUE.AMT THEN
                Y.FIT.AMOUNT.REQ -= Y.CHEQUE.AMT ;*R22 AUTO CONVERSTION VAR1- TO -=
                Y.CLEARED.AMT += Y.CHEQUE.AMT   ;*R22 AUTO CONVERSTION VAR1- TO -=
            END
            ELSE

                Y.CLEARED.AMT += Y.FIT.AMOUNT.REQ  ;*R22 AUTO CONVERSTION VAR1- TO -=
                Y.ALE.REMAIN.AMOUNT<-1> =Y.CHEQUE.AMT-Y.FIT.AMOUNT.REQ
                Y.ALE.USED.CLEARID.LIST<-1> =Y.CLEAR.OUT.ID
                Y.FIT.AMOUNT.REQ=0
            END
        END
    END
    IF Y.EXP.DATE GT TODAY THEN
        Y.IN.PROCESS=1
    END
RETURN
CHECK.USED.OUTWARD:
    Y.CHEQUE.AMT=R.REDO.GAR.LOCK.ALE<TT.ALE.AMT.REMAIN>
    Y.USED.AMT=0
    DEL Y.ALE.USED.CLEARID.LIST<Y.CLEAR.ID.POS>
    DEL Y.ALE.REMAIN.AMOUNT<Y.CLEAR.ID.POS>
RETURN

CLEARED.PROCESS:

    Y.ACC.UPD.TOT=DCOUNT(Y.GRP.ACC.LIST,@FM)
    Y.ACC.UPD.CNT=1
    LOOP
    WHILE Y.ACC.UPD.CNT LE Y.ACC.UPD.TOT
        Y.ACCOUNT=Y.GRP.ACC.LIST<Y.ACC.UPD.CNT>
        LOCATE Y.ACCOUNT IN Y.GAR.ACC.LIST SETTING Y.ALE.CL.POS THEN
            GOSUB UPD.ALE
        END
        ELSE
            R.AHG<APAP.GAR.ACCOUNT.NO,-1> =Y.ACCOUNT
            R.AHG<APAP.GAR.AVAIL.BAL,-1>  =Y.CLEARED.AMT.LIST<Y.ACC.UPD.CNT>
            R.AHG<APAP.GAR.GARNISH.AMT,-1>=Y.CLEARED.AMT.LIST<Y.ACC.UPD.CNT>
            R.AC.LOCKED.EVENTS<AC.LCK.ACCOUNT.NUMBER> =Y.ACCOUNT
            R.AC.LOCKED.EVENTS<AC.LCK.FROM.DATE> = TODAY
            R.AC.LOCKED.EVENTS<AC.LCK.TO.DATE> = ''
            R.AC.LOCKED.EVENTS<AC.LCK.LOCKED.AMOUNT> = Y.CLEARED.AMT.LIST<Y.ACC.UPD.CNT>
            R.AC.LOCKED.EVENTS<AC.LCK.LOCAL.REF,LOC.GAR.REF.POS>  = R.AHG<APAP.GAR.GARNISHMENT.REF>
            R.AC.LOCKED.EVENTS<AC.LCK.LOCAL.REF,LOC.AVAIL.BAL.POS>=Y.CLEARED.AMT.LIST<Y.ACC.UPD.CNT>
            R.AC.LOCKED.EVENTS<AC.LCK.LOCAL.REF,LOC.CUSTOMER.POS> = R.AHG<APAP.GAR.CUSTOMER>
            APP.NAME = 'AC.LOCKED.EVENTS'
            OFSFUNCT = 'I'
            PROCESS  = 'PROCESS'
            OFSVERSION = 'AC.LOCKED.EVENTS,LOCK'
            GTSMODE = ''
            NO.OF.AUTH = '0'
            TRANSACTION.ID = ''
            OFS.MSG.ID =''
            OFS.SOURCE.ID = 'REDO.OFS.ACI.UPDATE'
            OFS.ERR = ''
            Y.LOOP.CNT += 1
            CALL OFS.BUILD.RECORD(APP.NAME,OFSFUNCT,PROCESS,OFSVERSION,GTSMODE,NO.OF.AUTH,TRANSACTION.ID,R.AC.LOCKED.EVENTS,OFSRECORD)
            CALL OFS.POST.MESSAGE(OFSRECORD,OFS.MSG.ID,OFS.SOURCE.ID,OFS.ERR)
        END
        Y.SET.AHG.UPD=1
        Y.ACC.UPD.CNT += 1
    REPEAT
RETURN
UPD.ALE:
    Y.ALE.LOCK.ID=R.AHG<APAP.GAR.ALE.REF,Y.ALE.CL.POS>
    CALL F.READ(FN.AC.LOCKED.EVENTS,Y.ALE.LOCK.ID,R.ALE.LOCK.MODIFY,F.AC.LOCKED.EVENTS,ERR)
    R.ALE.LOCK.MODIFY<AC.LCK.LOCKED.AMOUNT>=R.ALE.LOCK.MODIFY<AC.LCK.LOCKED.AMOUNT>+Y.CLEARED.AMT.LIST<Y.ACC.UPD.CNT>
    R.AHG<APAP.GAR.GARNISH.AMT,Y.ALE.CL.POS>=R.AHG<APAP.GAR.GARNISH.AMT,Y.ALE.CL.POS>+Y.CLEARED.AMT.LIST<Y.ACC.UPD.CNT>
    R.AHG<APAP.GAR.AVAIL.BAL,Y.ALE.CL.POS>  =R.AHG<APAP.GAR.AVAIL.BAL,Y.ALE.CL.POS>+Y.CLEARED.AMT.LIST<Y.ACC.UPD.CNT>
    APP.NAME = 'AC.LOCKED.EVENTS'
    OFSFUNCT = 'I'
    PROCESS  = 'PROCESS'
    OFSVERSION = 'AC.LOCKED.EVENTS,LOCK'
    GTSMODE = ''
    NO.OF.AUTH = '0'
    TRANSACTION.ID = Y.ALE.LOCK.ID
    OFS.MSG.ID =''
    OFS.SOURCE.ID = 'REDO.OFS.ACI.UPDATE'
    OFS.ERR = ''
    Y.LOOP.CNT += 1
    CALL OFS.BUILD.RECORD(APP.NAME,OFSFUNCT,PROCESS,OFSVERSION,GTSMODE,NO.OF.AUTH,TRANSACTION.ID,R.ALE.LOCK.MODIFY,OFSRECORD)
    CALL OFS.POST.MESSAGE(OFSRECORD,OFS.MSG.ID,OFS.SOURCE.ID,OFS.ERR)
RETURN
END
