* @ValidationCode : MjotODcwMTczMTQxOkNwMTI1MjoxNjg0ODU0Mzk0OTI3OklUU1M6LTE6LTE6MTg1MDoxOmZhbHNlOk4vQTpSMjFfQU1SLjA6LTE6LTE=
* @ValidationInfo : Timestamp         : 23 May 2023 20:36:34
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSS
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : 1850
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOBATCH
SUBROUTINE REDO.B.RAISE.INCOME.ENTRY(GR.ID)
*-----------------------------------------------------------------------------
* Company Name  : APAP DEV2
* Developed By  : Marimuthu S
* Program Name  : REDO.B.RAISE.INCOME.ENTRY
*-----------------------------------------------------------------
* Description : This multi threaded routine is used to raise the entries whenever income has happened.
*-----------------------------------------------------------------
* Linked With   : -NA-
* In Parameter  : -NA-
* Out Parameter : -NA-
*-----------------------------------------------------------------
* Modification History :
*-----------------------
* Reference              Date                Description
* ODR-2011-12-0017      21-Nov-2011          Initial draft
* Date                   who                   Reference              
* 12-04-2023         CONVERSTION TOOL     R22 AUTO CONVERSTION - FM TO @FM AND VM TO @VM AND SM TO @SM 
* 12-04-2023          ANIL KUMAR B        R22 MANUAL CONVERSTION -NO CHANGES
*-----------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_REDO.B.RAISE.INCOME.ENTRY.COMMON
    $INSERT I_F.REDO.ACCT.MRKWOF.HIST
    $INSERT I_F.REDO.ACCT.MRKWOF.PARAMETER
    $INSERT I_F.REDO.WORK.INT.CAP.AMT.RP
    $INSERT I_F.STMT.ENTRY
    $INSERT I_F.COMPANY
    $INSERT I_F.CATEG.ENTRY
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.ACCT.ACTIVITY
    $INSERT I_F.ACCOUNT

MAIN:

    GOSUB PROCESS
    GOSUB PGM.END

PROCESS:


    Y.CATEG = FIELD(GR.ID,"*",2)
    Y.CURR = FIELD(GR.ID,"*",1)
    Y.AGE.ST = FIELD(GR.ID,"*",3)
    CALL F.READ(FN.REDO.WORK.INT.CAP.AMT.RP,GR.ID,R.REDO.WORK.INT.CAP.AMT.RP,F.REDO.WORK.INT.CAP.AMT.RP,WOR.ERR)

    LOCATE Y.CATEG IN R.REDO.ACCT.MRKWOF.PARAMETER<RE.WOF.PAR.PROD.CATEGORY,1> SETTING POS.PR THEN
        Y.PR.CRED.CATEG = R.REDO.ACCT.MRKWOF.PARAMETER<RE.WOF.PAR.PRIN.DEB.CATEGORY,POS.PR>
        Y.IN.CRED.CATEG = R.REDO.ACCT.MRKWOF.PARAMETER<RE.WOF.PAR.INT.DEB.CATEGORY,POS.PR>
        Y.PR.PL.CATEG = R.REDO.ACCT.MRKWOF.PARAMETER<RE.WOF.PAR.PRINCIPAL.INCOME>
        Y.IN.PL.CATEG = R.REDO.ACCT.MRKWOF.PARAMETER<RE.WOF.PAR.INTEREST.INCOME>

        BEGIN CASE
            CASE Y.AGE.ST EQ 'DE1'
                Y.CDE = '0003'
            CASE Y.AGE.ST EQ 'DEL'
                Y.CDE = '0004'
            CASE Y.AGE.ST EQ 'NAB'
                Y.CDE = '0005'
        END CASE

        GOSUB ENTRY.PRINCIPAL
        GOSUB ENTRY.INTEREST
        GOSUB MARK.SETTLED
        CALL F.DELETE(FN.REDO.WORK.INT.CAP.AMT.RP,GR.ID)

    END

RETURN

ENTRY.PRINCIPAL:

    AMT = '' ; R.STMT.ENTRY = ''
    Y.CAP.FORM = R.REDO.WORK.INT.CAP.AMT.RP<REDO.RP.AMT.CAPITAL.TEXT>
    Y.CNT.CP = DCOUNT(Y.CAP.FORM,@VM)
    LOOP
    WHILE Y.CNT.CP GT 0 DO
        FLG.CP += 1
        Y.CAP.FR = Y.CAP.FORM<1,FLG.CP>
        AMT += FIELD(Y.CAP.FR,'*',2)
        Y.CNT.CP -= 1
    REPEAT

    IF AMT EQ '' OR AMT EQ 0 THEN
        RETURN
    END

    DR.ACCOUNT.NUMBER = Y.CURR:Y.PR.CRED.CATEG:Y.CDE:R.COMPANY(EB.COM.SUB.DIVISION.CODE)
    CR.ACCOUNT.NUMBER = Y.PR.PL.CATEG

    R.ACCOUNT = ''
    CALL F.READ(FN.ACCOUNT,DR.ACCOUNT.NUMBER,R.ACCOUNT,F.ACCOUNT,ACC.ERR)
    IF NOT(R.ACCOUNT) THEN
        CALL INT.ACC.OPEN(DR.ACCOUNT.NUMBER,RET.CODE)
        R.ACCOUNT = ''
        CALL F.READ(FN.ACCOUNT,DR.ACCOUNT.NUMBER,R.ACCOUNT,F.ACCOUNT,ACC.ERR)
        R.ACCOUNT<AC.LOCAL.REF,L.LOAN.STATUS.POS> = '3'
        CALL F.WRITE(FN.ACCOUNT,DR.ACCOUNT.NUMBER,R.ACCOUNT)
    END ELSE
        R.ACCOUNT<AC.LOCAL.REF,L.LOAN.STATUS.POS> = '3'
        CALL F.WRITE(FN.ACCOUNT,DR.ACCOUNT.NUMBER,R.ACCOUNT)
    END

    DR.TRANS.REF = 3:'-':Y.CURR:'-':Y.CATEG:'-':Y.AGE.ST
    CR.TRANS.REF = 3:'-':Y.CURR:'-':Y.CATEG:'-':Y.AGE.ST

    GOSUB FORM.DEBIT.ENTRY
    GOSUB FORM.CREDIT.ENTRY
    GOSUB CAL.ACCOUNTING

RETURN

ENTRY.INTEREST:

    AMT = '' ; R.STMT.ENTRY = ''
    Y.INT.FORM = R.REDO.WORK.INT.CAP.AMT.RP<REDO.RP.AMT.INTEREST.TEXT>
    Y.CNT.IN = DCOUNT(Y.INT.FORM,@VM)
    LOOP
    WHILE Y.CNT.IN GT 0 DO
        FLG.IN += 1
        Y.IN.FR = Y.INT.FORM<1,FLG.IN>
        Y.AR.ID = FIELD(Y.IN.FR,'*',1)
        CALL F.READ(FN.AA.ARRANGEMENT,Y.AR.ID,R.AA.ARR,F.AA.ARRANGEMENT,AA.ERR)
        R.REDO.GET.REPAID.DATE = ''
        CALL F.READ(FN.REDO.GET.REPAID.DATE,Y.AR.ID,R.REDO.GET.REPAID.DATE,F.REDO.GET.REPAID.DATE,DTE.ERR)
        Y.AC.ID = R.AA.ARR<AA.ARR.LINKED.APPL.ID>
        GOSUB CAL.PL.AMT
        CALL F.DELETE(FN.REDO.GET.REPAID.DATE,Y.AR.ID)

        CALL F.READ(FN.REDO.ACCT.MRKWOF.HIST,Y.AR.ID,R.REDO.ACCT.MRKWOF.HIST,F.REDO.ACCT.MRKWOF.HIST,MRKWOF.ERR)
        Y.TOT.INT.PAID = R.REDO.ACCT.MRKWOF.HIST<REDO.WH.TOT.INT.PAID>

        CALL F.READ(FN.REDO.WORK.PAID.PL,Y.AR.ID,R.REDO.WORK.PAID.PL,F.REDO.WORK.PAID.PL,PL.ERR)
        IF NOT(R.REDO.WORK.PAID.PL) THEN
            REM.AMT = Y.TOT.INT.PAID - PRIN.BALANCE
            AMT += REM.AMT
            R.REDO.WORK.PAID.PL = Y.TOT.INT.PAID
            CALL F.WRITE(FN.REDO.WORK.PAID.PL,Y.AR.ID,R.REDO.WORK.PAID.PL)
        END ELSE
            Y.DUMAMT = Y.TOT.INT.PAID - R.REDO.WORK.PAID.PL
            AMT += Y.DUMAMT - PRIN.BALANCE
            R.REDO.WORK.PAID.PL = Y.DUMAMT
            CALL F.WRITE(FN.REDO.WORK.PAID.PL,Y.AR.ID,R.REDO.WORK.PAID.PL)
        END
        Y.CNT.IN -= 1
    REPEAT


    IF AMT EQ '' OR AMT LE 0 THEN
        RETURN
    END

    DR.ACCOUNT.NUMBER = Y.CURR:Y.IN.CRED.CATEG:Y.CDE:R.COMPANY(EB.COM.SUB.DIVISION.CODE)
    CR.ACCOUNT.NUMBER = Y.IN.PL.CATEG

    R.ACCOUNT = ''
    CALL F.READ(FN.ACCOUNT,DR.ACCOUNT.NUMBER,R.ACCOUNT,F.ACCOUNT,ACC.ERR)
    IF NOT(R.ACCOUNT) THEN
        CALL INT.ACC.OPEN(DR.ACCOUNT.NUMBER,RET.CODE)
        R.ACCOUNT = ''
        CALL F.READ(FN.ACCOUNT,DR.ACCOUNT.NUMBER,R.ACCOUNT,F.ACCOUNT,ACC.ERR)
        R.ACCOUNT<AC.LOCAL.REF,L.LOAN.STATUS.POS> = '3'
        CALL F.WRITE(FN.ACCOUNT,DR.ACCOUNT.NUMBER,R.ACCOUNT)
    END ELSE
        R.ACCOUNT<AC.LOCAL.REF,L.LOAN.STATUS.POS> = '3'
        CALL F.WRITE(FN.ACCOUNT,DR.ACCOUNT.NUMBER,R.ACCOUNT)
    END

    DR.TRANS.REF = 3:'-':Y.CURR:'-':Y.CATEG:'-':Y.AGE.ST
    CR.TRANS.REF = 3:'-':Y.CURR:'-':Y.CATEG:'-':Y.AGE.ST

    Y.PR.CRED.CATEG = Y.IN.CRED.CATEG
    Y.PR.PL.CATEG = Y.IN.PL.CATEG

    GOSUB FORM.DEBIT.ENTRY
    GOSUB FORM.CREDIT.ENTRY
    GOSUB CAL.ACCOUNTING

RETURN

CAL.PL.AMT:


    BALANCE.TO.CHECKS = 'ACCPRINCIPALINTSP':@FM:'DUEPRINCIPALINTSP':@FM:'DELPRINCIPALINTSP':@FM:'DE1PRINCIPALINTSP':@FM:'NABPRINCIPALINTSP'
    ACCOUNT.ID = Y.AC.ID ; PRIN.BALANCE = ''
    Y.CNT.BAL = DCOUNT(BALANCE.TO.CHECKS,@FM)
    FLG.B = ''
    LOOP
    WHILE Y.CNT.BAL GT 0 DO
        FLG.B += 1
        BALANCE.TO.CHECK = BALANCE.TO.CHECKS<FLG.B>
        DATE.OPTIONS = ''
        EFFECTIVE.DATE = TODAY
        DATE.OPTIONS<4>  = 'ECB'
        BALANCE.AMOUNT = ""
        CALL AA.GET.PERIOD.BALANCES(ACCOUNT.ID, BALANCE.TO.CHECK, DATE.OPTIONS, EFFECTIVE.DATE, "", "", BAL.DETAILS, "")
        IF BAL.DETAILS<1> EQ R.REDO.GET.REPAID.DATE THEN
            PRIN.BALANCE += ABS(BAL.DETAILS<3>)
        END
        Y.CNT.BAL -= 1
    REPEAT

RETURN

MARK.SETTLED:

    Y.FORM = R.REDO.WORK.INT.CAP.AMT.RP<REDO.RP.AMT.INTEREST.TEXT>
    IF NOT(Y.FORM) THEN
        Y.FORM = R.REDO.WORK.INT.CAP.AMT.RP<REDO.RP.AMT.CAPITAL.TEXT>
    END
    Y.CNT.FM = DCOUNT(Y.FORM,@VM)
    FLG.RP = ''
    LOOP
    WHILE Y.CNT.FM GT 0 DO
        FLG.RP += 1
        Y.AR.ID = FIELD(Y.FORM<1,FLG.RP>,'*',1)
        CALL F.READ(FN.REDO.ACCT.MRKWOF.HIST,Y.AR.ID,R.REDO.ACCT.MRKWOF.HIST,F.REDO.ACCT.MRKWOF.HIST,WOF.ERR)
        IF (R.REDO.ACCT.MRKWOF.HIST<REDO.WH.OS.INT> EQ 0 OR R.REDO.ACCT.MRKWOF.HIST<REDO.WH.OS.INT> EQ '') AND (R.REDO.ACCT.MRKWOF.HIST<REDO.WH.OS.PRINCIPAL> EQ 0 OR R.REDO.ACCT.MRKWOF.HIST<REDO.WH.OS.PRINCIPAL> EQ '') THEN
            R.REDO.ACCT.MRKWOF.HIST<REDO.WH.STATUS> = 'LIQUIDATED'
            CALL F.WRITE(FN.REDO.ACCT.MRKWOF.HIST,Y.AR.ID,R.REDO.ACCT.MRKWOF.HIST)
        END
        Y.CNT.FM -= 1
    REPEAT

RETURN

FORM.DEBIT.ENTRY:

    R.DR.STMT.ENTRY = ''
    R.DR.STMT.ENTRY<AC.STE.ACCOUNT.NUMBER> = DR.ACCOUNT.NUMBER
    R.DR.STMT.ENTRY<AC.STE.COMPANY.CODE> = ID.COMPANY
    R.DR.STMT.ENTRY<AC.STE.AMOUNT.LCY> = AMT * (-1)
    R.DR.STMT.ENTRY<AC.STE.TRANSACTION.CODE> = '1'
    R.DR.STMT.ENTRY<AC.STE.PRODUCT.CATEGORY> = Y.PR.CRED.CATEG
    R.DR.STMT.ENTRY<AC.STE.VALUE.DATE> = TODAY
    R.DR.STMT.ENTRY<AC.STE.CURRENCY> = Y.CURR
    R.DR.STMT.ENTRY<AC.STE.OUR.REFERENCE> = DR.TRANS.REF
    R.DR.STMT.ENTRY<AC.STE.EXPOSURE.DATE> = TODAY
    R.DR.STMT.ENTRY<AC.STE.CURRENCY.MARKET> = '1'
    R.DR.STMT.ENTRY<AC.STE.TRANS.REFERENCE> = CR.TRANS.REF
    R.DR.STMT.ENTRY<AC.STE.SYSTEM.ID> = 'AC'
    R.DR.STMT.ENTRY<AC.STE.BOOKING.DATE> = TODAY

    CHANGE @FM TO @SM IN R.DR.STMT.ENTRY
    CHANGE @SM TO @VM IN R.DR.STMT.ENTRY

    R.STMT.ENTRY<-1> = R.DR.STMT.ENTRY

RETURN

FORM.CREDIT.ENTRY:

    R.CR.STMT.ENTRY = ''
    R.CR.STMT.ENTRY<AC.CAT.PL.CATEGORY> = CR.ACCOUNT.NUMBER
    R.CR.STMT.ENTRY<AC.CAT.COMPANY.CODE> = ID.COMPANY
    R.CR.STMT.ENTRY<AC.CAT.AMOUNT.LCY> = AMT
    R.CR.STMT.ENTRY<AC.CAT.TRANSACTION.CODE> = '51'
    R.CR.STMT.ENTRY<AC.CAT.PRODUCT.CATEGORY> = Y.PR.PL.CATEG
    R.CR.STMT.ENTRY<AC.CAT.VALUE.DATE> = TODAY
    R.CR.STMT.ENTRY<AC.CAT.CURRENCY> = Y.CURR
    R.CR.STMT.ENTRY<AC.CAT.OUR.REFERENCE> = DR.TRANS.REF
    R.CR.STMT.ENTRY<AC.CAT.EXPOSURE.DATE> = TODAY
    R.CR.STMT.ENTRY<AC.CAT.CURRENCY.MARKET> = '1'
    R.CR.STMT.ENTRY<AC.CAT.TRANS.REFERENCE> = CR.TRANS.REF
    R.CR.STMT.ENTRY<AC.CAT.SYSTEM.ID> = 'AC'
    R.CR.STMT.ENTRY<AC.CAT.BOOKING.DATE> = TODAY

    CHANGE @FM TO @SM IN R.CR.STMT.ENTRY
    CHANGE @SM TO @VM IN R.CR.STMT.ENTRY

    R.STMT.ENTRY<-1> = R.CR.STMT.ENTRY
RETURN

CAL.ACCOUNTING:

    ACC.PRODUCT = 'RAISE.WOF.ACCOUNTING'
    ACC.TYPE = 'SAO'

    CALL EB.ACCOUNTING(ACC.PRODUCT,ACC.TYPE,R.STMT.ENTRY,'')

RETURN

PGM.END:

END
