* @ValidationCode : MjoxNDkwMDg3MDA4OkNwMTI1MjoxNjg0ODU0Mzg4MDMyOklUU1M6LTE6LTE6NTUwOjE6ZmFsc2U6Ti9BOlIyMV9BTVIuMDotMTotMQ==
* @ValidationInfo : Timestamp         : 23 May 2023 20:36:28
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSS
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : 550
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOBATCH
SUBROUTINE REDO.B.INT.CALC(SEL.LIST)
****************************************************************
*-------------------------------------------------------------------------
* Company Name  : ASOCIACION POPULAR DE AHORROS Y PRESTAMOS
* Developed By  : Ganesh R
* Program Name  : REDO.B.INT.CALC
*-------------------------------------------------------------------------
* Description: This routine is a main routine used to process the account
*
*----------------------------------------------------------
* Linked with:
* In parameter : SEL.LIST
* out parameter : None
*------------------------------------------------------------------------
* MODIFICATION HISTORY
*--------------------------------------------
*   DATE              ODR                             DESCRIPTION
* 21-09-10          ODR-2010-09-0251                 Initial Creation
* 27-02-12       Shekar - Performance tuning
*          1. move CDD to .LOAD routine
*          2. Cache read INTEREST.BASIS
*          3. Save GDI SELECT list to a variable and reuse
* Date                  who                   Reference              
* 11-04-2023        �CONVERSTION TOOL   �  R22 AUTO CONVERSTION - VM TO @VM AND // TO *
* 11-04-2023          ANIL KUMAR B         R22 MANUAL CONVERSTION -NO CHANGES
*------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
    $INSERT I_F.LIMIT
    $INSERT I_F.CUSTOMER
    $INSERT I_F.ACCOUNT.DEBIT.INT
    $INSERT I_F.GROUP.DEBIT.INT
    $INSERT I_F.DATES
    $INSERT I_F.INTEREST.BASIS
    $INSERT I_F.REDO.INTEREST.REVERSE
    $INSERT I_REDO.B.INT.CALC.COMMON
    $INSERT I_F.REDO.APAP.CLEAR.PARAM ;*Tus Start
    $INSERT I_F.EB.CONTRACT.BALANCES ;*Tus End

    GOSUB INITIALISE
    GOSUB PROCESS

RETURN

INITIALISE:

    VAR.WORKING.BAL    = 0
    VAR.ONLINE.ACT.BAL = 0
    VAR.ONLINE.CLR.BAL = 0
    VAR.LIMIT.REF      = ''
    ACCT.ID            = ''
    VAR.CUSTOMER       = ''
    VAR.AVAIL.AMT      = 0
    VAR.WORK.AVAIL.AMT = 0
    INTRANSIT.AMT      = 0
    VAR.DB.INT.RATE    = 0
    VAR.WORK.AVAIL.AMT = 0

    GrpCcy = ''
    NO.OF.DAYS = Y.NO.OF.DAYS

RETURN
PROCESS:
*Reading the Account and getting the values of Amount
    ACCT.ID = SEL.LIST

    CALL F.READU(FN.ACCOUNT,ACCT.ID,R.ACCOUNT,F.ACCOUNT,ACCT.ERR,'')
    ECB.ERR= '';R.ECB='' ;* Tus Start
    CALL EB.READ.HVT('EB.CONTRACT.BALANCES',ACCT.ID,R.ECB,ECB.ERR) ;*Tus End
    VAR.CURRENCY       = R.ACCOUNT<AC.CURRENCY>
*VAR.WORKING.BAL    = R.ACCOUNT<AC.WORKING.BALANCE> ;*Tus Start
    VAR.WORKING.BAL    = R.ECB<ECB.WORKING.BALANCE>
*VAR.ONLINE.ACT.BAL = R.ACCOUNT<AC.ONLINE.ACTUAL.BAL>
    VAR.ONLINE.ACT.BAL = R.ECB<ECB.ONLINE.ACTUAL.BAL>
*VAR.ONLINE.CLR.BAL = R.ACCOUNT<AC.ONLINE.CLEARED.BAL>
    VAR.ONLINE.CLR.BAL = R.ECB<ECB.ONLINE.CLEARED.BAL> ;*Tus End
    VAR.DEBIT.INT      = R.ACCOUNT<AC.ACCT.DEBIT.INT>
    VAR.CUSTOMER       = R.ACCOUNT<AC.CUSTOMER>
    VAR.LIMIT.REF      = R.ACCOUNT<AC.LIMIT.REF>
    ACCT.GROUP         = R.ACCOUNT<AC.CONDITION.GROUP>

*Read the Limit Record

    IF VAR.CUSTOMER NE '' AND VAR.LIMIT.REF NE '' THEN
        VAR.LIMIT.REF = FMT(VAR.LIMIT.REF,'R%10')
        LIMIT.ID      = VAR.CUSTOMER:'.':VAR.LIMIT.REF
        CALL F.READ(FN.LIMIT,LIMIT.ID,R.LIMIT,F.LIMIT,LIMIT.ERR)
        VAR.AVAIL.AMT = R.LIMIT<LI.AVAIL.AMT>
    END

*Calculate Intransit Amount
    INTRANSIT.AMT      = VAR.ONLINE.ACT.BAL - VAR.ONLINE.CLR.BAL
    VAR.WORK.AVAIL.AMT = VAR.WORKING.BAL + VAR.AVAIL.AMT

*Check for Updating Util Balance
    IF VAR.WORK.AVAIL.AMT LT 0 AND INTRANSIT.AMT NE 0 THEN
        GOSUB UPDATE.UTIL.BAL
    END
    ELSE
        RETURN
    END

*Read ACCOUNT.DEBIT.INTEREST
    VAR.DB.COUNT  = DCOUNT(VAR.DEBIT.INT,@VM)
    VAR.DEBT.DATE = R.ACCOUNT<AC.ACCT.DEBIT.INT,VAR.DB.COUNT>
    DB.ACCT.ID    = ACCT.ID:'-':VAR.DEBT.DATE

    CALL F.READ(FN.ACCOUNT.DEBIT.INT,DB.ACCT.ID,R.ACCOUNT.DEBIT.INT,F.ACCOUNT.DEBIT.INT,DEBIT.ERR)
    IF R.ACCOUNT.DEBIT.INT THEN
        VAR.DB.BASIC.RATE  = R.ACCOUNT.DEBIT.INT<IC.ADI.DR.BASIC.RATE>
        VAR.DB.INT.RATE    = R.ACCOUNT.DEBIT.INT<IC.ADI.DR.INT.RATE>
        VAR.DB.MARGIN.OPER = R.ACCOUNT.DEBIT.INT<IC.ADI.DR.MARGIN.OPER>
        VAR.DB.MARGIN.RATE = R.ACCOUNT.DEBIT.INT<IC.ADI.DR.MARGIN.RATE>
        VAR.DB.LIMIT.AMT   = R.ACCOUNT.DEBIT.INT<IC.ADI.DR.LIMIT.AMT>
        VAR.DB.INT.BASIS   = R.ACCOUNT.DEBIT.INT<IC.ADI.INTEREST.DAY.BASIS>
    END
    IF R.ACCOUNT.DEBIT.INT EQ '' THEN

*Shek - Start
        GrpCcy = ACCT.GROUP:VAR.CURRENCY
        jPos = ''
        LOCATE GrpCcy IN aGdiIDs<1> SETTING jPos THEN
            SEL.GDI.LIST = aGdiRecId<jPos>
        END ELSE
* ##### include the sort condition - BY AR or BY DR...
            SEL.GDI.CMD = "SSELECT ":FN.GROUP.DEBIT.INT:" WITH @ID LIKE ": GrpCcy :"..."
            CALL EB.READLIST(SEL.GDI.CMD,SEL.GDI.LIST,'',NO.GDI.REC,RET.ERR)
            aGdiIDs<-1> = GrpCcy
            aGdiRecId<-1> = SEL.GDI.LIST<NO.GDI.REC>
            SEL.GDI.LIST = SEL.GDI.LIST<NO.GDI.REC>
        END
*Shek -End

        CALL F.READ(FN.GROUP.DEBIT.INT,SEL.GDI.LIST,R.GROUP.DEBIT.INT,F.GROUP.DEBIT.INT,GROUP.ERR)
        VAR.DB.BASIC.RATE  = R.GROUP.DEBIT.INT<IC.GDI.DR.BASIC.RATE>
        VAR.DB.INT.RATE    = R.GROUP.DEBIT.INT<IC.GDI.DR.INT.RATE>
        VAR.DB.MARGIN.OPER = R.GROUP.DEBIT.INT<IC.GDI.DR.MARGIN.OPER>
        VAR.DB.MARGIN.RATE = R.GROUP.DEBIT.INT<IC.GDI.DR.MARGIN.RATE>
        VAR.DB.LIMIT.AMT   = R.GROUP.DEBIT.INT<IC.GDI.DR.LIMIT.AMT>
        VAR.DB.INT.BASIS   = R.GROUP.DEBIT.INT<IC.GDI.INTEREST.DAY.BASIS>
    END

*Read Interest Basis Table
    CALL CACHE.READ(FN.INTEREST.BASIS,VAR.DB.INT.BASIS,R.INTEREST.BASIS,ERR.INTEREST.BASIS)
    VAR.INT.BASIC.VAL  = R.INTEREST.BASIS<IB.INT.BASIS>
    VAR.INT.BASIC.DAYS = FIELD(VAR.INT.BASIC.VAL,'/',2)

    IF VAR.DB.BASIC.RATE THEN
*Getting Latest Basic Interest
        Y.BASIC.ID = VAR.DB.BASIC.RATE:VAR.CURRENCY:TODAY
        CALL EB.GET.INTEREST.RATE(Y.BASIC.ID,BASIC.RATE)

    END

    IF VAR.DB.MARGIN.OPER NE '' AND VAR.DB.BASIC.RATE NE '' THEN
        VAR.INTEREST.RATE = BASIC.RATE
    END
    IF VAR.DB.MARGIN.OPER NE '' AND VAR.DB.INT.RATE NE '' THEN
        VAR.INTEREST.RATE = VAR.DB.INT.RATE
    END
    IF VAR.DB.MARGIN.OPER EQ '' AND VAR.DB.BASIC.RATE NE '' THEN
        VAR.INTEREST.RATE = BASIC.RATE
    END
    IF VAR.DB.MARGIN.OPER EQ '' AND VAR.DB.INT.RATE NE '' THEN
        VAR.INTEREST.RATE = VAR.DB.INT.RATE
    END

* Getting the Dates Difference
*-    Y.DATE1 = TODAY
*-    Y.DATE2 = R.DATES(EB.DAT.NEXT.WORKING.DAY)
*-    NO.OF.DAYS = "C"
*-    CALL CDD('',Y.DATE1,Y.DATE2,NO.OF.DAYS)

*Interest Amount Calculation
*    CALL CACHE.READ(FN.REDO.APAP.PARAM,'SYSTEM',R.REDO.APAP.PARAM,PARAM.ERR)
    IN.TRANSIT.RATE = R.REDO.APAP.PARAM<CLEAR.PARAM.IN.TRANSIT.RATE>

    VAR.INT.AMT = (INTRANSIT.UTIL * (VAR.DB.INT.RATE - IN.TRANSIT.RATE) * (NO.OF.DAYS/VAR.INT.BASIC.DAYS))/100

*Updating REDO.INTEREST.REVERSE Table

    Y.LAST.DATE = R.DATES(EB.DAT.LAST.WORKING.DAY)
    Y.YEAR      = Y.LAST.DATE[3,2]
    Y.MONTH     = Y.LAST.DATE[5,2]
    REVERSE.ID  = ACCT.ID:'-':Y.YEAR:Y.MONTH

    R.REDO.INTEREST.REVERSE = ''
    CALL F.READ(FN.REDO.INTEREST.REVERSE,REVERSE.ID,R.REDO.INTEREST.REVERSE,F.REDO.INTEREST.REVERSE,REVERSE.ERR)
    IF R.REDO.INTEREST.REVERSE THEN

        R.REDO.INTEREST.REVERSE<INT.REV.DAY.NO,-1>          = Y.LAST.DATE
        R.REDO.INTEREST.REVERSE<INT.REV.AMOUNT.UTILISED,-1> = INTRANSIT.UTIL
        R.REDO.INTEREST.REVERSE<INT.REV.INT.ACCRUED,-1>     = VAR.INT.AMT


    END ELSE

        R.REDO.INTEREST.REVERSE<INT.REV.ACCOUNT>         = ACCT.ID
        R.REDO.INTEREST.REVERSE<INT.REV.DAY.NO>          = Y.LAST.DATE
        R.REDO.INTEREST.REVERSE<INT.REV.AMOUNT.UTILISED> = INTRANSIT.UTIL
        R.REDO.INTEREST.REVERSE<INT.REV.INT.ACCRUED>     = VAR.INT.AMT
    END

    CALL F.WRITE(FN.REDO.INTEREST.REVERSE,REVERSE.ID,R.REDO.INTEREST.REVERSE)

RETURN

UPDATE.UTIL.BAL:
*Calculate Intransit Util balance

    IF ABS(VAR.WORK.AVAIL.AMT) LE INTRANSIT.AMT  THEN
        INTRANSIT.UTIL = ABS(VAR.WORK.AVAIL.AMT)
    END
    IF ABS(VAR.WORK.AVAIL.AMT) EQ INTRANSIT.AMT THEN
        INTRANSIT.UTIL = ABS(VAR.WORK.AVAIL.AMT)
    END
    IF ABS(VAR.WORK.AVAIL.AMT) GT INTRANSIT.AMT THEN
        INTRANSIT.UTIL = INTRANSIT.AMT
    END

*    R.ACCOUNT<AC.LOCAL.REF,LOC.TRANS.UTIL.POS> = INTRANSIT.UTIL

*    CON.DATE = OCONV(DATE(),"D-")
*   DATE.TIME = CON.DATE[9,2]:CON.DATE[1,2]:CON.DATE[4,2]:TIME.STAMP[1,2]:TIME.STAMP[4,2]
*  R.ACCOUNT<AC.DATE.TIME>  = DATE.TIME
* R.ACCOUNT<AC.AUTHORISER> = TNO:'_':OPERATOR
* R.ACCOUNT<AC.INPUTTER>   = TNO:'_':OPERATOR
* R.ACCOUNT<AC.CURR.NO>    = R.ACCOUNT<AC.CURR.NO> + 1
* R.ACCOUNT<AC.CO.CODE>    = ID.COMPANY
* CALL F.WRITE(FN.ACCOUNT,ACCT.ID,R.ACCOUNT)
RETURN
