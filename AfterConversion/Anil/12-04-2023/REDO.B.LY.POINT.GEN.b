* @ValidationCode : Mjo3MTYyNjY0MDQ6Q3AxMjUyOjE2ODEyNzcyNTA1NDc6SVRTUzotMTotMTowOjA6ZmFsc2U6Ti9BOlIyMV9BTVIuMDotMTotMQ==
* @ValidationInfo : Timestamp         : 12 Apr 2023 10:57:30
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSS
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOBATCH
SUBROUTINE REDO.B.LY.POINT.GEN(ACCT.ID)
*-------------------------------------------------------------------------------------------------
*DESCRIPTION:
*  This routine is attached to the batch record BNK/REDO.B.LY.POINT.GEN
*  This routine selects the necesary records from various files and generate the points for
*  accounts event
* ------------------------------------------------------------------------------------------------
* Input/Output:
*--------------
* IN  : -NA-
* OUT : -NA-
*
* Dependencies:
*---------------
* CALLS     : -NA-
* CALLED BY : -NA-
*
* Revision History:
*------------------
*   Date               who           Reference            Description
* 17-JUN-2013   RMONDRAGON        ODR-2011-06-0243      Initial Creation
* Date                   who                   Reference              
* 12-04-2023         CONVERSTION TOOL     R22 AUTO CONVERSTION - FM TO @FM AND VM TO @VM AND ++ TO += 1 AND TNO TO C$T24.SESSION.NO
* 12-04-2023          ANIL KUMAR B        R22 MANUAL CONVERSTION -NO CHANGES
*----------------------------------------------------------------------------------------------------------

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.CUSTOMER
    $INSERT I_F.ACCOUNT
    $INSERT I_F.BALANCE.MOVEMENT
    $INSERT I_F.ACCT.ACTIVITY

    $INSERT I_F.REDO.LY.POINTS
    $INSERT I_F.REDO.LY.POINTS.TOT
    $INSERT I_F.REDO.LY.MASTERPRGDR
    $INSERT I_REDO.B.LY.POINT.GEN.COMMON ;*Tus Start
    $INSERT I_F.EB.CONTRACT.BALANCES ;*Tus End

    GOSUB PROCESS

RETURN

*-------
PROCESS:
*-------

    R.ACCOUNT = '' ; ACCT.ERR = ''
    CALL F.READ(FN.ACCOUNT,ACCT.ID,R.ACCOUNT,F.ACCOUNT,ACCT.ERR) ;*Tus Start
    R.ECB='' ; ECB.ERR=''
    CALL EB.READ.HVT("EB.CONTRACT.BALANCES",ACCT.ID,R.ECB,ECB.ERR) ;*Tus End
    IF R.ACCOUNT THEN
        CUS.ID = R.ACCOUNT<AC.CUSTOMER>
        IF CUS.ID NE '' THEN
            CRT 'PROCESSING CUSTOMER NO. ':CUS.ID
        END
        ACC.CCY = R.ACCOUNT<AC.CURRENCY>
        ACC.CAT = R.ACCOUNT<AC.CATEGORY>
    END

    Y.MOD.TOT = DCOUNT(PRG.MOD.LST,@FM)

    MOD.CNT = 1
    LOOP
    WHILE MOD.CNT LE Y.MOD.TOT
        Y.PRG.TOT = DCOUNT(PRG.PER.MOD<MOD.CNT>,@VM)
        PRG.CNT = 1
        LOOP
        WHILE PRG.CNT LE Y.PRG.TOT
            PRG.ID = PRG.LST<MOD.CNT,PRG.CNT>
            Y.PRG.LG = PRG.CUS.GRP.LST<MOD.CNT,PRG.CNT>
            GOSUB CHECK.PRG.PARAMS
            IF Y.PROCESS EQ 'Y' THEN
                GOSUB VERIFY.COND
                IF Y.PROCESS EQ 'Y' THEN
                    IF Y.PRG.LG NE 'ALLCG' AND Y.PRG.LG EQ CUS.LG THEN
                        GOSUB PROCESS.ACCT
                    END
                    IF Y.PRG.LG EQ 'ALLCG' AND CUS.LG NE '' THEN
                        GOSUB PROCESS.ACCT
                    END
                END
            END
            PRG.CNT += 1
        REPEAT
        MOD.CNT += 1
    REPEAT

RETURN

*-----------
VERIFY.COND:
*-----------

    IF CUS.ID EQ '' THEN
        Y.PROCESS = 'N'
        RETURN
    END
    GOSUB GET.CUS
    GOSUB CHK.ACC.CAT
    IF ACC.CAT EQ '' THEN
        Y.PROCESS = 'N'
        RETURN
    END
    IF ACC.CCY NE PRG.CCY.IN.MOD<MOD.CNT,PRG.CNT> THEN
        Y.PROCESS = 'N'
        RETURN
    END
    GOSUB VAL.ACC.IECOND
    IF GEN EQ 'NG' THEN
        Y.PROCESS = 'N'
        RETURN
    END
    IF CUS.STA NE '1' THEN
        Y.PROCESS = 'N'
    END

RETURN

*-----------
CHK.ACC.CAT:
*-----------

    IPRG.PRO.LST = PRG.PROD.LST<MOD.CNT,PRG.CNT>
    CHANGE '*' TO @FM IN IPRG.PRO.LST

    LOCATE ACC.CAT IN IPRG.PRO.LST SETTING PRG.PRO.POS THEN
        PRO.ID = ACC.CAT
    END ELSE
        ACC.CAT = ''
        RETURN
    END

RETURN

*----------------
CHECK.PRG.PARAMS:
*----------------

    Y.PROCESS = 'Y'

    IF PRG.END.DATE.LST<MOD.CNT,PRG.CNT> THEN
        IF TODAY LE PRG.END.DATE.LST<MOD.CNT,PRG.CNT> THEN
            GOSUB UPD.EXP.DATE
        END ELSE
            Y.PROCESS = 'N'
        END
    END ELSE
        GOSUB UPD.EXP.DATE
    END

RETURN

*------------
UPD.EXP.DATE:
*------------

    IF PRG.EXP.DATE.LST<MOD.CNT,PRG.CNT> EQ '' THEN
        DAYS.EXP = PRG.DAYS.EXP.LST<MOD.CNT,PRG.CNT>
        EXP.DATE = TODAY
        TEMP.DAYS.EXP = '+':DAYS.EXP:'C'
        CALL CDT('',EXP.DATE,TEMP.DAYS.EXP)
    END ELSE
        EXP.DATE = PRG.EXP.DATE.LST<MOD.CNT,PRG.CNT>
    END

RETURN

*-------
GET.CUS:
*-------

    R.CUSTOMER = '' ; CUS.ERR = ''
    CALL F.READ(FN.CUSTOMER,CUS.ID,R.CUSTOMER,F.CUSTOMER,CUS.ERR)
    IF R.CUSTOMER THEN
        CUS.STA = R.CUSTOMER<EB.CUS.CUSTOMER.STATUS>
        CUS.LG = R.CUSTOMER<EB.CUS.LOCAL.REF,POS.L.CU.G.LEALTAD>
    END

RETURN

*------------
PROCESS.ACCT:
*------------

    MOD.TYPE = PRG.MOD.TYP<MOD.CNT,PRG.CNT>
    EVENT = PRG.MOD.EVE<MOD.CNT,PRG.CNT>
    CHK.VAL = ''

    BEGIN CASE
        CASE MOD.TYPE EQ '2'
*CHK.VAL = R.ACCOUNT<AC.WORKING.BALANCE> ;*TUs Start
            CHK.VAL = R.ECB<ECB.WORKING.BALANCE> ;*Tus End
        CASE MOD.TYPE EQ '3'
            GOSUB CHK.BY.INC.BAL
        CASE MOD.TYPE EQ '4'
            GOSUB CHK.MTH.AVG.BAL
        CASE MOD.TYPE EQ '5'
            GOSUB CHK.MTH.INC.AVG.BAL
        CASE MOD.TYPE EQ '6'
            GOSUB CHK.BY.EVENT
        CASE MOD.TYPE EQ '8'
            GOSUB CHK.MTH.INT
    END CASE
    IF CHK.VAL THEN
        GOSUB CHECK.PT.GEN
    END

RETURN

*--------------
CHK.BY.INC.BAL:
*--------------

    CURR.BALANCE = ''; PREV.BALANCE = ''
* CURR.BALANCE = R.ACCOUNT<AC.WORKING.BALANCE> ;*Tus Start
    CURR.BALANCE = R.ECB<ECB.WORKING.BALANCE>
* PREV.BALANCE = R.ACCOUNT<AC.OPEN.ACTUAL.BAL>
    PREV.BALANCE = R.ECB<ECB.OPEN.ACTUAL.BAL> ;*Tus End
    CHK.VAL = CURR.BALANCE - PREV.BALANCE

RETURN

*---------------
CHK.MTH.AVG.BAL:
*---------------

    IF NEXT.MONTH NE CUR.MONTH THEN
        ADJ.AVG.BAL = ''
        BL.MV.ID = ACCT.ID:'*':TODAY[1,6]
        R.BALANCE.MOVEMENT = ''
        CALL F.READ(FN.BALANCE.MOVEMENT,BL.MV.ID,R.BALANCE.MOVEMENT,F.BALANCE.MOVEMENT,BL.MV.ERR)
        ADJ.AVG.BAL = R.BALANCE.MOVEMENT<BL.MV.ADJ.AVG.BALANCE>
        CHK.VAL = ADJ.AVG.BAL
    END

RETURN

*-------------------
CHK.MTH.INC.AVG.BAL:
*-------------------

    IF NEXT.MONTH NE CUR.MONTH THEN
        CALL REDO.S.BY.MTH.INC.AVG.BAL(ACCT.ID,CHK.VAL)
    END

RETURN

*------------
CHK.BY.EVENT:
*------------

    CHK.VAL = 0
    BEGIN CASE
        CASE EVENT EQ 1
            GOSUB EVENT.ONE
        CASE EVENT EQ 2
            GOSUB EVENT.TWO
        CASE EVENT EQ 3
            GOSUB EVENT.THREE
    END CASE

RETURN
*---------
EVENT.ONE:
*---------

    IF R.ACCOUNT<AC.OPENING.DATE> EQ TODAY THEN
        CHK.VAL = 1
    END

RETURN

*---------
EVENT.TWO:
*---------

    ACC.CURR.NO = R.ACCOUNT<AC.CURR.NO>
    IF ACC.CURR.NO GT 1 THEN
        HIS.ACC.CURR.NO = ACC.CURR.NO - 1
        HIS.ACC.ID = ACCT.ID:';':HIS.ACC.CURR.NO
        R.ACCOUNT.HIS = ''; ACC.HIS.ERR = ''
        CALL F.READ(FN.ACCOUNT.HIS,HIS.ACC.ID,R.ACCOUNT.HIS,F.ACCOUNT.HIS,ACC.HIS.ERR)
        VAR.ACC.STATUS = R.ACCOUNT.HIS<AC.LOCAL.REF,POS.L.AC.STATUS1>
        IF VAR.ACC.STATUS NE 'ACTIVE' AND VAR.ACC.STATUS NE '' THEN
            CHK.VAL = 1
        END
    END

RETURN

*-----------
EVENT.THREE:
*-----------

    ACCT.ACT.ID = ACCT.ID:'-':TODAY[1,4]:TODAY[5,2]
    CALL F.READ(FN.ACCT.ACTIVITY,ACCT.ACT.ID,R.ACCT.ACTIVITY,F.ACCT.ACTIVITY,ACCT.ACT.ERR)
    NO.OF.TRANSACT = R.ACCT.ACTIVITY<IC.ACT.NO.OF.TRANSACT>
    LOCATE '1' IN NO.OF.TRANSACT<1,1> SETTING TRANS.POS THEN
        CHK.VAL = 1
    END

RETURN

*-----------
CHK.MTH.INT:
*-----------

    IF NEXT.MONTH NE CUR.MONTH THEN
        CALL REDO.S.BY.MTH.INT(ACCT.ID,CHK.VAL)
    END

RETURN

*--------------
VAL.ACC.IECOND:
*--------------

    GEN = 'G'
    IPRG.COND.TYPE.EXINC = PRG.COND.TYPE.EXINC<MOD.CNT,PRG.CNT>
    IPRG.APP.EXC.COND = PRG.APP.EXC.COND<MOD.CNT,PRG.CNT>
    IPRG.EXC.EST.ACCT = PRG.EXC.EST.ACCT<MOD.CNT,PRG.CNT>
    CHANGE '*' TO @FM IN IPRG.EXC.EST.ACCT
    IPRG.APP.INC.COND = PRG.APP.INC.COND<MOD.CNT,PRG.CNT>
    IPRG.INC.EST.ACCT = PRG.INC.EST.ACCT<MOD.CNT,PRG.CNT>
    CHANGE '*' TO @FM IN IPRG.INC.EST.ACCT

    Y.AC.STATUS1 = R.ACCOUNT<AC.LOCAL.REF,POS.L.AC.STATUS1>
    Y.AC.STATUS2 = R.ACCOUNT<AC.LOCAL.REF,POS.L.AC.STATUS2>

    IF IPRG.COND.TYPE.EXINC EQ '' THEN
        RETURN
    END

    IF IPRG.COND.TYPE.EXINC EQ 'ESTADO.CUENTA' AND IPRG.APP.EXC.COND EQ 'ESPECIFICA' THEN
        GOSUB CHECK.STATUS.FOR.EXC
    END ELSE
        Y.PROC.INC.COND = 1
    END

    IF Y.PROC.INC.COND EQ '1' THEN
        IF IPRG.COND.TYPE.EXINC EQ 'ESTADO.CUENTA' AND IPRG.APP.INC.COND EQ 'ESPECIFICA' THEN
            GOSUB CHECK.STATUS.FOR.INC
        END
    END

RETURN

*--------------------
CHECK.STATUS.FOR.EXC:
*--------------------

    LOCATE Y.AC.STATUS1 IN IPRG.EXC.EST.ACCT SETTING EXC.EST.ACCT.POS THEN
        GEN = 'NG'
    END ELSE
        LOCATE Y.AC.STATUS2 IN IPRG.EXC.EST.ACCT SETTING EXC.EST.ACCT.POS THEN
            GEN = 'NG'
        END
    END

RETURN

*--------------------
CHECK.STATUS.FOR.INC:
*--------------------

    LOCATE Y.AC.STATUS1 IN IPRG.INC.EST.ACCT SETTING INC.EST.ACCT.POS ELSE
        LOCATE Y.AC.STATUS2 IN IPRG.INC.EST.ACCT SETTING INC.EST.ACCT.POS ELSE
            GEN = 'NG'
        END
    END

RETURN

*------------
CHECK.PT.GEN:
*------------

    FRM.GEN = PRG.FORM.GEN.IN.MOD<MOD.CNT,PRG.CNT>
    GEN.PTS = PRG.PTS.IN.MOD<MOD.CNT,PRG.CNT>
    PT.VALUE = PRG.POINT.VALUE.LST<MOD.CNT,PRG.CNT>
    MIN.GEN = PRG.MINGEN.IN.MOD<MOD.CNT,PRG.CNT>
    MAX.GEN = PRG.MAXGEN.IN.MOD<MOD.CNT,PRG.CNT>

    IF MOD.TYPE EQ '3' AND FRM.GEN EQ '2' THEN
        PT.QTY = CHK.VAL * GEN.PTS
        PT.QTY = FMT(PT.QTY,0)
        IF PT.QTY LT MIN.GEN THEN
            RETURN
        END
        IF MAX.GEN AND PT.QTY GT MAX.GEN THEN
            PT.QTY = MAX.GEN
        END
        QTY.VALUE = PT.QTY * PT.VALUE
        QTY.VALUE = FMT(QTY.VALUE,0)
        CRT '-> GENERATING POINTS FOR PROGRAM ID ':PRG.ID:'...'
        GOSUB UPD.REDO.LY.PTS
        RETURN
    END

    IF MOD.TYPE EQ '6' THEN
        PT.QTY = GEN.PTS
        QTY.VALUE = PT.QTY * PT.VALUE
        QTY.VALUE = FMT(QTY.VALUE,0)
        CRT '-> GENERATING POINTS FOR PROGRAM ID ':PRG.ID:'...'
        GOSUB UPD.REDO.LY.PTS
        RETURN
    END

    IF MOD.TYPE EQ '8' THEN
        PT.QTY = CHK.VAL * GEN.PTS
        PT.QTY = FMT(PT.QTY,0)
        IF PT.QTY GE MIN.GEN AND PT.QTY LE MAX.GEN THEN
            QTY.VALUE = PT.QTY * PT.VALUE
            QTY.VALUE = FMT(QTY.VALUE,0)
            CRT '-> GENERATING POINTS FOR PROGRAM ID ':PRG.ID:'...'
            GOSUB UPD.REDO.LY.PTS
            RETURN
        END
    END

    GEN.PTS.SPEC = GEN.PTS
    MIN.GEN.SPEC = MIN.GEN
    MAX.GEN.SPEC = MAX.GEN

    GEN.PTS.CNT = DCOUNT(GEN.PTS.SPEC,'*')
    GEN.PTS.POS = 1
    LOOP
    WHILE GEN.PTS.POS LE GEN.PTS.CNT
        MIN.GEN = FIELD(MIN.GEN.SPEC,'*',GEN.PTS.POS)
        MAX.GEN = FIELD(MAX.GEN.SPEC,'*',GEN.PTS.POS)
        IF CHK.VAL GE MIN.GEN AND CHK.VAL LE MAX.GEN THEN
            PT.QTY = FIELD(GEN.PTS.SPEC,'*',GEN.PTS.POS)
            QTY.VALUE = PT.QTY * PT.VALUE
            QTY.VALUE = FMT(QTY.VALUE,0)
            CRT '-> GENERATING POINTS FOR PROGRAM ID ':PRG.ID:'...'
            GOSUB UPD.REDO.LY.PTS
            GEN.PTS.POS = GEN.PTS.CNT
        END
        GEN.PTS.POS += 1
    REPEAT

RETURN

*---------------
UPD.REDO.LY.PTS:
*---------------

    R.REDO.LY.POINTS = ''
    CALL F.READU(FN.REDO.LY.POINTS,CUS.ID,R.REDO.LY.POINTS,F.REDO.LY.POINTS,RLP.ERR,'')
    GOSUB ASSIGN.AUDIT
    PRO.LST = R.REDO.LY.POINTS<REDO.PT.PRODUCT>
    GOSUB ASSIGN.LY.PTS
    CALL F.WRITE(FN.REDO.LY.POINTS,CUS.ID,R.REDO.LY.POINTS)
    GOSUB ASSIGN.LY.PTS.TOT

RETURN

*------------
ASSIGN.AUDIT:
*------------

    CURR.NO = ''
    CUR.TIME = OCONV(TIME(), "MT")
    CHANGE ':' TO '' IN CUR.TIME
    CURR.NO = R.REDO.LY.POINTS<REDO.PT.CURR.NO>
    IF CURR.NO EQ '' THEN
        CURR.NO = 1
    END ELSE
        CURR.NO += 1
    END
    R.REDO.LY.POINTS<REDO.PT.RECORD.STATUS> = ''
    R.REDO.LY.POINTS<REDO.PT.CURR.NO> = CURR.NO
    R.REDO.LY.POINTS<REDO.PT.INPUTTER> = C$T24.SESSION.NO:'_':OPERATOR  ;*R22 AUTO CONVERSTION TNO TO C$T24.SESSION.NO
    R.REDO.LY.POINTS<REDO.PT.DATE.TIME> = G.DATE[3,6]:CUR.TIME
    R.REDO.LY.POINTS<REDO.PT.AUTHORISER> = C$T24.SESSION.NO:'_':OPERATOR  ;*R22 AUTO CONVERSTION TNO TO C$T24.SESSION.NO
    R.REDO.LY.POINTS<REDO.PT.CO.CODE> = ID.COMPANY
    R.REDO.LY.POINTS<REDO.PT.DEPT.CODE> = 1

RETURN

*-------------
ASSIGN.LY.PTS:
*-------------

    PTS.CHG = 1
    CHANGE @VM TO @FM IN PRO.LST
    LOCATE PRO.ID IN PRO.LST SETTING PRO.INS.POS ELSE
        R.REDO.LY.POINTS<REDO.PT.PRODUCT,PRO.INS.POS> = PRO.ID
    END
    R.REDO.LY.POINTS<REDO.PT.PROGRAM,PRO.INS.POS,-1> = PRG.ID
    R.REDO.LY.POINTS<REDO.PT.TXN.ID,PRO.INS.POS,-1> = ACCT.ID
    R.REDO.LY.POINTS<REDO.PT.QUANTITY,PRO.INS.POS,-1> = PT.QTY
    R.REDO.LY.POINTS<REDO.PT.QTY.VALUE,PRO.INS.POS,-1> = QTY.VALUE
    IF PRG.AIR.LST<MOD.CNT,PRG.CNT> EQ 'SI' THEN
        R.REDO.LY.POINTS<REDO.PT.STATUS,PRO.INS.POS,-1> = 'Pendiente.Someter'
    END ELSE
        R.REDO.LY.POINTS<REDO.PT.STATUS,PRO.INS.POS,-1> = 'Liberada'
    END
    R.REDO.LY.POINTS<REDO.PT.GEN.DATE,PRO.INS.POS,-1> = TODAY
    R.REDO.LY.POINTS<REDO.PT.AVAIL.DATE,PRO.INS.POS,-1> = TODAY
    R.REDO.LY.POINTS<REDO.PT.EXP.DATE,PRO.INS.POS,-1> = EXP.DATE
    R.REDO.LY.POINTS<REDO.PT.MAN.DATE,PRO.INS.POS,-1> = ''
    R.REDO.LY.POINTS<REDO.PT.MAN.QTY,PRO.INS.POS,-1> = ''
    R.REDO.LY.POINTS<REDO.PT.MAN.DESC,PRO.INS.POS,-1> = ''
    R.REDO.LY.POINTS<REDO.PT.MAN.USER,PRO.INS.POS,-1> = ''

RETURN

*-----------------
ASSIGN.LY.PTS.TOT:
*-----------------

    GOSUB UPD.PTS.MMYY
    GOSUB UPD.PTS.PGM.YY
    GOSUB UPD.PTS.YYYY
    GOSUB UPD.PTS.ALL.PGM
    GOSUB UPD.PTS.ALL.PGM.MMYY
    GOSUB UPD.PTS.ALL.PGM.YY
    GOSUB UPD.PTS.ALL.YYYY
    IF PRG.POINT.USE.LST<MOD.CNT,PRG.CNT> EQ 4 THEN
        GOSUB UPD.PTS.CUS
    END
    IF PRG.POINT.USE.LST<MOD.CNT,PRG.CNT> EQ 3 THEN
        GOSUB UPD.PTS.BUS
    END

    Y.UPD.ONLINE = 0
    GOSUB CHECK.MASTER.PRG
    GOSUB UPD.PTS.FOR.ACCT
    IF Y.UPD.ONLINE EQ 1  THEN
        GOSUB UPD.PTS.FOR.DEB
        IF PRG.ID.OLD NE '' THEN
            PRG.ID = PRG.ID.OLD
        END
    END

RETURN

*----------------
CHECK.MASTER.PRG:
*----------------

    Y.MASTER.PRG = ''
    Y.SLAVES.PRG = ''
    R.REDO.LY.MASTERPRGDR = '' ; MAS.ERR = ''

*  CALL F.READ(FN.REDO.LY.MASTERPRGDR,'SYSTEM',R.REDO.LY.MASTERPRGDR,F.REDO.LY.MASTERPRGDR,MAS.ERR) ;*Tus Start
    CALL CACHE.READ(FN.REDO.LY.MASTERPRGDR,'SYSTEM',R.REDO.LY.MASTERPRGDR,MAS.ERR) ; * Tus End
    IF R.REDO.LY.MASTERPRGDR THEN
        Y.MASTER.PRG = R.REDO.LY.MASTERPRGDR<REDO.MASPRG.MASTER.PRG>
        Y.SLAVES.PRG = R.REDO.LY.MASTERPRGDR<REDO.MASPRG.SLAVE.PRG>
    END

    Y.SLAVES.PRG.CNT = DCOUNT(Y.SLAVES.PRG,@VM)

    IF Y.SLAVES.PRG.CNT EQ 0 AND Y.MASTER.PRG NE '' THEN
        IF PRG.ID EQ Y.MASTER.PRG THEN
            PRG.ID = Y.MASTER.PRG
            Y.UPD.ONLINE = 1
            RETURN
        END
    END

    Y.SLAVE.CNT = 1
    LOOP
    WHILE Y.SLAVE.CNT LE Y.SLAVES.PRG.CNT
        Y.SLAVE.PRG = FIELD(Y.SLAVES.PRG,@VM,Y.SLAVE.CNT)
        IF PRG.ID EQ Y.MASTER.PRG OR PRG.ID EQ Y.SLAVE.PRG THEN
            PRG.ID.OLD = PRG.ID
            PRG.ID = Y.MASTER.PRG
            Y.UPD.ONLINE = 1
            Y.SLAVE.CNT = Y.SLAVES.PRG.CNT
        END
        Y.SLAVE.CNT += 1
    REPEAT

RETURN

*------------
UPD.PTS.MMYY:
*------------

    TOT.POINTS.ID = CUS.ID:PRG.ID:CUR.MONTH:CUR.YEAR
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*--------------
UPD.PTS.PGM.YY:
*--------------

    TOT.POINTS.ID = CUS.ID:PRG.ID:'ALL':CUR.YEAR
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*------------
UPD.PTS.YYYY:
*------------

    TOT.POINTS.ID = CUS.ID:'ALL':CUR.YEAR
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*---------------
UPD.PTS.ALL.PGM:
*---------------

    TOT.POINTS.ID = 'ALL':PRG.ID
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*--------------------
UPD.PTS.ALL.PGM.MMYY:
*--------------------

    TOT.POINTS.ID = 'ALL':PRG.ID:CUR.MONTH:CUR.YEAR
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*------------------
UPD.PTS.ALL.PGM.YY:
*------------------

    TOT.POINTS.ID = 'ALL':PRG.ID:CUR.YEAR
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*----------------
UPD.PTS.ALL.YYYY:
*----------------

    TOT.POINTS.ID = 'ALL':CUR.YEAR
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*-----------
UPD.PTS.CUS:
*-----------

    TOT.POINTS.ID = CUS.ID:'C'
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*-----------
UPD.PTS.BUS:
*-----------

    TOT.POINTS.ID = CUS.ID:'B'
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*----------------
UPD.PTS.FOR.ACCT:
*----------------

    TOT.POINTS.ID = 'ALL':PRG.ID:CUR.DAY:CUR.MONTH:CUR.YEAR
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*---------------
UPD.PTS.FOR.DEB:
*---------------

    TOT.POINTS.ID = CUS.ID:'ONLINEDEB'
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS.DEB
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*-----------
UPD.PROCESS:
*-----------

    VAR.AVAIL = 0 ; VAR.AVAIL.VALUE = 0 ; VAR.NAVAIL = 0 ; VAR.NAVAIL.VALUE = 0
    VAR.TOT.GEN = 0 ; VAR.TOT.GEN.VALUE = 0
    IF R.REDO.LY.POINTS.TOT EQ '' THEN
        VAR.NAVAIL = 0
        VAR.NAVAIL.VALUE = 0
        VAR.TOT.GEN = 0
        VAR.TOT.GEN.VALUE = 0
        VAR.AVAIL = 0
        VAR.AVAIL.VALUE = 0
    END ELSE
        VAR.TOT.GEN = R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.GEN.POINTS>
        VAR.TOT.GEN.VALUE = R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.GEN.VALUE>
        VAR.AVAIL   =  R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.POINTS>
        VAR.AVAIL.VALUE =  R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.VALUE>
        VAR.NAVAIL   =  R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.NAVAIL.POINTS>
        VAR.NAVAIL.VALUE =  R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.NAVAIL.VALUE>
    END
    IF PT.QTY GT 0 THEN
        VAR.TOT.GEN += PT.QTY
        VAR.TOT.GEN.VALUE += QTY.VALUE
    END
    VAR.AVAIL += PT.QTY
    VAR.AVAIL.VALUE += QTY.VALUE
    IF PT.QTY LT 0 THEN
        VAR.NAVAIL = VAR.NAVAIL + NEG(PT.QTY)
        VAR.NAVAIL.VALUE = VAR.NAVAIL.VALUE + NEG(QTY.VALUE)
    END
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.POINTS> = VAR.AVAIL
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.VALUE> = VAR.AVAIL.VALUE
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.GEN.POINTS> = VAR.TOT.GEN
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.GEN.VALUE> = VAR.TOT.GEN.VALUE
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.NAVAIL.POINTS> = VAR.NAVAIL
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.NAVAIL.VALUE> = VAR.NAVAIL.VALUE

RETURN

*---------------
UPD.PROCESS.DEB:
*---------------

    VAR.AVAIL = 0 ; VAR.AVAIL.VALUE = 0

    IF R.REDO.LY.POINTS.TOT EQ '' THEN
        VAR.AVAL = 0
        VAR.AVAIL.VALUE = 0
    END ELSE
        VAR.AVAIL = R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.POINTS>
        VAR.AVAIL.VALUE =  R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.VALUE>
    END

    VAR.AVAIL += PT.QTY
    VAR.AVAIL.VALUE += QTY.VALUE

    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.POINTS> = VAR.AVAIL
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.VALUE> = VAR.AVAIL.VALUE

RETURN

*----------------
ASSIGN.AUDIT.TOT:
*----------------

    CURR.NO = ''
    CUR.TIME = OCONV(TIME(), "MT")
    CHANGE ':' TO '' IN CUR.TIME
    CURR.NO = R.REDO.LY.POINTS.TOT<REDO.PT.T.CURR.NO>
    IF CURR.NO EQ '' THEN
        CURR.NO = 1
    END ELSE
        CURR.NO += 1
    END
    R.REDO.LY.POINTS.TOT<REDO.PT.T.RECORD.STATUS> = ''
    R.REDO.LY.POINTS.TOT<REDO.PT.T.CURR.NO> = CURR.NO
    R.REDO.LY.POINTS.TOT<REDO.PT.T.INPUTTER> = C$T24.SESSION.NO:'_':OPERATOR  ;*R22 AUTO CONVERSTION TNO TO C$T24.SESSION.NO
    R.REDO.LY.POINTS.TOT<REDO.PT.T.DATE.TIME> = G.DATE[3,6]:CUR.TIME
    R.REDO.LY.POINTS.TOT<REDO.PT.T.AUTHORISER> = C$T24.SESSION.NO:'_':OPERATOR  ;*R22 AUTO CONVERSTION TNO TO C$T24.SESSION.NO
    R.REDO.LY.POINTS.TOT<REDO.PT.T.CO.CODE> = ID.COMPANY
    R.REDO.LY.POINTS.TOT<REDO.PT.T.DEPT.CODE> = 1

RETURN

END
