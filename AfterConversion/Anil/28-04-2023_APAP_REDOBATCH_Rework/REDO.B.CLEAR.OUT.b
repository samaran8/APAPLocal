* @ValidationCode : MjotNDExOTMzMTkzOkNwMTI1MjoxNjgyNjU4MTI4NDAyOklUU1M6LTE6LTE6MDowOmZhbHNlOk4vQTpSMjFfQU1SLjA6LTE6LTE=
* @ValidationInfo : Timestamp         : 28 Apr 2023 10:32:08
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSS
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
*-----------------------------------------------------------------------------
* <Rating>-315</Rating>
*-----------------------------------------------------------------------------
$PACKAGE APAP.REDOBATCH
SUBROUTINE REDO.B.CLEAR.OUT(INCOME.PAR)
****************************************************************
*-------------------------------------------------------------------------
* Company Name  : ASOCIACION POPULAR DE AHORROS Y PRESTAMOS
* Developed By  : Arulprakasm P
* Program Name  : REDO.B.CLEAR.OUT
****-------------------------------------------------------------------------
* Description: This routine is a load routine used to load the variables
*
***----------------------------------------------------------
* Linked with:
* In parameter :
* out parameter : None
*------------------------------------------------------------------------
* MODIFICATION HISTORY
*--------------------------------------------
*   DATE              ODR                             DESCRIPTION
* 23.11.2010          ODR-2010-09-0251                 Initial Creation
* 30.07.2017          PACS00614535                     Fix for company access
* Date                  who                   Reference              
* 28-04-2023         CONVERSTION TOOL      R22 AUTO CONVERSTION - No Change
* 28-04-2023          ANIL KUMAR B         R22 MANUAL CONVERSTION -FM TO @FM AND VM TO @VM AND SM TO @SM
*------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
    $INSERT I_F.CUSTOMER
    $INSERT I_F.DATES
    $INSERT I_F.LOCKING
    $INSERT I_F.STMT.ENTRY
    $INSERT I_F.USER
    $INSERT I_F.AZ.ACCOUNT
    $INSERT I_F.AZ.PRODUCT.PARAMETER
    $INSERT I_F.T24.FUND.SERVICES
    $INSERT I_F.REDO.TFS.ALE
    $INSERT I_F.REDO.CLEARING.OUTWARD
    $INSERT I_F.REDO.APAP.CLEAR.PARAM
    $INSERT I_F.REDO.COLLECT.PARAM
    $INSERT I_F.REDO.OUT.CLEAR.FILE
    $INSERT I_F.REDO.MAPPING.TABLE
    $INSERT I_REDO.B.CLEAR.OUT.COMMON
    $INSERT I_F.REDO.H.ROUTING.NUMBER
    $INSERT I_F.MULTI.TRANSACTION.SERVICE
    $INSERT I_F.REDO.BATCH.FILE
    $INSERT I_F.REDO.TFS.PROCESS
    $INSERT I_F.AC.LOCKED.EVENTS
    $INSERT I_F.REDO.INTRANSIT.CHQ
    $INSERT I_F.REDO.TRANSACTION.CHAIN

    Y.TODAY =  TODAY
    R.OUT.CLEAR.FILE = ''
    R.REDO.BATCH.FILE = ''
    R.REDO.INTRANSIT.CHQ = ''
    VAR.TFS.PROCESS  = ''
    Y.FINAL.ALE.ID = ''
    GOSUB GET.MAP.DETAILS
    GOSUB READ.FILE

RETURN
*-------------------------------------------------------------------------
READ.FILE:

    CALL F.READ(FN.OUT.CLEAR.FILE,Y.TODAY,R.OUT.CLEAR.FILE,F.OUT.CLEAR.FILE,OUT.ERR)
    CALL F.READ(FN.APERTA,INCOME.PAR,R.APERTA,F.APERTA,APERTA.ERR)
    LOOP.CNTR = 1
    LOOP
        REMOVE VAR.FILE.ID FROM R.APERTA SETTING FILE.POS
    WHILE VAR.FILE.ID:FILE.POS

        GOSUB PROCESS
        LOOP.CNTR += 1
    REPEAT
    GOSUB POST.FINAL.ALE

RETURN
*--------------------------------------------------------------------------------
GET.MAP.DETAILS:
*--------------------------------------------------------------------------------
    LOCATE 'TASK' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING TASK.POS THEN
        TASK.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,TASK.POS>
        TASK.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,TASK.POS>
    END
    LOCATE 'DATE' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING DATE.POS THEN
        DATE.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,DATE.POS>
        DATE.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,DATE.POS>
    END
    LOCATE 'BATCH' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING BATCH.POS THEN
        BATCH.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,BATCH.POS>
        BATCH.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,BATCH.POS>
    END
    LOCATE 'DIN' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING DIN.POS THEN
        DIN.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,DIN.POS>
        DIN.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,DIN.POS>
    END
    LOCATE 'ACCOUNT' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING ACCOUNT.POS THEN
        ACCOUNT.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,ACCOUNT.POS>
        ACCOUNT.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,ACCOUNT.POS>
    END
    LOCATE 'SERIAL' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING SERIES.POS THEN
        SERIES.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,SERIES.POS>
        SERIES.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,SERIES.POS>
    END
    GOSUB GET.MAP.DETAILS1

RETURN
*--------------------------------------------------------------------------------
GET.MAP.DETAILS1:
*--------------------------------------------------------------------------------

    LOCATE 'ROUTE' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING ROUTE.POS THEN
        ROUTE.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,ROUTE.POS>
        ROUTE.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,ROUTE.POS>
    END
    LOCATE 'AMOUNT' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING AMOUNT.POS THEN
        AMOUNT.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,AMOUNT.POS>
        AMOUNT.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,AMOUNT.POS>
    END
    LOCATE 'CATEGORY' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING CATEGORY.POS THEN
        CATEGORY.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,CATEGORY.POS>
        CATEGORY.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,CATEGORY.POS>
    END
    LOCATE 'CREDIT.AMOUNT' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING CREDIT.AMOUNT.POS THEN
        CREDIT.AMOUNT.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,CREDIT.AMOUNT.POS>
        CREDIT.AMOUNT.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,CREDIT.AMOUNT.POS>
    END
    LOCATE 'DEBIT.AMOUNT' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING DEBIT.AMOUNT.POS THEN
        DEBIT.AMOUNT.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,DEBIT.AMOUNT.POS>
        DEBIT.AMOUNT.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,DEBIT.AMOUNT.POS>
    END
    LOCATE 'TXN.REFERENCE' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING FILLER.POS THEN
        FILLER.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,FILLER.POS>
        FILLER.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,FILLER.POS>
    END
    LOCATE 'CHECK.DIGIT' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING CHECK.DIGIT.POS THEN
        CHECK.DIGIT.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,CHECK.DIGIT.POS>
        CHECK.DIGIT.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,CHECK.DIGIT.POS>
    END
    LOCATE 'IMAGE.NAME' IN R.REDO.MAPPING.TABLE<MAP.TAB.FIELD.NAME,1> SETTING IMAGE.NAME.POS THEN
        IMAGE.NAME.STRT.POS = R.REDO.MAPPING.TABLE<MAP.TAB.START.POS,IMAGE.NAME.POS>
        IMAGE.NAME.LEN.POS = R.REDO.MAPPING.TABLE<MAP.TAB.LENGTH,IMAGE.NAME.POS>
    END
RETURN
*--------------------------------------------------------------------------------
PROCESS:
    TEMP.DATA = VAR.FILE.ID

    GOSUB GET.DETAILS
    GOSUB UPDATE.CLEARING.OUTWARD
RETURN

*-------------------------------------------------------------------------------
READ.LOCKING:

    R.LOCKING   = ''
    LOCKING.ERR = ''
    F.LOCKING.VAL = F.LOCKING
    Y.LOCKING.ID = "REDO.CLEAR.OUT"
    CALL F.READ(FN.LOCKING,Y.LOCKING.ID,R.LOCKING,F.LOCKING.VAR,LOCKING.ERR)
    IF R.LOCKING THEN
        Y.DATE = R.LOCKING<EB.LOK.REMARK>
        IF Y.DATE EQ TODAY THEN

            Y.SEQUENCE = R.LOCKING<EB.LOK.CONTENT>
            Y.SEQUENCE += 1
            Y.SEQUENCE=FMT(Y.SEQUENCE,'4"0"R')
            R.LOCKING<EB.LOK.CONTENT> = Y.SEQUENCE
            GOSUB WRITE.TO.LOCKING
        END ELSE
            GOSUB FIRST.NEW.ID
        END

    END ELSE
        GOSUB FIRST.NEW.ID
    END
RETURN

*------------------------------------------------------------------------------
FIRST.NEW.ID:

    R.LOCKING<EB.LOK.REMARK> = TODAY
    R.LOCKING<EB.LOK.CONTENT> = '1'
    Y.SEQUENCE = 1
    Y.SEQUENCE=FMT(Y.SEQUENCE,'4"0"R')
    GOSUB WRITE.TO.LOCKING

RETURN
*--------------------------------------------------------------------------
WRITE.TO.LOCKING:

    CALL F.WRITE(FN.LOCKING,Y.LOCKING.ID,R.LOCKING)

RETURN
*-------------------------------------------------------------------------
GET.DETAILS:
*Fetching the datas from the file record

    Y.CLEARING.ARR = '' ;    ROUTE.VAL = ''  ; TASK.VAL = '' ; TRANS.DATE.VAL = '' ; VAL.DATE = ''
    VAL.YEAR = ''   ; LOTE.VAL = '' ; DIN.VAL = ''        ; AMOUNT.VAL = ''
    AMOUNT.VAL = '' ; VAL.CHEQUE.NO = '' ; CATEGORY.VAL= '' ; CREDIT.VAL= ''
    DEBIT.VAL =     '' ; CHECK.DIGIT = '' ; CALCULATED.FORWARD = ''
    AMOUNT.VAL = '' ; CATEGORY.VAL = '' ; PRIMARY.ACCOUNT = ''
    VAR.CURRENCY = '' ; CHECK.DIGIT = '';Y.HEADER = ''
* TFS.REFERENCE.ID = ''
*    TFS.REFERENCE = ''
    TELLER.ID = '' ; IMAGE.VAL = '' ; CO.CODE = ''
*    ACCT.OFF.VAL = '';CUSTOMER.VAL = '' ; PROD.CATEGORY = '' ; Y.CURRENCY = ''
    PRIMARY.ACCOUNT = '' ; AUTHORISER = '' ; CO.CODE = '' ; AUTHORISER = ''
    VALUE.DATE = '' ; TELLER.ID = '' ;  VAR.CURRENCY = '' ; Y.ID = ''
    REDO.CLEARING.OUTWARD.ID = '' ; R.REDO.CLEARING.OUTWARD = ''
    CALCULATED.FORWARD = '';DRAWER.ACCOUNT.VAL = ''

    DEPOSIT.FLAG = ""

    ROUTE.VAL = TEMP.DATA[ROUTE.STRT.POS,ROUTE.LEN.POS]
    ROUTE.VAL = TRIM(ROUTE.VAL,0,"L")

    TASK.VAL = TEMP.DATA[TASK.STRT.POS,TASK.LEN.POS]
    TRANS.DATE.VAL = TEMP.DATA[DATE.STRT.POS,DATE.LEN.POS]
    VAL.DATE = TRANS.DATE.VAL[1,2]
    VAL.MONTH = TRANS.DATE.VAL[3,2]
    VAL.YEAR = TRANS.DATE.VAL[5,4]
    TRANS.DATE.VAL = VAL.YEAR:VAL.MONTH:VAL.DATE

    GOSUB GET.DETAILS2
    GOSUB NEXT.FETCH.VALUE

RETURN
*------------------------------------------------------
GET.DETAILS2:
*-------------

    LOTE.VAL = TEMP.DATA[BATCH.STRT.POS,BATCH.LEN.POS]
    LOTE.VAL = TRIM(LOTE.VAL,0,"L")

    DIN.VAL = TEMP.DATA[DIN.STRT.POS,DIN.LEN.POS]
    DIN.VAL = TRIM(DIN.VAL,0,"L")

    DRAWER.ACCOUNT.VAL = TEMP.DATA[ACCOUNT.STRT.POS,ACCOUNT.LEN.POS]
    DRAWER.ACCOUNT.VAL = TRIM(DRAWER.ACCOUNT.VAL,0,"L")

    GOSUB UPDATE.BATCH.LIVE

    AMOUNT.VAL = TEMP.DATA[AMOUNT.STRT.POS,AMOUNT.LEN.POS]
*PACS00101259-S
    Y.DECIMAL = AMOUNT.VAL[14,2]
    Y.FRONT   = AMOUNT.VAL[1,13]
    Y.TRIMS   = TRIM(Y.FRONT,0,"L")
    AMOUNT.VAL = Y.TRIMS:'.':Y.DECIMAL
*PACS00101259-E

    VAL.CHEQUE.NO = TEMP.DATA[SERIES.STRT.POS,SERIES.LEN.POS]
    VAL.CHEQUE.NO = TRIM(VAL.CHEQUE.NO,0,"L")

    CATEGORY.VAL = TEMP.DATA[CATEGORY.STRT.POS,CATEGORY.LEN.POS]
    CATEGORY.VAL = TRIM(CATEGORY.VAL,0,"L")

    CREDIT.VAL = TEMP.DATA[CREDIT.AMOUNT.STRT.POS,CREDIT.AMOUNT.LEN.POS]
    CREDIT.VAL = TRIM(CREDIT.VAL,0,"L")

    DEBIT.VAL = TEMP.DATA[DEBIT.AMOUNT.STRT.POS,DEBIT.AMOUNT.LEN.POS]
    DEBIT.VAL = TRIM(DEBIT.VAL,0,"L")

    CHECK.DIGIT = TEMP.DATA[CHECK.DIGIT.STRT.POS,CHECK.DIGIT.LEN.POS]
    CHECK.DIGIT = TRIM(CHECK.DIGIT,0,"L")

RETURN
*------------------------------------------------------
UPDATE.BATCH.LIVE:

    R.REDO.BATCH.FILE<BAT.FILE.DATE> = TODAY
    CALL F.WRITE(FN.REDO.BATCH.FILE,LOTE.VAL,R.REDO.BATCH.FILE)

RETURN
*-----------------------------------------------------------
NEXT.FETCH.VALUE:

    Y.ADJUST = ''
    IMAGE.VAL = TEMP.DATA[IMAGE.NAME.STRT.POS,IMAGE.NAME.LEN.POS]
    IMAGE.VAL = TRIM(IMAGE.VAL,0,"L")
    LOCATE CATEGORY.VAL IN Y.OUT.CAT.VAL SETTING HEAD.POS THEN
        VAR.CURRENCY = Y.OUT.CCY.TYPE<HEAD.POS>
        GOSUB PERFORM.CASE.OP

    END
RETURN
*------------------------------------------------------------------------------------
PERFORM.CASE.OP:
*----------------

    BEGIN CASE
        CASE Y.OUT.DOC.TYPE<HEAD.POS> EQ 'HEADER' OR Y.OUT.DOC.TYPE<HEAD.POS> EQ 'DEPOSIT' OR Y.OUT.DOC.TYPE<HEAD.POS> EQ 'PAYMENT'
            GOSUB HEADER.OPERATIONS

        CASE Y.OUT.DOC.TYPE<HEAD.POS> EQ 'ADJUSTMENT'
            Y.ADJUST = ''
            Y.ID = 'ADJUST-':DRAWER.ACCOUNT.VAL
            REDO.CLEARING.OUTWARD.ID = Y.ID
            TOTAL.CHQ = DEBIT.VAL
            IF VAR.CURRENCY NE LCCY THEN
                LOCATE VAR.CURRENCY IN CCY.OUT.SETTLEMENT<1,1> SETTING SET.POS THEN
                    OUT.SETTLEMENT = ACCT.SETTLEMENT<1,SET.POS>
                END
            END
            GOSUB TFS.PROCESS
            GOSUB CALC.EXPOSURE.DATE
            IF AMOUNT.VAL THEN
                GOSUB RAISING.ENTRY
            END
            GOSUB LOCK.ACCOUNT
            Y.ADJUST = ''
        CASE 1
            GOSUB CHEQUE.OPERATION
    END CASE

RETURN
*------------------------------------------------------------------------------------
HEADER.OPERATIONS:
*------------------------------------------------------------------------------------
    Y.PREVIOUS.HEADER.TYPE = Y.OUT.DOC.TYPE<HEAD.POS>
    ACCOUNT.VAL = TEMP.DATA[ACCOUNT.STRT.POS,ACCOUNT.LEN.POS]
    ACCOUNT.VAL = TRIM(ACCOUNT.VAL,0,"L")
    TFS.REFERENCE = TEMP.DATA[FILLER.STRT.POS,FILLER.LEN.POS]
    TT.REF = TEMP.DATA[FILLER.STRT.POS,FILLER.LEN.POS]
    TFS.REFERENCE = TFS.REFERENCE[2,11]
    TFS.REFERENCE.ID = "T24FS":TFS.REFERENCE
    IF ACCOUNT.VAL THEN
        CALL F.READ(FN.ACCOUNT,ACCOUNT.VAL,R.ACCOUNT,F.ACCOUNT,ACCT.ERR)
        IF R.ACCOUNT THEN
            ACCT.OFF.VAL = R.ACCOUNT<AC.ACCOUNT.OFFICER>
            CUSTOMER.VAL = R.ACCOUNT<AC.CUSTOMER>
            PROD.CATEGORY = R.ACCOUNT<AC.CATEGORY>
            Y.CURRENCY = R.ACCOUNT<AC.CURRENCY>
            Y.HEADER = 1
        END
    END
    GOSUB READ.LOCKING
    Y.ID = 'HEADER-':ROUTE.VAL:"-":Y.SEQUENCE
    Y.VAR.SEQUENCE = Y.SEQUENCE
    REDO.CLEARING.OUTWARD.ID = Y.ID
    TOTAL.CHQ = DEBIT.VAL
RETURN
*---------------------------------------------------------------------
CHEQUE.OPERATION:
*---------------------------------------------------------------------
    IF Y.PREVIOUS.HEADER.TYPE EQ 'PAYMENT' THEN
        Y.ID = DRAWER.ACCOUNT.VAL:'-':VAL.CHEQUE.NO
        REDO.CLEARING.OUTWARD.ID = Y.ID
        Y.HEADER = 1
        DEPOSIT.FLAG = 1
        Y.UNIV.CLEAR.ACC = R.REDO.APAP.CLEAR.PARAM<CLEAR.PARAM.UNIV.CLEAR.ACCT>
        VAR.CURRENCY = LCCY   ;* Payments are in Local Currency only.
        TFS.REFERENCE.ID = 'PAYMENT'
        Y.ENT.REF.ID = 'PAGO'
        CALL REDO.APAP.ACH.MIRROR.ACCT.ENT(Y.UNIV.CLEAR.ACC,AMOUNT.VAL,VAR.CURRENCY, Y.ENT.REF.ID)
    END ELSE
        Y.ID = DRAWER.ACCOUNT.VAL:'-':VAL.CHEQUE.NO
        TOTAL.CHQ = DEBIT.VAL
        REDO.CLEARING.OUTWARD.ID = Y.ID
        GOSUB TFS.PROCESS
        GOSUB CALC.EXPOSURE.DATE
        GOSUB LOCK.ACCOUNT
        GOSUB UPDATE.LIVE.TABLE
        DEPOSIT.FLAG = 1
*GOSUB TT.PROCESS
    END

RETURN
*------------------------------------------------------------------------------------
TFS.PROCESS:

*    TFS.REFERENCE.ID = "T24FS":TFS.REFERENCE
    CALL F.READ(FN.TFS,TFS.REFERENCE.ID,R.TFS,F.TFS,TFS.ERR)
    IF R.TFS THEN
        PRIMARY.ACCOUNT = R.TFS<TFS.PRIMARY.ACCOUNT>
        AUTHORISER = R.TFS<TFS.AUTHORISER>
*CO.CODE = R.TFS<TFS.CO.CODE>
        Y.RET.CO.CODE = ''
        CALL REDO.GET.ACC.CO.CODE(PRIMARY.ACCOUNT,Y.RET.CO.CODE)
        IF Y.RET.CO.CODE THEN
            CO.CODE = Y.RET.CO.CODE
        END ELSE
            CO.CODE = ID.COMPANY
        END
        AUTHORISER = FIELD(AUTHORISER,"_",2)
        VALUE.DATE = R.TFS<TFS.CR.VALUE.DATE>
        TXN.DATE.TIME = R.TFS<TFS.DATE.TIME>
        TXN.DATE.TIME = TXN.DATE.TIME[7,4]
        TXN.EXP.DATE = R.TFS<TFS.CR.EXP.DATE>
        VAR.TFS.PROCESS = R.TFS<TFS.LOCAL.REF,Y.TT.PROCESS.POS>
        VAR.AZ.ACCOUNT = R.TFS<TFS.LOCAL.REF,Y.AZ.REF.TFS>
        R.AZ.ACCT = ''
        CALL F.READ(FN.AZ.ACCOUNT,VAR.AZ.ACCOUNT,R.AZ.ACCT,F.AZ.ACCOUNT,AZ.ERR)
    END

    IF VAR.CURRENCY EQ LCCY THEN
        Y.HOURS = CUTOFF.TIME[1,2]
        Y.MINS =  CUTOFF.TIME[4,2]
        Y.TIME.CHECK = Y.HOURS:Y.MINS
        Y.TRANS.DATE.VAL = TRANS.DATE.VAL
        IF TXN.DATE.TIME GT Y.TIME.CHECK THEN
            CALC.FWD.DAYS1 = 1
            CALL CDT("",Y.TRANS.DATE.VAL,"+":CALC.FWD.DAYS1:"W")
        END
    END

    IF VAR.CURRENCY NE LCCY THEN
        Y.HOURS = CUTOFF.TIME.FCY[1,2]
        Y.MINS = CUTOFF.TIME.FCY[4,2]
        Y.TIME.CHECK = Y.HOURS:Y.MINS
        IF TXN.DATE.TIME GT Y.TIME.CHECK THEN
            CALC.FWD.DAYS1 = 1
            CALL CDT("",TRANS.DATE.VAL,"+":CALC.FWD.DAYS1:"W")
        END
    END

    CALL F.READ(FN.TELLER.USER,AUTHORISER,R.TELLER.USER,F.TELLER.USER,USER.ERR)
    IF R.TELLER.USER THEN
        TELLER.ID = R.TELLER.USER
    END

    CALL F.READ(FN.ACCOUNT,PRIMARY.ACCOUNT,R.ACCOUNT,F.ACCOUNT,ACCT.ERR)
    IF R.ACCOUNT THEN
        PRIM.CUSTOMER = R.ACCOUNT<AC.CUSTOMER>
    END

    CALL F.READ(FN.CUSTOMER,PRIM.CUSTOMER,R.CUSTOMER,F.CUSTOMER,CUST.ERR)
    IF R.CUSTOMER THEN
        L.CU.TIPO.CL = R.CUSTOMER<EB.CUS.LOCAL.REF,Y.LR.POS>

    END

RETURN
*------------------------------------------------------------------------------------
UPDATE.LIVE.TABLE:


    R.OUT.CLEAR.FILE<REDO.OUT.CLEAR.FILE.CLEARING.OUT.ID,-1> = REDO.CLEARING.OUTWARD.ID
    R.OUT.CLEAR.FILE<REDO.OUT.CLEAR.FILE.TFS.ID,-1> = TFS.REFERENCE.ID
    Y.TODAY = TODAY
    CALL F.WRITE(FN.OUT.CLEAR.FILE,Y.TODAY,R.OUT.CLEAR.FILE)

    CALL F.READ(FN.REDO.INTRANSIT.CHQ,ACCOUNT.VAL,R.REDO.INTRANSIT.CHQ,F.REDO.INTRANSIT.CHQ,CHQ.ERR)
    IF R.REDO.INTRANSIT.CHQ THEN
        R.REDO.INTRANSIT.CHQ<TRAN.CHQ.TFS.REFERENCE,-1> = TFS.REFERENCE.ID
        R.REDO.INTRANSIT.CHQ<TRAN.CHQ.CLEAR.OUT.ID,-1> = REDO.CLEARING.OUTWARD.ID
        R.REDO.INTRANSIT.CHQ<TRAN.CHQ.CHQ.NUMBER,-1> = VAL.CHEQUE.NO
        R.REDO.INTRANSIT.CHQ<TRAN.CHQ.CHQ.AMOUNT,-1> = AMOUNT.VAL
        R.REDO.INTRANSIT.CHQ<TRAN.CHQ.EXPOSURE.DATE,-1> = CALCULATED.FORWARD
    END ELSE
        R.REDO.INTRANSIT.CHQ<TRAN.CHQ.TFS.REFERENCE> = TFS.REFERENCE.ID
        R.REDO.INTRANSIT.CHQ<TRAN.CHQ.CLEAR.OUT.ID> = REDO.CLEARING.OUTWARD.ID
        R.REDO.INTRANSIT.CHQ<TRAN.CHQ.CHQ.NUMBER> = VAL.CHEQUE.NO
        R.REDO.INTRANSIT.CHQ<TRAN.CHQ.CHQ.AMOUNT> = AMOUNT.VAL
        R.REDO.INTRANSIT.CHQ<TRAN.CHQ.EXPOSURE.DATE> = CALCULATED.FORWARD

    END
    CALL F.WRITE(FN.REDO.INTRANSIT.CHQ,ACCOUNT.VAL,R.REDO.INTRANSIT.CHQ)

RETURN
*-----------------------------------------------------------------------------------
UPDATE.CLEARING.OUTWARD:
*-----------------------------------------------------------------------------------
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.DIN> = DIN.VAL
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.CLEARING.CODE> = TASK.VAL
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.DATE> =  TODAY
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.BATCH> = LOTE.VAL

    IF DRAWER.ACCOUNT.VAL THEN
        R.REDO.CLEARING.OUTWARD<CLEAR.OUT.DRAWER.ACCT> = DRAWER.ACCOUNT.VAL
    END

    IF VAL.CHEQUE.NO THEN
        R.REDO.CLEARING.OUTWARD<CLEAR.OUT.CHEQUE.NO> = VAL.CHEQUE.NO
    END

    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.ROUTE.NO> = ROUTE.VAL

    IF R.TFS<TFS.RECORD.STATUS> NE 'INAO' THEN
        R.REDO.CLEARING.OUTWARD<CLEAR.OUT.EXPOSURE.DATE> = CALCULATED.FORWARD
    END

    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.AMOUNT> = AMOUNT.VAL
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.CATEGORY> = CATEGORY.VAL
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.ACCOUNT> = PRIMARY.ACCOUNT
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.CURRENCY> = VAR.CURRENCY
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.CHECK.DIGIT> = CHECK.DIGIT
    IF TT.REF[1,1] EQ 'T' THEN
        R.REDO.CLEARING.OUTWARD<CLEAR.OUT.TFS.REFERENCE> =  'T':TT.REF
    END ELSE
        R.REDO.CLEARING.OUTWARD<CLEAR.OUT.TFS.REFERENCE> =  TFS.REFERENCE.ID
    END

    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.TELLER.ID> = TELLER.ID
    IF DEPOSIT.FLAG = 1 THEN
        R.REDO.CLEARING.OUTWARD<CLEAR.OUT.CHQ.STATUS> = "DEPOSITED"
        R.REDO.CLEARING.OUTWARD<CLEAR.OUT.BATCH.RELEASED> = "N"
    END
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.TXN.REFERENCE> = TFS.REFERENCE
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.IMAGE.ID> = IMAGE.VAL
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.NO.OF.CHEQUE> = TOTAL.CHQ
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.COMP.CODE> = CO.CODE
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.SEQUENCE> = Y.VAR.SEQUENCE
    CON.DATE = OCONV(DATE(),"D-")
    DATE.TIME = CON.DATE[9,2]:CON.DATE[1,2]:CON.DATE[4,2]:TIME.STAMP[1,2]:TIME.STAMP[4,2]
    TEMPTIME = OCONV(TIME(),"MTS")
    TEMPTIME = TEMPTIME[1,5]
    CONVERT ':' TO '' IN TEMPTIME
    CHECK.DATE = DATE()
    DATE.TIME = OCONV(CHECK.DATE,"DY2"):FMT(OCONV(CHECK.DATE,"DM"),"R%2"):FMT(OCONV(CHECK.DATE,"DD"),"R%2"):TEMPTIME
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.DATE.TIME>= DATE.TIME
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.AUTHORISER> = TNO:'_':OPERATOR
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.INPUTTER> = TNO:'_':OPERATOR
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.CURR.NO> = 1
    R.REDO.CLEARING.OUTWARD<CLEAR.OUT.CO.CODE> =ID.COMPANY
    IF NOT(Y.HEADER) THEN
        Y.REDO.TFS.ALE.ID='T24FS':TFS.REFERENCE
        Y.RET = ''
        CALL F.READU(FN.REDO.TFS.ALE,Y.REDO.TFS.ALE.ID,R.REDO.TFS.ALE,F.REDO.TFS.ALE,ERR,Y.RET)
        R.REDO.TFS.ALE<TFS.ALE.REDO.CLEAR.OUT,-1>=REDO.CLEARING.OUTWARD.ID
        Y.ALE.ID = R.REDO.TFS.ALE<TFS.ALE.ALE>
        CALL F.WRITE(FN.REDO.TFS.ALE,Y.REDO.TFS.ALE.ID,R.REDO.TFS.ALE)
*****
    END
    CALL F.WRITE(FN.REDO.CLEARING.OUTWARD,REDO.CLEARING.OUTWARD.ID,R.REDO.CLEARING.OUTWARD)

    CALL F.RELEASE(FN.REDO.TFS.ALE,Y.REDO.TFS.ALE.ID,F.REDO.TFS.ALE)

RETURN

*--------------------------------------------------------------------------------
CALC.EXPOSURE.DATE:
    CALL F.READ(FN.REDO.OTH.BANK.NAME,ROUTE.VAL,R.REDO.OTH.BANK.NAME,F.REDO.OTH.BANK.NAME,REDO.OTH.ERR)
    ROUTE.CODE = FIELD(R.REDO.OTH.BANK.NAME,'*',2)
    CALL F.READ(FN.REDO.H.ROUTING.NUMBER,ROUTE.CODE,R.REDO.H.ROUTING.NUMBER,F.REDO.H.ROUTING.NUMBER,REDO.ROUTING.ERR)
    IF R.REDO.H.ROUTING.NUMBER THEN
        Y.APAP = R.REDO.H.ROUTING.NUMBER<REDO.ROUT.APAP>
    END
    IF VAR.TFS.PROCESS[1,5] EQ 'T24FS' THEN
        CALL F.READ(FN.REDO.TFS.PROCESS,VAR.TFS.PROCESS,R.REDO.TFS.PROCESS,F.REDO.TFS.PROCESS,TFS.PROCESS.ERR)
        VAR.PRIMARY.ACCT = R.REDO.TFS.PROCESS<TFS.PRO.PRIMARY.ACCT>
        CALL F.READ(FN.AZ.ACCOUNT,VAR.PRIMARY.ACCT,R.AZ.ACCOUNT,F.AZ.ACCOUNT,AZ.ERR)
        VAR.APP.ID = R.AZ.ACCOUNT<AZ.ALL.IN.ONE.PRODUCT>
        CALL F.READ(FN.APP,VAR.APP.ID,R.APP,F.APP,APP.ERR)
        CALC.FWD.DAYS = R.APP<AZ.APP.LOCAL.REF,Y.AZP.TRAN.DAYS.POS>
    END ELSE
        IF VAR.CURRENCY EQ LCCY THEN
            IF Y.APAP EQ 'YES' THEN
                GOSUB LCY.CALCULATION
            END ELSE
                GOSUB LCY.NON.APAP.CALC
            END
        END ELSE
            GOSUB FCY.CALCULATION
        END
    END
    PASS.VAL.DATE = TRANS.DATE.VAL
    IF PASS.VAL.DATE AND CALC.FWD.DAYS THEN
        CALL CDT("",PASS.VAL.DATE,"+":CALC.FWD.DAYS:"W")
    END

    CALCULATED.FORWARD = PASS.VAL.DATE

RETURN
*----------------------------------------------------------------------
LOCK.ACCOUNT:

    Y.ACCOUNT.NO = PRIMARY.ACCOUNT
    Y.LOCKED.AMOUNT = AMOUNT.VAL
    DESCRIPTION = REDO.CLEARING.OUTWARD.ID
    FROM.DATE = TODAY
    TO.DATE = CALCULATED.FORWARD
    IF PRIMARY.ACCOUNT AND NOT(R.AZ.ACCT) THEN
        GOSUB PROCESS.POST.ALE
    END

RETURN
*-------------------------------------------------------------------------------------
PROCESS.POST.ALE:
*-------------------------------------------------------------------------------------


    IF Y.ADJUST NE 'DEBIT' AND Y.ADJUST NE 'CREDIT' THEN
        OFS.STR = 'AC.LOCKED.EVENTS,REDO/I/PROCESS,/':CO.CODE:',,ACCOUNT.NUMBER:1:1:=':Y.ACCOUNT.NO:',LOCKED.AMOUNT:1:1:=':Y.LOCKED.AMOUNT:',DESCRIPTION:1:1:=':DESCRIPTION:',FROM.DATE:1:1=':FROM.DATE:',TO.DATE:1:1=':TO.DATE:
        OFS.SRC= 'REDO.CHQ.ISSUE'
        OFS.MSG.ID = ''
        OPTIONS = ''
        CALL OFS.POST.MESSAGE(OFS.STR,OFS.MSG.ID,OFS.SRC,OPTIONS)
    END

    Y.REDO.TFS.ALE.ID='T24FS':TFS.REFERENCE
    CALL F.READ(FN.REDO.TFS.ALE,Y.REDO.TFS.ALE.ID,R.REDO.TFS.ALE,F.REDO.TFS.ALE,ERR)
    Y.ALE.AMOUNT  = R.REDO.TFS.ALE<TFS.ALE.ALE.AMOUNT>
    Y.ALE.ID = R.REDO.TFS.ALE<TFS.ALE.ALE>
    IF Y.ADJUST EQ 'CREDIT' THEN        ;* In case of credit adjustment then we need to add up.
        Y.TOTAL.AMOUNT = Y.ALE.AMOUNT + Y.LOCKED.AMOUNT
    END ELSE
        Y.TOTAL.AMOUNT = Y.ALE.AMOUNT - Y.LOCKED.AMOUNT
    END
    R.REDO.TFS.ALE<TFS.ALE.ALE.AMOUNT> = Y.TOTAL.AMOUNT
    CALL F.WRITE(FN.REDO.TFS.ALE,Y.REDO.TFS.ALE.ID,R.REDO.TFS.ALE)
    CALL F.READ(FN.AC.LOCKED.EVENTS,Y.ALE.ID,R.AC.LOCKED.EVENTS,F.AC.LOCKED.EVENTS,ALE.ERR)
    LOCATE Y.REDO.TFS.ALE.ID IN Y.FINAL.ALE.ID<1> SETTING POS ELSE
        Y.FINAL.ALE.ID<-1> = Y.REDO.TFS.ALE.ID
    END

    Y.UNIV.CLEAR.ACC = R.REDO.APAP.CLEAR.PARAM<CLEAR.PARAM.UNIV.CLEAR.ACCT>
    IF Y.OUT.DOC.TYPE<HEAD.POS> NE 'ADJUSTMENT' THEN
        CALL REDO.APAP.ACH.MIRROR.ACCT.ENT(Y.UNIV.CLEAR.ACC,AMOUNT.VAL,VAR.CURRENCY,TFS.REFERENCE.ID)
    END

    IF Y.TOTAL.AMOUNT EQ 0 THEN
        APP.NAME = 'AC.LOCKED.EVENTS'
        OFSFUNCT = 'R'
        PROCESS = 'PROCESS'
        OFSVERSION = 'AC.LOCKED.EVENTS,REDO'
        Y.GTSMODE = ''
        NO.OF.AUTH = '0'
        TRANSACTION.ID = Y.ALE.ID
        OFSRECORD = ''
        OFS.MSG.ID =''
        OFS.SOURCE.ID = 'REDO.CHQ.ISSUE'
        OFS.ERR = ''
        R.AC.LOCKED.EVENTS<AC.LCK.LOCKED.AMOUNT> = Y.ALE.AMOUNT
        CALL LOAD.COMPANY(CO.CODE)
        CALL OFS.BUILD.RECORD(APP.NAME,OFSFUNCT,PROCESS,OFSVERSION,Y.GTSMODE,NO.OF.AUTH,TRANSACTION.ID,R.AC.LOCKED.EVENTS,OFSRECORD)
        CALL OFS.POST.MESSAGE(OFSRECORD,OFS.MSG.ID,OFS.SOURCE.ID,OFS.ERR)
    END
    Y.ALE.AMOUNT = '';Y.TOTAL.AMOUNT =''

RETURN
*-------------------------------------------------------------------------------------
LCY.NON.APAP.CALC:
*-------------------------------------------------------------------------------------
    LOWER.AMOUNT = PARAM.AMOUNT<1,2>
    HIGHER.AMOUNT = PARAM.AMOUNT<1,2>
    IF AMOUNT.VAL LT LOWER.AMOUNT THEN
        CALC.FWD.DAYS = FORWARD.DAYS<1,2>
    END ELSE
        CALC.FWD.DAYS = FORWARD.DAYS<1,3>
    END

RETURN
*-----------------------------------------------------------------------------
LCY.CALCULATION:
*-----------------------------------------------------------------------------

    CHANGE @VM TO @FM IN BANK.CATEGORY  ;*R22 MANUAL CONVERSTION added @
    LOCATE "APAP" IN BANK.CATEGORY SETTING APAP.POS THEN
        CALC.FWD.DAYS = FORWARD.DAYS<1,APAP.POS>
    END

RETURN
*---------------------------------------------------------------------------------
FCY.CALCULATION:
*-----------------------------------------------------------------------------


    FETCH.CUST.TYPE = ''
    CHANGE @VM TO @FM IN LIST.CURRENCY ;*R22 MANUAL CONVERSTION added @

    LOCATE VAR.CURRENCY IN LIST.CURRENCY SETTING CURR.POS THEN

        FETCH.CUST.TYPE = CUST.TYPE<1,CURR.POS>
        FETCCH.TRANSIT.DAYS = IN.TRANS.DAYS<1,CURR.POS>

        CHANGE @SM TO @FM IN FETCH.CUST.TYPE  ;*R22 MANUAL CONVERSTION added @
        CHANGE @SM TO @FM IN FETCCH.TRANSIT.DAYS  ;*R22 MANUAL CONVERSTION added @
        LOCATE L.CU.TIPO.CL IN FETCH.CUST.TYPE SETTING TIPO.POS THEN
            CALC.FWD.DAYS = FETCCH.TRANSIT.DAYS<TIPO.POS>
        END
    END

RETURN
*-------------------------------------------------------------------------
RAISING.ENTRY:
**************
*Raising Debit Entry for Customer account by cheque amount
    STMT.ENTRY.REC = ''

    R.STMT.ARR = ''

    IF CATEGORY.VAL EQ 316 OR CATEGORY.VAL EQ 651 OR CATEGORY.VAL EQ 751 THEN
        Y.ADJUST = 'CREDIT'
        Y.ACCOUNT.NO = OUT.SETTLEMENT
        R.ACCOUNT = ''
        CALL F.READ(FN.ACCOUNT,Y.ACCOUNT.NO,R.ACCOUNT,F.ACCOUNT,ACCT.ERR)
        ENTRY.CUSTOMER = R.ACCOUNT<AC.CUSTOMER>

        Y.CHEQUE.AMT = -1 * AMOUNT.VAL
        Y.TXN.CODE = ADJUST.DR.CODE

        GOSUB GET.STMT.DETAILS

        Y.ACCOUNT.NO = ACCOUNT.VAL
        Y.CHEQUE.AMT = AMOUNT.VAL
        Y.TXN.CODE = ADJUST.CR.CODE

        GOSUB GET.STMT.DETAILS

    END

    IF CATEGORY.VAL EQ 314 OR CATEGORY.VAL EQ 641 OR CATEGORY.VAL EQ 741 THEN
        Y.ADJUST = 'DEBIT'
        Y.ACCOUNT.NO = ACCOUNT.VAL
        R.ACCOUNT = ''
        CALL F.READ(FN.ACCOUNT,Y.ACCOUNT.NO,R.ACCOUNT,F.ACCOUNT,ACCT.ERR)
        ENTRY.CUSTOMER = R.ACCOUNT<AC.CUSTOMER>

        Y.CHEQUE.AMT = -1 * AMOUNT.VAL
        Y.TXN.CODE = ADJUST.DR.CODE

        GOSUB GET.STMT.DETAILS

        Y.ACCOUNT.NO =  OUT.SETTLEMENT
        Y.CHEQUE.AMT = AMOUNT.VAL
        Y.TXN.CODE = ADJUST.CR.CODE

        GOSUB GET.STMT.DETAILS
    END
    V = 11
    CALL EB.ACCOUNTING("AC","SAO",Y.CLEARING.ARR,'')
RETURN
*------------------------------------------------------------------------------------------
GET.STMT.DETAILS:
*****************
    STMT.ENTRY.REC = ''

    STMT.ENTRY.REC<AC.STE.ACCOUNT.NUMBER> = Y.ACCOUNT.NO
    IF Y.CURRENCY EQ LCCY THEN
        STMT.ENTRY.REC<AC.STE.AMOUNT.LCY> = Y.CHEQUE.AMT
    END ELSE
        STMT.ENTRY.REC<AC.STE.AMOUNT.FCY> = Y.CHEQUE.AMT
    END
    STMT.ENTRY.REC<AC.STE.TRANSACTION.CODE>  = Y.TXN.CODE
    STMT.ENTRY.REC<AC.STE.THEIR.REFERENCE>   = REDO.CLEARING.OUTWARD.ID
    STMT.ENTRY.REC<AC.STE.CUSTOMER.ID>       = ENTRY.CUSTOMER
    STMT.ENTRY.REC<AC.STE.ACCOUNT.OFFICER>   = ACCT.OFF.VAL
    STMT.ENTRY.REC<AC.STE.PRODUCT.CATEGORY>  = PROD.CATEGORY
    STMT.ENTRY.REC<AC.STE.VALUE.DATE>        = TRANS.DATE.VAL
    STMT.ENTRY.REC<AC.STE.CURRENCY>          = Y.CURRENCY
    STMT.ENTRY.REC<AC.STE.POSITION.TYPE>     = 'TR'
    STMT.ENTRY.REC<AC.STE.OUR.REFERENCE>     = REDO.CLEARING.OUTWARD.ID
    STMT.ENTRY.REC<AC.STE.EXPOSURE.DATE>     = TRANS.DATE.VAL
    STMT.ENTRY.REC<AC.STE.CURRENCY.MARKET>   = '1'
    STMT.ENTRY.REC<AC.STE.DEPARTMENT.CODE>   = R.USER<EB.USE.DEPARTMENT.CODE>
    STMT.ENTRY.REC<AC.STE.TRANS.REFERENCE>   = REDO.CLEARING.OUTWARD.ID
    STMT.ENTRY.REC<AC.STE.SYSTEM.ID>         = 'AC'
    STMT.ENTRY.REC<AC.STE.BOOKING.DATE>      = TRANS.DATE.VAL
    STMT.ENTRY.REC<AC.STE.COMPANY.CODE>      = ID.COMPANY
    Y.CLEARING.ARR<-1> = LOWER(STMT.ENTRY.REC)
RETURN
*------------------------------------------------------------------------------------------
POST.FINAL.ALE:
*------------------------------------------------------------------------------------------
* This has been added since we had problem in Processing OFS. since we posted diff ofs message for same ALE
    Y.LOOP.CNT = 1
    Y.TOTAL.CNT = DCOUNT(Y.FINAL.ALE.ID,@FM)  ;*R22 MANUAL CONVERSTION added @
    LOOP
    WHILE Y.LOOP.CNT LE Y.TOTAL.CNT
        GOSUB SUB.POST.ALE.PARA
        Y.LOOP.CNT++
    REPEAT

RETURN
*--------------------------------------------------------------------------------------------
SUB.POST.ALE.PARA:
*------------------

    Y.ID = Y.FINAL.ALE.ID<Y.LOOP.CNT>
    CALL F.READ(FN.REDO.TFS.ALE,Y.ID,R.REDO.TFS.ALE,F.REDO.TFS.ALE,ERR)
    Y.ALE.AMOUNT  = R.REDO.TFS.ALE<TFS.ALE.ALE.AMOUNT>
    Y.ALE.ID      = R.REDO.TFS.ALE<TFS.ALE.ALE>
    IF Y.ALE.AMOUNT GT 0 THEN
        CALL F.READ(FN.AC.LOCKED.EVENTS,Y.ALE.ID,R.AC.LOCKED.EVENTS,F.AC.LOCKED.EVENTS,ALE.ERR)
        R.AC.LOCKED.EVENTS<AC.LCK.LOCKED.AMOUNT> = Y.ALE.AMOUNT
        APP.NAME    = 'AC.LOCKED.EVENTS'
        OFSFUNCT    = 'I'
        PROCESS     = 'PROCESS'
        OFSVERSION  = 'AC.LOCKED.EVENTS,REDO'
        Y.GTSMODE   = ''
        NO.OF.AUTH  = '0'
        TRANSACTION.ID = Y.ALE.ID
        OFSRECORD = ''
        OFS.MSG.ID =''
        OFS.SOURCE.ID = 'REDO.CHQ.ISSUE'
        OFS.ERR = ''
        IF CO.CODE THEN
            CALL LOAD.COMPANY(CO.CODE)
        END
        CALL OFS.BUILD.RECORD(APP.NAME,OFSFUNCT,PROCESS,OFSVERSION,Y.GTSMODE,NO.OF.AUTH,TRANSACTION.ID,R.AC.LOCKED.EVENTS,OFSRECORD)
        CALL OFS.POST.MESSAGE(OFSRECORD,OFS.MSG.ID,OFS.SOURCE.ID,OFS.ERR)
    END
RETURN
*-------------------------------------------------------------------------------------------
END
