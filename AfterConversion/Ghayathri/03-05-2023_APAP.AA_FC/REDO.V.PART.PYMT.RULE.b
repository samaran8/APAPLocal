* @ValidationCode : MjotMTUxNzA2Njg0NzpDcDEyNTI6MTY4MzExMTE0MzYyMjpoYWk6LTE6LTE6MDowOmZhbHNlOk4vQTpSMjFfQU1SLjA6LTE6LTE=
* @ValidationInfo : Timestamp         : 03 May 2023 16:22:23
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : hai
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
$PACKAGE APAP.AA;*MANUAL R22 CODE CONVERSTION
SUBROUTINE REDO.V.PART.PYMT.RULE
    
***********************************************************
*----------------------------------------------------------
* COMPANY NAME : APAP
* DEVELOPED BY : GANESH
* PROGRAM NAME : REDO.V.PART.PYMT.RULE
*----------------------------------------------------------


* DESCRIPTION : This routine is a validation routine attached
* to ACCOUNT.2 of TELLER,AA.PART.PYMNT & CREDIT.ACCOUNT.NO of FUNDS.TRANSFER,AA.PART.PYMT
* model bank version to do overpayment validations
*------------------------------------------------------------

*    LINKED WITH : TELLER & CREDIT.ACCOUNT.NO AS VALIDATION ROUTINE
*    IN PARAMETER: NONE
*    OUT PARAMETER: NONE

*----------------------------------------------------------------------
* Modification History :
*-----------------------
*DATE             WHO                    REFERENCE         DESCRIPTION
*31.05.2010      GANESH                  ODR-2010-08-0017  INITIAL CREATION
*-----------------------------------------------------------------------------------
* Modification History:
*
* DATE                 WHO                  REFERENCE                           DESCRIPTION
* 29/03/2023         SURESH             MANUAL R22 CODE CONVERSTION        Package Name added APAP.AA
* 29/03/2023         Conversion Tool     AUTO R22 CODE CONVERSTION          VAR2++ to VAR2 += 1,VM to @VM,FM to @FM
*-----------------------------------------------------------------------------------
*----------------------------------------------------------------------


*-------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.AA.ACCOUNT.DETAILS
    $INSERT I_F.TELLER
    $INSERT I_F.ACCOUNT
    $INSERT I_F.AA.TERM.AMOUNT
    $INSERT I_F.AA.BILL.DETAILS
    $INSERT I_AA.LOCAL.COMMON
    $INSERT I_F.AA.ARRANGEMENT.ACTIVITY
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.EB.CONTRACT.BALANCES
    $INSERT I_F.ACCT.ACTIVITY
    $INSERT I_AA.APP.COMMON
    $INSERT I_F.REDO.H.TT.CONCAT.FILE
    $INSERT I_F.REDO.H.FT.CONCAT.FILE

    GOSUB INIT
    GOSUB OPENFILES
    IF MESSAGE NE 'VAL' THEN
        GOSUB PROCESS
    END
RETURN

*-------------------------------------------------------------
INIT:
*Initialising
*-------------------------------------------------------------
    LOC.REF.APPLICATION='AA.PRD.DES.TERM.AMOUNT':@FM:'TELLER':@FM:'FUNDS.TRANSFER' ;*AUTO R22 CODE CONVERSION
    LOC.REF.FIELDS='L.AA.PART.ALLOW':@VM:'L.AA.PART.PCNT':@FM:'L.TT.PART.PCNT':@VM:'L.TT.NUM.PYMT':@VM:'L.TT.BIL.NUM':@VM:'L.TT.TAX.TYPE':@FM:'L.FT.PART.PCNT':@VM:'L.FT.NUM.PYMT':@VM:'L.FT.BILL.NUM':@VM:'L.FT.TAX.TYPE' ;*AUTO R22 CODE CONVERSION
    LOC.REF.POS=''
    EFF.DATE=TODAY
    PROP.CLASS='TERM.AMOUNT'
    PROPERTY=''
    R.Condition=''
    ERR.MSG=''
    VAL.LOC.BILL.NUM = ''
    VAR.PENALTY.AMT = 0
RETURN

*-------------------------------------------------------------
OPENFILES:
*Opening File
    FN.AA.ACCOUNT.DETAILS = 'F.AA.ACCOUNT.DETAILS'
    F.AA.ACCOUNT.DETAILS = ''
    CALL OPF(FN.AA.ACCOUNT.DETAILS,F.AA.ACCOUNT.DETAILS)

    FN.AA.BILL.DETAILS = 'F.AA.BILL.DETAILS'
    F.AA.BILL.DETAILS = ''
    CALL OPF(FN.AA.BILL.DETAILS,F.AA.BILL.DETAILS)

    FN.ACCOUNT = 'F.ACCOUNT'
    F.ACCOUNT =''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)

    FN.REDO.H.TT.CONCAT.FILE = 'F.REDO.H.TT.CONCAT.FILE'
    F.REDO.H.TT.CONCAT.FILE = ''
    CALL OPF(FN.REDO.H.TT.CONCAT.FILE,F.REDO.H.TT.CONCAT.FILE)

    FN.REDO.H.FT.CONCAT.FILE = 'F.REDO.H.FT.CONCAT.FILE'
    F.REDO.H.FT.CONCAT.FILE = ''
    CALL OPF(FN.REDO.H.FT.CONCAT.FILE,F.REDO.H.FT.CONCAT.FILE)

    FN.CONTRACT.BALANCES = 'F.EB.CONTRACT.BALANCES'
    F.CONTRACT.BALANCES = ''
    CALL OPF(FN.CONTRACT.BALANCES,F.CONTRACT.BALANCES)
RETURN
*-------------------------------------------------------------
PROCESS:
    CALL MULTI.GET.LOC.REF(LOC.REF.APPLICATION,LOC.REF.FIELDS,LOC.REF.POS)
    VAR.LOC.ALLOW.POS = LOC.REF.POS<1,1>
    VAR.LOC.PCNT.POS = LOC.REF.POS<1,2>
    VAR.TT.PART.PCNT = LOC.REF.POS<2,1>
    VAR.TT.NUM.PYMT = LOC.REF.POS<2,2>
    VAR.TT.BILL.NUM = LOC.REF.POS<2,3>
    VAR.TT.TAX.TYPE = LOC.REF.POS<2,4>
    VAR.FT.PART.PCNT = LOC.REF.POS<3,1>
    VAR.FT.NUM.PYMT = LOC.REF.POS<3,2>
    VAR.FT.BILL.NUM = LOC.REF.POS<3,3>
    VAR.FT.TAX.TYPE = LOC.REF.POS<3,4>
    IF APPLICATION EQ 'TELLER' THEN
        GOSUB TT.PROCESS
    END
    IF APPLICATION EQ 'FUNDS.TRANSFER' THEN
        GOSUB FT.PROCESS
    END
RETURN

*--------------
TT.PROCESS:

*Teller Process for checking the bills

    TEMP.ACT.ID = COMI
    CALL F.READ(FN.ACCOUNT,TEMP.ACT.ID,R.ACCOUNT,F.ACCOUNT,ACCT.ERR)
    VAR.ACCT.ID = R.ACCOUNT<AC.ARRANGEMENT.ID>
    CALL APAP.AA.redoCrrGetConditions(VAR.ACCT.ID,EFF.DATE,PROP.CLASS,PROPERTY,R.Condition,ERR.MSG)
    VAL.PART.ALLOW = R.Condition<AA.AMT.LOCAL.REF><1,VAR.LOC.ALLOW.POS>
    VAL.PART.PCNT = R.Condition<AA.AMT.LOCAL.REF><1,VAR.LOC.PCNT.POS>
    IF VAL.PART.ALLOW EQ 'YES' THEN
        GOSUB TT.CHECK.BILL
    END
RETURN

*-------------
FT.PROCESS:

*FT process for Checking the bills
    TEMP.ACT.ID = COMI
    CALL F.READ(FN.ACCOUNT,TEMP.ACT.ID,R.ACCOUNT,F.ACCOUNT,ACCT.ERR)
    VAR.ACCT.ID = R.ACCOUNT<AC.ARRANGEMENT.ID>
    CALL APAP.AA.redoCrrGetConditions(VAR.ACCT.ID,EFF.DATE,PROP.CLASS,PROPERTY,R.Condition,ERR.MSG)
    VAL.PART.ALLOW = R.Condition<AA.AMT.LOCAL.REF><1,VAR.LOC.ALLOW.POS>
    VAL.PART.PCNT = R.Condition<AA.AMT.LOCAL.REF><1,VAR.LOC.PCNT.POS>
    IF VAL.PART.ALLOW EQ 'YES' THEN
        GOSUB FT.CHECK.BILL
    END
RETURN

***********
TT.CHECK.BILL:
* Get the number of bills

    CALL F.READ(FN.AA.ACCOUNT.DETAILS,VAR.ACCT.ID,R.AA.ACCOUNT.DETAILS,F.AA.ACCOUNT.DETAILS,ACCT.DET.ERR)
    Y.NO.BILL = DCOUNT(R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID>,@VM) ;*AUTO R22 CODE CONVERSION
    VAR2 = 1
    LOOP
    WHILE VAL.LOC.BILL.NUM EQ ''
        IF FLAG.ERROR EQ 1 THEN
            RETURN
        END
        GOSUB TT.CHECK.PROCESS
    REPEAT
    IF FLAG.ERROR THEN
        RETURN
    END
    R.NEW(TT.TE.LOCAL.REF)<1,VAR.TT.PART.PCNT> = VAL.PART.PCNT
    VAR.PREV.BILL.ID = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID,VAR3,1>
    VAR.PREV.BILL.DATE = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.DATE,VAR3,1>
    CALL F.READ(FN.AA.BILL.DETAILS,VAR.PREV.BILL.ID,R.BIL.DETAILS,F.AA.BILL.DETAILS,BILL.DET.ERR2)
    VAR.ST.CHG.DT = R.BIL.DETAILS<AA.BD.BILL.ST.CHG.DT,1>
    IF VAR.ST.CHG.DT LT VAR.PREV.BILL.DATE THEN
        ETEXT = "EB-REDO.PART.PAY.NOT.ALLOW"
        CALL STORE.END.ERROR
    END
    CALL F.READ(FN.AA.BILL.DETAILS,VAL.LOC.BILL.NUM,R.AA.BIL.DETAILS,F.AA.BILL.DETAILS,BILL.DET.ERR1)

    ACCOUNT.ID = TEMP.ACT.ID
    BALANCE.TO.CHECK = 'ACCPENALTYINT'
    DATE.OPTIONS = ''
    EFFECTIVE.DATE = TODAY
    DATE.OPTIONS<4>  = 'ECB'
    BALANCE.AMOUNT = ""
    CALL AA.GET.PERIOD.BALANCES(ACCOUNT.ID, BALANCE.TO.CHECK, DATE.OPTIONS, EFFECTIVE.DATE, "", "", BAL.DETAILS, "")
    PRIN.BALANCE = BAL.DETAILS<IC.ACT.BALANCE>
    VAR.TOT.AMT = SUM(R.AA.BIL.DETAILS<AA.BD.OS.PROP.AMOUNT>)
    Y.BASE.AMT = (VAR.TOT.AMT * (VAL.PART.PCNT/100)) + ABS(PRIN.BALANCE)

    R.NEW(TT.TE.AMOUNT.LOCAL.1) = FMT(Y.BASE.AMT,"R2#10")
    CALL F.READ(FN.REDO.H.TT.CONCAT.FILE,VAR.ACCT.ID,R.REDO.H.TT.CONCAT.FILE,F.REDO.H.TT.CONCAT.FILE,CONCAT.ERR)
    IF R.REDO.H.TT.CONCAT.FILE EQ '' THEN
        R.REDO.H.TT.CONCAT.FILE<TT.CON.NO.OF.PAYMENTS> = 1
        VAR.NO.OF.PAYMENTS = R.REDO.H.TT.CONCAT.FILE<TT.CON.NO.OF.PAYMENTS>
    END
    ELSE
        VAR.NO.OF.PAYMENTS = R.REDO.H.TT.CONCAT.FILE<TT.CON.NO.OF.PAYMENTS> + 1
    END
    R.NEW(TT.TE.LOCAL.REF)<1,VAR.TT.NUM.PYMT> = VAR.NO.OF.PAYMENTS
RETURN
*****************
TT.CHECK.PROCESS:
*Defaulting the values of the amount

    VAR.BILL.ID = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID,VAR2,1>
    IF VAR.BILL.ID EQ '' THEN
        FLAG.ERROR = 1
        RETURN
    END
    ELSE
        VAL.BILL.STATUS = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.STATUS,VAR2,1>
        VAL.SETTLE.STATUS = R.AA.ACCOUNT.DETAILS<AA.AD.SET.STATUS,VAR2,1>
    END
    IF VAL.LOC.BILL.NUM EQ '' THEN
        IF VAL.SETTLE.STATUS NE 'REPAID' THEN
            R.NEW(TT.TE.LOCAL.REF)<1,VAR.TT.BILL.NUM> = VAR.BILL.ID
            VAR3 = VAR2 - 1
        END
        ELSE
            VAR2 += 1 ;*AUTO R22 CODE CONVERSION
        END
    END
    VAL.LOC.BILL.NUM = R.NEW(TT.TE.LOCAL.REF)<1,VAR.TT.BILL.NUM>
RETURN
*---------------
FT.CHECK.BILL:

    CALL F.READ(FN.AA.ACCOUNT.DETAILS,VAR.ACCT.ID,R.AA.ACCOUNT.DETAILS,F.AA.ACCOUNT.DETAILS,ACCT.DET.ERR)
    Y.NO.BILL = DCOUNT(R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID>,@VM) ;*AUTO R22 CODE CONVERSION
    VAR2 = 1

    LOOP
    WHILE VAL.LOC.BILL.NUM EQ ''
        IF FLAG.ERROR EQ 1 THEN
            RETURN
        END
        GOSUB FT.CHECK.PROCESS
    REPEAT
    IF FLAG.ERROR THEN
        ETEXT = "EB-REDO.PART.PAY.NOT.ALLOW"
        CALL STORE.END.ERROR
    END
    R.NEW(FT.LOCAL.REF)<1,VAR.FT.PART.PCNT> = VAL.PART.PCNT
    VAR.PREV.BILL.ID = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID,VAR3,1>
    VAR.PREV.BILL.DATE = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.DATE,VAR3,1>
    CALL F.READ(FN.AA.BILL.DETAILS,VAR.PREV.BILL.ID,R.BIL.DETAILS,F.AA.BILL.DETAILS,BILL.DET.ERR2)
    VAR.ST.CHG.DT = R.BIL.DETAILS<AA.BD.BILL.ST.CHG.DT,1>
    IF VAR.ST.CHG.DT LT VAR.PREV.BILL.DATE THEN
        ETEXT = "EB-REDO.PART.PAY.NOT.ALLOW"
        CALL STORE.END.ERROR
    END
    CALL F.READ(FN.REDO.H.FT.CONCAT.FILE,VAR.ACCT.ID,R.REDO.H.FT.CONCAT.FILE,F.REDO.H.FT.CONCAT.FILE,CONCAT.ERR)
    IF R.REDO.H.TT.CONCAT.FILE EQ '' THEN
        R.REDO.H.TT.CONCAT.FILE<TT.CON.NO.OF.PAYMENTS> = 1
        VAR.NO.OF.PAYMENTS = R.REDO.H.TT.CONCAT.FILE<FT.CON.NO.OF.PAYMENTS>
    END
    ELSE
        VAR.NO.OF.PAYMENTS = R.REDO.H.TT.CONCAT.FILE<FT.CON.NO.OF.PAYMENTS> + 1
    END
    R.NEW(FT.LOCAL.REF)<1,VAR.FT.NUM.PYMT> = VAR.NO.OF.PAYMENTS
RETURN
****************
FT.CHECK.PROCESS:
*Defaulting the amount

    VAR.BILL.ID = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID,VAR2,1>
    IF VAR.BILL.ID EQ '' THEN
        FLAG.ERROR = 1
        RETURN
    END
    ELSE
        VAL.BILL.STATUS = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.STATUS,VAR2,1>
        VAL.SETTLE.STATUS = R.AA.ACCOUNT.DETAILS<AA.AD.SET.STATUS,VAR2,1>
    END
    IF VAL.LOC.BILL.NUM EQ '' THEN
        IF VAL.SETTLE.STATUS NE 'REPAID' THEN
            R.NEW(FT.LOCAL.REF)<1,VAR.FT.BILL.NUM> = VAR.BILL.ID
            VAR3 = VAR2 - 1
        END
        ELSE
            VAR2 += 1 ;*AUTO R22 CODE CONVERSION
            RETURN
        END
    END
    VAL.LOC.BILL.NUM = R.NEW(FT.LOCAL.REF)<1,VAR.FT.BILL.NUM>
    CALL F.READ(FN.AA.BILL.DETAILS,VAL.LOC.BILL.NUM,R.AA.BIL.DETAILS,F.AA.BILL.DETAILS,BILL.DET.ERR1)
    CALL F.READ(FN.CONTRACT.BALANCES,TEMP.ACT.ID,R.CONTRACT.BALANCES,F.CONTRACT.BALANCES,CONTRACT.ERR)

    ACCOUNT.ID = TEMP.ACT.ID
    BALANCE.TO.CHECK = 'ACCPENALTYINT'
    DATE.OPTIONS = ''
    EFFECTIVE.DATE = TODAY
    DATE.OPTIONS<4>  = 'ECB'
    BALANCE.AMOUNT = ""
    CALL AA.GET.PERIOD.BALANCES(ACCOUNT.ID, BALANCE.TO.CHECK, DATE.OPTIONS, EFFECTIVE.DATE, "", "", BAL.DETAILS, "")
    PRIN.BALANCE = BAL.DETAILS<IC.ACT.BALANCE>

    VAR.TOT.AMT = SUM(R.AA.BIL.DETAILS<AA.BD.OS.PROP.AMOUNT>)
    Y.BASE.AMT = (VAR.TOT.AMT * (VAL.PART.PCNT/100)) + ABS(PRIN.BALANCE)
    R.NEW(FT.CREDIT.AMOUNT) = FMT(Y.BASE.AMT,"R2#10")
RETURN
END
