* @ValidationCode : MjozOTMyOTIxNzA6Q3AxMjUyOjE2ODEyOTUyMTcwNjY6SVRTUzotMTotMTowOjE6ZmFsc2U6Ti9BOlIyMV9BTVIuMDotMTotMQ==
* @ValidationInfo : Timestamp         : 12 Apr 2023 15:56:57
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSS
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.TAM
SUBROUTINE REDO.L.NCF.ISSUE.RUN
*-------------------------------------------------------------------------------------------
*DESCRIPTION:
*             This verification routine will generate and assign NCF number for particular transaction
* or for all the transation done on the particular day
* ------------------------------------------------------------------------------------------
* Input/Output:
*--------------
* IN  : -NA-
* OUT : -NA-
*
* Dependencies:
*---------------
* CALLS     : -NA-
* CALLED BY : -NA-
*
* Revision History:
*------------------
*   Date               who           Reference            Description
* 26-MAR-2010        Prabhu.N       ODR-2009-10-0321     Initial Creation
* 26-MAR-2010        Prabhu.N       PACS00169424         Resolved with Tax requirement
* 12.04.2023       Conversion Tool       R22             Auto Conversion     - VM TO @VM
* 12.04.2023       Shanmugapriya M       R22             Manual Conversion   - No changes
*
*---------------------------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.REDO.L.NCF.ISSUE
    $INSERT I_F.REDO.L.NCF.UNMAPPED
    $INSERT I_F.REDO.NCF.ISSUED
    $INSERT I_F.REDO.L.NCF.STATUS
    $INSERT I_F.REDO.L.NCF.STOCK
    $INSERT I_F.FUNDS.TRANSFER
    GOSUB INIT
    GOSUB PROCESS
RETURN
*----
INIT:
*----

    FN.REDO.L.NCF.UNMAPPED='F.REDO.L.NCF.UNMAPPED'
    F.REDO.L.NCF.UNMAPPED =''
    CALL OPF(FN.REDO.L.NCF.UNMAPPED,F.REDO.L.NCF.UNMAPPED)
    FN.REDO.L.NCF.STOCK  ='F.REDO.L.NCF.STOCK'
    F.REDO.L.NCF.STOCK   =''
    CALL OPF(FN.REDO.L.NCF.STOCK,F.REDO.L.NCF.STOCK)
    FN.FUNDS.TRANSFER   ='F.FUNDS.TRANSFER'
    F.FUNDS.TRANSFER    =''
    CALL OPF(FN.FUNDS.TRANSFER,F.FUNDS.TRANSFER)
    FN.REDO.L.NCF.ISSUED ='F.REDO.NCF.ISSUED'
    F.REDO.L.NCF.ISSUED  =''
    CALL OPF(FN.REDO.L.NCF.ISSUED,F.REDO.L.NCF.ISSUED)
    FN.REDO.L.NCF.STATUS ='F.REDO.L.NCF.STATUS'
    F.REDO.L.NCF.STATUS  =''
    CALL OPF(FN.REDO.L.NCF.STATUS,F.REDO.L.NCF.STATUS)

    FN.REDO.NCF.ISSUED='F.REDO.NCF.ISSUED'
    F.REDO.NCF.ISSUED=''
    CALL OPF(FN.REDO.NCF.ISSUED,F.REDO.NCF.ISSUED)

    SELECT.UNMAP.CMD="SELECT ":FN.REDO.L.NCF.UNMAPPED :" WITH TXN.ID EQ ": R.NEW(NCF.IS.TXN.REFERENCE):" AND BATCH NE YES"
    SELECT.UNMAP.DATE.CMD="SELECT  ":FN.REDO.L.NCF.UNMAPPED :" WITH DATE EQ ":R.NEW(NCF.IS.DEAL.DATE) :" AND BATCH NE YES"
    SELECT.ISSUED.CMD="SELECT  ":FN.REDO.NCF.ISSUED :" WITH  TXN.ID EQ ": R.NEW(NCF.IS.TXN.REFERENCE)
RETURN
*-------
PROCESS:
*-------


    CALL F.READU(FN.REDO.L.NCF.STOCK,'SYSTEM',R.NCF.STOCK,F.REDO.L.NCF.STOCK,ST.ERR,'')

    IF R.NEW(NCF.IS.TXN.REFERENCE) NE '' THEN
        CALL EB.READLIST(SELECT.UNMAP.CMD,REDO.NCF.UNMAPPED.ID,'',NO.OF.REC,UNMAP.ERR)
        CALL F.READ(FN.REDO.L.NCF.UNMAPPED,REDO.NCF.UNMAPPED.ID,R.NCF.UNMAPPED,F.REDO.L.NCF.UNMAPPED,UNMAP.ERR)
        IF R.NCF.UNMAPPED NE '' THEN
            GOSUB NCF.STATUS.IN
            GOSUB NCF.GEN
        END
        ELSE
            IF R.NCF.STOCK<ST.QTY.AVAIL.ORG> GT 0 THEN
                NO.OF.REC.ISSUED=''
                CALL EB.READLIST(SELECT.ISSUED.CMD,REDO.NCF.ISSUED.ID,'',NO.OF.REC.ISSUED,ISSUED.ERR)
                REDO.NCF.UNMAPPED.ID=R.NEW(NCF.IS.CUSTOMER):'.':R.NEW(NCF.IS.DEAL.DATE):'.':R.NEW(NCF.IS.TXN.REFERENCE)
                R.NCF.ISSUED<ST.IS.TXN.ID>         =R.NEW(NCF.IS.TXN.REFERENCE)
                R.NCF.ISSUED<ST.IS.CHARGE.AMOUNT>  =R.NEW(NCF.IS.CHARGE.AMOUNT)
                R.NCF.ISSUED<ST.IS.CUSTOMER>       =R.NEW(NCF.IS.CUSTOMER)
                R.NCF.ISSUED<ST.IS.DATE>           =R.NEW(NCF.IS.DEAL.DATE)
                R.NCF.ISSUED<ST.IS.ACCOUNT>        =R.NEW(NCF.IS.ACCOUNT)
                GOSUB NCF.STATUS.OUT
                GOSUB NCF.ORG.GEN
            END
        END
    END
    ELSE
        IF R.NEW(NCF.IS.DEAL.DATE) NE '' THEN

            CALL EB.READLIST(SELECT.UNMAP.DATE.CMD,REDO.NCF.UNMAPPED.ID.LIST,'',NO.OF.REC,UNMAP.ERR)
            LOOP
                REMOVE REDO.NCF.UNMAPPED.ID FROM REDO.NCF.UNMAPPED.ID.LIST SETTING UNMAP.POS
            WHILE REDO.NCF.UNMAPPED.ID:UNMAP.POS
                CALL F.READ(FN.REDO.L.NCF.UNMAPPED,REDO.NCF.UNMAPPED.ID,R.NCF.UNMAPPED,F.REDO.L.NCF.UNMAPPED,UNMAP.ERR)
                GOSUB NCF.GEN
            REPEAT
        END
    END
    CALL F.RELEASE(FN.REDO.L.NCF.STOCK,'SYSTEM',F.REDO.L.NCF.STOCK)
RETURN
*------------
NCF.GEN:
*-----------
    VAR.TRNSACTION.CODE=R.NCF.UNMAPPED<ST.UN.TXN.TYPE>
    IF  VAR.TRNSACTION.CODE EQ 'ACDB' THEN
        GOSUB NCF.DEBIT.GEN
    END
    ELSE
        IF VAR.TRNSACTION.CODE  EQ 'AACN' THEN
            GOSUB NCF.CREDIT.GEN
        END
        ELSE
            GOSUB NCF.ISSUED.REC
            GOSUB NCF.ORG.GEN
        END
    END
RETURN
*-------------
NCF.ORG.GEN:
*------------
    IF R.NCF.STOCK<ST.QTY.AVAIL.ORG> GT 0 THEN
        Y.NCF.LIST=''
        Y.NCF.LIST=R.NCF.STOCK<ST.SERIES>:R.NCF.STOCK<ST.BUSINESS.DIV>:R.NCF.STOCK<ST.PECF>:R.NCF.STOCK<ST.AICF>:R.NCF.STOCK<ST.TCF>:R.NCF.STOCK<ST.SEQUENCE.NO>
        VAR.PREV.RANGE.ALL=R.NCF.STOCK<ST.PRE.ED.RG.OR>
        VAR.PREV.RANGE.LAST=VAR.PREV.RANGE<1,DCOUNT(VAR.PREV.RANGE,@VM)>

        IF R.NCF.STOCK<ST.SEQUENCE.NO> EQ VAR.PREV.RANGE.LAST THEN
            R.NCF.STOCK<ST.SEQUENCE.NO>=R.NCF.STOCK<ST.L.STRT.RNGE.ORG>
        END
        ELSE
            R.NCF.STOCK<ST.SEQUENCE.NO>=R.NCF.STOCK<ST.SEQUENCE.NO>+1
        END
        R.NCF.STOCK<ST.SEQUENCE.NO>=FMT(R.NCF.STOCK<ST.SEQUENCE.NO>,'8"0"R')
*PACS00169424-Amended with TAX requirement:
        Y.TAX.AMT= R.NCF.ISSUED<ST.IS.TAX.AMOUNT>
        IF Y.TAX.AMT GT 0 THEN
            Y.NCF.LIST<1,-1>=R.NCF.STOCK<ST.SERIES>:R.NCF.STOCK<ST.BUSINESS.DIV>:R.NCF.STOCK<ST.PECF>:R.NCF.STOCK<ST.AICF>:R.NCF.STOCK<ST.TCF>:R.NCF.STOCK<ST.SEQUENCE.NO>
            IF R.NCF.STOCK<ST.SEQUENCE.NO> EQ VAR.PREV.RANGE.LAST THEN
                R.NCF.STOCK<ST.SEQUENCE.NO>=R.NCF.STOCK<ST.L.STRT.RNGE.ORG>
            END
            ELSE
                R.NCF.STOCK<ST.SEQUENCE.NO>=R.NCF.STOCK<ST.SEQUENCE.NO>+1
            END
        END
*PACS00169424-end
        R.NCF.ISSUED<ST.IS.NCF>=Y.NCF.LIST
        R.NCF.STOCK<ST.SEQUENCE.NO>=FMT(R.NCF.STOCK<ST.SEQUENCE.NO>,'8"0"R')
        R.NCF.STOCK<ST.NCF.ISSUED.ORG>=R.NCF.STOCK<ST.NCF.ISSUED.ORG>+1
        R.NCF.STOCK<ST.QTY.AVAIL.ORG>=R.NCF.STOCK<ST.QTY.AVAIL.ORG>-1

        IF  R.NCF.STOCK<ST.QTY.AVAIL.ORG> GE R.NCF.STOCK<ST.L.MIN.NCF.ORG>  THEN
            R.NCF.STOCK<ST.NCF.STATUS.ORG>='AVAILABLE'
        END
        ELSE
            R.NCF.STOCK<ST.NCF.STATUS.ORG>='UNAVAILABLE'
        END
        GOSUB NCF.WRITE
    END
RETURN
*-------------
NCF.DEBIT.GEN:
*-------------
    IF R.NCF.STOCK<ST.L.QTY.AVAIL.DR> GT 0 THEN
        GOSUB GET.ORIG.NCF
        GOSUB NCF.ISSUED.REC
        Y.MODIFIED.NCF=R.NCF.STOCK<ST.SERIES>:R.NCF.STOCK<ST.BUSINESS.DIV>:R.NCF.STOCK<ST.PECF>:R.NCF.STOCK<ST.AICF>:R.NCF.STOCK<ST.TCF>:R.NCF.STOCK<ST.SEQUENCE.DR>
        VAR.PREV.RANGE=R.NCF.STOCK<ST.PRE.ED.RG.OR>
        VAR.PREV.RANGE.LAST=VAR.PREV.RANGE<1,DCOUNT(VAR.PREV.RANGE,@VM)>
        IF R.NCF.STOCK<ST.SEQUENCE.DR> EQ VAR.PREV.RANGE.LAST THEN
            R.NCF.STOCK<ST.SEQUENCE.DR>=R.NCF.STOCK<ST.L.ST.RG.DR.NOTE>
        END
        ELSE
            R.NCF.STOCK<ST.SEQUENCE.DR>=R.NCF.STOCK<ST.SEQUENCE.DR>+1
        END
        R.NCF.STOCK<ST.SEQUENCE.DR>=FMT(R.NCF.STOCK<ST.SEQUENCE.DR>,'8"0"R')
*PACS00169424-Amended with TAX requirement:
        Y.TAX.AMT= R.NCF.ISSUED<ST.IS.TAX.AMOUNT>
        IF Y.TAX.AMT GT 0 THEN
            Y.MODIFIED.NCF<1,-1>=R.NCF.STOCK<ST.SERIES>:R.NCF.STOCK<ST.BUSINESS.DIV>:R.NCF.STOCK<ST.PECF>:R.NCF.STOCK<ST.AICF>:R.NCF.STOCK<ST.TCF>:R.NCF.STOCK<ST.SEQUENCE.DR>
            IF R.NCF.STOCK<ST.SEQUENCE.DR> EQ VAR.PREV.RANGE.LAST THEN
                R.NCF.STOCK<ST.SEQUENCE.DR>=R.NCF.STOCK<ST.L.ST.RG.DR.NOTE>
            END
            ELSE
                R.NCF.STOCK<ST.SEQUENCE.DR>=R.NCF.STOCK<ST.SEQUENCE.DR>+1
            END
        END
*PACS00169424-end
        R.NCF.ISSUED<ST.IS.MODIFIED.NCF>=Y.MODIFIED.NCF
        R.NCF.STOCK<ST.SEQUENCE.DR>=FMT(R.NCF.STOCK<ST.SEQUENCE.DR>,'8"0"R')
        R.NCF.STOCK<ST.NCF.ISSUED.DR>=R.NCF.STOCK<ST.NCF.ISSUED.DR>+1
        R.NCF.STOCK<ST.L.QTY.AVAIL.DR>=R.NCF.STOCK<ST.L.QTY.AVAIL.DR>-1
        IF  R.NCF.STOCK<ST.L.QTY.AVAIL.DR> GE R.NCF.STOCK<ST.MN.NCF.DR.NOTE>  THEN
            R.NCF.STOCK<ST.NCF.STATUS.ORG>='AVAILABLE'
        END
        ELSE
            R.NCF.STOCK<ST.NCF.STATUS.ORG>='UNAVAILABLE'
        END
        GOSUB NCF.WRITE
    END
RETURN
*--------------
NCF.CREDIT.GEN:
*--------------
    IF R.NCF.STOCK<ST.L.QTY.AVAIL.CR> GT 0 THEN
        GOSUB GET.ORIG.NCF
        GOSUB NCF.ISSUED.REC
        Y.MODIFIED.NCF=R.NCF.STOCK<ST.SERIES>:R.NCF.STOCK<ST.BUSINESS.DIV>:R.NCF.STOCK<ST.PECF>:R.NCF.STOCK<ST.AICF>:R.NCF.STOCK<ST.TCF>:R.NCF.STOCK<ST.SEQUENCE.CR>
        VAR.PREV.RANGE=R.NCF.STOCK<ST.PRE.ED.RG.CR>
        VAR.PREV.RANGE.LAST=VAR.PREV.RANGE<1,DCOUNT(VAR.PREV.RANGE,@VM)>
        IF R.NCF.STOCK<ST.SEQUENCE.CR> EQ VAR.PREV.RANGE.LAST THEN
            R.NCF.STOCK<ST.SEQUENCE.CR>=R.NCF.STOCK<ST.L.ST.RG.CR.NOTE>
        END
        ELSE
            R.NCF.STOCK<ST.SEQUENCE.CR>=R.NCF.STOCK<ST.SEQUENCE.CR>+1
        END
        R.NCF.STOCK<ST.SEQUENCE.CR>=FMT(R.NCF.STOCK<ST.SEQUENCE.CR>,'8"0"R')
*PACS00169424-Amended with TAX requirement:
        Y.TAX.AMT= R.NCF.ISSUED<ST.IS.TAX.AMOUNT>
        IF Y.TAX.AMT GT 0 THEN
            Y.MODIFIED.NCF<1,-1>=R.NCF.STOCK<ST.SERIES>:R.NCF.STOCK<ST.BUSINESS.DIV>:R.NCF.STOCK<ST.PECF>:R.NCF.STOCK<ST.AICF>:R.NCF.STOCK<ST.TCF>:R.NCF.STOCK<ST.SEQUENCE.CR>
            IF R.NCF.STOCK<ST.SEQUENCE.CR> EQ VAR.PREV.RANGE.LAST THEN
                R.NCF.STOCK<ST.SEQUENCE.CR>=R.NCF.STOCK<ST.L.ST.RG.CR.NOTE>
            END
            ELSE
                R.NCF.STOCK<ST.SEQUENCE.CR>=R.NCF.STOCK<ST.SEQUENCE.CR>+1
            END
        END
        R.NCF.ISSUED<ST.IS.MODIFIED.NCF>=Y.MODIFIED.NCF
*PACS00169424-end
        R.NCF.STOCK<ST.SEQUENCE.CR>=FMT(R.NCF.STOCK<ST.SEQUENCE.CR>,'8"0"R')
        R.NCF.STOCK<ST.L.NCF.ISSUED.CR>=R.NCF.STOCK<ST.L.NCF.ISSUED.CR>+1
        R.NCF.STOCK<ST.L.QTY.AVAIL.CR>=R.NCF.STOCK<ST.L.QTY.AVAIL.CR>-1
        IF  R.NCF.STOCK<ST.L.QTY.AVAIL.CR> GE R.NCF.STOCK<ST.MN.NCF.CR.NOTE>  THEN
            R.NCF.STOCK<ST.NCF.STATUS.CR>='AVAILABLE'
        END
        ELSE
            R.NCF.STOCK<ST.NCF.STATUS.CR>='UNAVAILABLE'
        END
        GOSUB NCF.WRITE
    END
RETURN
*-----------------
NCF.ISSUED.REC:
*-----------------
    R.NCF.ISSUED<ST.IS.TXN.ID>       =R.NCF.UNMAPPED<ST.UN.TXN.ID>
    R.NCF.ISSUED<ST.IS.TXN.TYPE>     =R.NCF.UNMAPPED<ST.UN.TXN.TYPE>
    R.NCF.ISSUED<ST.IS.CHARGE.AMOUNT>=R.NCF.UNMAPPED<ST.UN.CHARGE.AMOUNT>
    R.NCF.ISSUED<ST.IS.TAX.AMOUNT>   =R.NCF.UNMAPPED<ST.UN.TAX.AMOUNT>
    R.NCF.ISSUED<ST.IS.DATE>         =R.NCF.UNMAPPED<ST.UN.DATE>
    R.NCF.ISSUED<ST.IS.ACCOUNT>      =R.NCF.UNMAPPED<ST.UN.ACCOUNT>
    R.NCF.ISSUED<ST.IS.CUSTOMER>     =R.NCF.UNMAPPED<ST.UN.CUSTOMER>
    R.NCF.ISSUED<ST.IS.ID.TYPE>      =R.NCF.UNMAPPED<ST.UN.ID.TYPE>
    R.NCF.ISSUED<ST.IS.ID.NUMBER>    =R.NCF.UNMAPPED<ST.UN.ID.NUMBER>
RETURN
*---------
NCF.WRITE:
*---------

    R.REDO.L.NCF.STATUS<NCF.ST.STATUS>='AVAILABLE'
    CALL  F.WRITE(FN.REDO.L.NCF.STATUS,REDO.NCF.UNMAPPED.ID,R.NCF.STATUS)
    CALL  F.WRITE(FN.REDO.L.NCF.STOCK,'SYSTEM',R.NCF.STOCK)
    CALL  F.WRITE(FN.REDO.L.NCF.ISSUED,REDO.NCF.UNMAPPED.ID,R.NCF.ISSUED)
    CALL  F.DELETE(FN.REDO.L.NCF.UNMAPPED,REDO.NCF.UNMAPPED.ID)
    IF NO.OF.REC.ISSUED THEN
        ETEXT='EB-ALREADY.ISSUED'
        CALL STORE.END.ERROR
    END
    ELSE
        CALL JOURNAL.UPDATE(ID.NEW)
    END
RETURN
*------------
GET.ORIG.NCF:
*------------
    CALL  F.READ(FN.FUNDS.TRANSAFER,R.NCF.UNMAPPED<ST.UN.TXN.ID>,R.FUNDS.TRANSFER,F.FUNDS.TRANSFER,FT.ERR)
    CALL  GET.LOC.REF('FUNDS.TRANSFER','L.NCF.NUMBER',LREF.POS)
    R.NCF.ISSUED<ST.IS.NCF>=R.FUNDS.TRANSFER<FT.LOCAL.REF><1,LREF.POS>
RETURN
*--------------
NCF.STATUS.OUT:
*--------------
    R.NCF.STATUS<NCF.ST.TRANSACTION.ID>=R.NEW(NCF.IS.TXN.REFERENCE)
    R.NCF.STATUS<NCF.ST.CUSTOMER.ID>   =R.NEW(NCF.IS.CUSTOMER)
    R.NCF.STATUS<NCF.ST.DATE>          =R.NEW(NCF.IS.DEAL.DATE)
    R.NCF.STATUS<NCF.ST.CHARGE.AMOUNT> =R.NEW(NCF.IS.CHARGE.AMOUNT)
    R.NCF.STATUS<NCF.ST.NCF>           =R.NCF.STOCK<ST.SERIES>:R.NCF.STOCK<ST.BUSINESS.DIV>:R.NCF.STOCK<ST.PECF>:R.NCF.STOCK<ST.AICF>:R.NCF.STOCK<ST.TCF>:R.NCF.STOCK<ST.SEQUENCE.NO>
    R.NCF.STATUS<NCF.ST.STATUS>        ='AVAILABLE'
RETURN
*---------------
NCF.STATUS.IN:
*---------------
    R.NCF.STATUS<NCF.ST.TRANSACTION.ID>=R.NCF.UNMAPPED<ST.UN.TXN.ID>
    R.NCF.STATUS<NCF.ST.CUSTOMER.ID>   =R.NCF.UNMAPPED<ST.UN.CUSTOMER>
    R.NCF.STATUS<NCF.ST.DATE>          =R.NCF.UNMAPPED<ST.UN.DATE>
    R.NCF.STATUS<NCF.ST.CHARGE.AMOUNT> =R.NCF.UNMAPPED<ST.UN.CHARGE.AMOUNT>
    R.NCF.STATUS<NCF.ST.TAX.AMOUNT>    =R.NCF.UNMAPPED<ST.UN.TAX.AMOUNT>
    R.NCF.STATUS<NCF.ST.STATUS>        ='AVAILABLE'
    R.NCF.STATUS<NCF.ST.NCF>           =R.NCF.STOCK<ST.SERIES>:R.NCF.STOCK<ST.BUSINESS.DIV>:R.NCF.STOCK<ST.PECF>:R.NCF.STOCK<ST.AICF>:R.NCF.STOCK<ST.TCF>:R.NCF.STOCK<ST.SEQUENCE.NO>
RETURN
END
