$PACKAGE APAP.LAPAP
SUBROUTINE REDO.B.MG.LNS.BY.DEBTOR(Y.FINAL.ARRANGEMENT)
*-----------------------------------------------------------------------------
* Developed By            : Emmanuel James Natraj Livingston
*
* Developed On            : 03-Sep-2013
*
* Development Reference   : 786790(FS-205-DE15)
*
* Development Description : Main Process routine to fetch the required values from the LENDING Arrangement and store
*                           records in temporary directory specified in the param table REDO.H.REPORTS.PARAM.
*
* Attached To             : BATCH>BNK/REDO.B.MG.LNS.BY.DEBTOR
*
* Attached As             : COB Multithreaded Routine
*-----------------------------------------------------------------------------------------------------------------
* Input Parameter:
* ---------------*
* Argument#1 : Y.FINAL.ARRANGEMENT
*-----------------------------------------------------------------------------------------------------------------
*-----------------*
* Output Parameter:
* ----------------*
* Argument#2 : NA
*-----------------------------------------------------------------------------------------------------------------
*  M O D I F I C A T I O N S
*-----------------------------------------------------------------------------------------------------------------
* Defect Reference       Modified By                    Date of Change        Change Details
*
*    INTERNAL       Emmanuel James Natraj Livingston     24/10/2013      Delimiter Changed from "-" to "^"
*                    Krishnaveni G                       06/12/2013      current.class extraction changed
* PACS00355150           Ashokkumar.V.P                  24/02/2015      Optimized the relation between the customer.
* PACS00460184           Ashokkumar.V.P                  27/05/2015      New changes for updated mapping.
* PACS00460184           Ashokkumar.V.P                  10/06/2015      New changes for updated mapping.
* CN008066               Ashokkumar                      21/01/2018      New REA changes
** 24-04-2023 R22 Auto Conversion - FM TO @FM, VM to @VM, SM to @SM
** 24-04-2023 Skanda R22 Manual Conversion - No changes
*-----------------------------------------------------------------------------------------------------------------
* Include files
*-----------------------------------------------------------------------------------------------------------------
    $INSERT I_COMMON ;* R22 Auto conversion
    $INSERT I_EQUATE ;* R22 Auto conversion
    $INSERT I_F.DATES ;* R22 Auto conversion
    $INSERT I_F.LIMIT ;* R22 Auto conversion
    $INSERT I_F.CUSTOMER ;* R22 Auto conversion
    $INSERT I_F.CURRENCY ;* R22 Auto conversion
    $INSERT I_F.EB.LOOKUP ;* R22 Auto conversion
    $INSERT I_F.AA.CHARGE ;* R22 Auto conversion
    $INSERT I_F.AA.LIMIT ;* R22 Auto conversion
    $INSERT I_F.AA.INTEREST ;* R22 Auto conversion
    $INSERT I_F.CCY.HISTORY ;* R22 Auto conversion
    $INSERT I_F.AA.OVERDUE ;* R22 Auto conversion
    $INSERT I_F.AA.ARRANGEMENT ;* R22 Auto conversion
    $INSERT I_F.AA.PRODUCT.GROUP ;* R22 Auto conversion
    $INSERT I_F.AA.TERM.AMOUNT ;* R22 Auto conversion
    $INSERT I_F.AA.PAYMENT.SCHEDULE ;* R22 Auto conversion
    $INSERT I_F.AA.ACCOUNT.DETAILS ;* R22 Auto conversion
    $INSERT I_F.AA.ACTIVITY.HISTORY ;* R22 Auto conversion
    $INSERT I_F.AA.ACTIVITY.CHARGES ;* R22 Auto conversion
    $INSERT I_F.AA.PRODUCT.DESIGNER ;* R22 Auto conversion
    $INSERT I_F.AA.INTEREST.ACCRUALS ;* R22 Auto conversion
    $INSERT I_F.AA.SCHEDULED.ACTIVITY ;* R22 Auto conversion
    $INSERT I_F.AA.ARRANGEMENT.ACTIVITY ;* R22 Auto conversion
    $INSERT I_F.REDO.H.CUSTOMER.PROVISIONING ;* R22 Auto conversion
    $INSERT I_REDO.GENERIC.FIELD.POS.COMMON ;* R22 Auto conversion
    $INSERT I_REDO.B.MG.LNS.BY.DEBTOR.COMMON ;* R22 Auto conversion
    $INSERT I_F.REDO.APAP.PROPERTY.PARAM ;* R22 Auto conversion
    $INSERT I_F.REDO.AA.MIG.PAY.START.DTE ;* R22 Auto conversion
    $INSERT I_F.REDO.CAMPAIGN.TYPES ;* R22 Auto conversion
    $INSERT I_F.AA.ACCOUNT ;* R22 Auto conversion
    $INSERT I_F.ACCOUNT ;* R22 Auto conversion
    $INSERT I_F.AA.CUSTOMER ;* R22 Auto conversion
    $INSERT I_F.AA.BILL.DETAILS ;* R22 Auto conversion
    $INSERT I_F.RE.STAT.REP.LINE ;* R22 Auto conversion
    $INSERT I_F.EB.CONTRACT.BALANCES ;* R22 Auto conversion
    $INSERT I_F.COLLATERAL ;* R22 Auto conversion


    GOSUB INIT.VAL
    GOSUB MAIN.PROCESS
*
RETURN
*------------
MAIN.PROCESS:
*------------

    Y.AA.ARR.ID = Y.FINAL.ARRANGEMENT
    ARR.ERR       = ""; R.ARRANGEMENT = ""; Y.NROPRESTAMO = ""; Y.PRINCIPAL.SALDO = 0
    CALL AA.GET.ARRANGEMENT(Y.AA.ARR.ID,R.ARRANGEMENT,ARR.ERR)
    Y.MAIN.PROD.GROUP = R.ARRANGEMENT<AA.ARR.PRODUCT.GROUP>
    Y.MAIN.ARR.STATUS = R.ARRANGEMENT<AA.ARR.ARR.STATUS>
    Y.MAIN.ARR.PRCT = R.ARRANGEMENT<AA.ARR.PRODUCT>
    YORG.CONT.DTE = R.ARRANGEMENT<AA.ARR.ORIG.CONTRACT.DATE>
    YSTART.DTE = R.ARRANGEMENT<AA.ARR.START.DATE>
    YCO.CODE = R.ARRANGEMENT<AA.ARR.CO.CODE>
    IF YSTART.DTE GT Y.TODAY THEN
        RETURN
    END
    IF Y.MAIN.ARR.STATUS NE 'CURRENT' AND Y.MAIN.ARR.STATUS NE 'EXPIRED' THEN
        RETURN
    END

    Y.LOAN.STATUS = ''; Y.CLOSE.LN.FLG = 0
    GOSUB GET.LOAN.STATUS
    IF Y.LOAN.STATUS EQ "Write-off" THEN
        RETURN
    END

    GOSUB GET.CLOSED.LOAN.CHK
*IF Y.CLOSE.LN.FLG NE 1 THEN
    GOSUB L.MAIN.PROCESS
*END
RETURN
*-------------
L.MAIN.PROCESS:
**------------
    IF YORG.CONT.DTE THEN
        Y.ORG.CONT.DTE = YORG.CONT.DTE[7,2]:"/":YORG.CONT.DTE[5,2]:"/":YORG.CONT.DTE[1,4]
    END
    ARR.ID = Y.AA.ARR.ID
    Y.CUSTOMER.ID = R.ARRANGEMENT<AA.ARR.CUSTOMER>
    Y.CURRENCY    = R.ARRANGEMENT<AA.ARR.CURRENCY>
    AA.ID = Y.AA.ARR.ID
    CALL REDO.B.CON.LNS.BY.DEBTOR.AA.RECS(AA.ID,OUT.RECORD)
    R.AA.TERM.AMOUNT      = FIELD(OUT.RECORD,"*",1)
    R.AA.ACCOUNT.DETAILS  = FIELD(OUT.RECORD,"*",2)
    R.AA.PAYMENT.SCHEDULE = FIELD(OUT.RECORD,"*",3)
    R.INTEREST.ACCRUALS   = FIELD(OUT.RECORD,"*",4)
    R.AA.OVERDUE          = FIELD(OUT.RECORD,"*",5)
    R.AA.LIMIT            = FIELD(OUT.RECORD,"*",6)
    R.AA.INTEREST         = FIELD(OUT.RECORD,"*",7)
    R.AA.ACCOUNT          = FIELD(OUT.RECORD,"*",8)
    R.AA.CUSTOMER         = FIELD(OUT.RECORD,"*",9)
    GOSUB CON.LNS.BY.DEBTOR.1
    IF YRTN.EXIT EQ 1 THEN
        RETURN
    END
    Y.FIN.ECB.AMT.CONS = 0
    GOSUB READ.EB.CONTRAC.BALANCE
    Y.MONTO.EBTP = ABS(Y.FIN.ECB.AMT.CONS)

    IF NOT(Y.FIN.ECB.AMT.CONS) THEN
        RETURN
    END

    IF Y.FIN.ECB.AMT.CONS LE '0' THEN
        RETURN
    END

    ERR.REDO.APAP.COMMER.DEBT.DET = ''; R.REDO.APAP.COMMER.DEBT.DET = ''; YCONS.AMT = ''
    CALL F.READ(FN.REDO.APAP.COMMER.DEBT.DET,YCUSTOMER,R.REDO.APAP.COMMER.DEBT.DET,F.REDO.APAP.COMMER.DEBT.DET,ERR.REDO.APAP.COMMER.DEBT.DET)
    YCONS.AMT = R.REDO.APAP.COMMER.DEBT.DET<3>
    YCONS.AMT = FIELD(YCONS.AMT,'_',2)

    GOSUB CON.LNS.BY.DEBTOR.2
    GOSUB CON.LNS.BY.DEBTOR.3
    GOSUB CON.LNS.BY.DEBTOR.4
    GOSUB CON.LNS.BY.DEBTOR.7
    GOSUB CON.LNS.BY.DEBTOR.8
    GOSUB CON.LNS.BY.DEBTOR.9
    GOSUB CON.LNS.TEMP.WRITE
RETURN

*-------------------
CON.LNS.BY.DEBTOR.1:
**---------------------------------------------------------------------------------------------------------------------------------
* Fetching the values Debtor Identification C(15), Person Type C(2), Names / co-signer  name C(60) and Given Name / initials C(30)
*----------------------------------------------------------------------------------------------------------------------------------
    Y.PRODUCT.GROUP = ""; Y.RELATION.CODE = ""; OUT.ARR = ""; Y.REL.CODE = ''
    CALL REDO.S.REP.CUSTOMER.EXTRACT(Y.CUSTOMER.ID,Y.PRODUCT.GROUP,Y.REL.CODE,OUT.ARR)
    Y.CUST.IDEN    = OUT.ARR<1>
    Y.CUST.TYPE    = OUT.ARR<2>
    Y.CUST.NAME    = OUT.ARR<3>
    Y.CUST.GN.NAME = OUT.ARR<4>
    C$SPARE(451) = Y.CUST.IDEN
    C$SPARE(452) = Y.CUST.TYPE
    C$SPARE(453) = Y.CUST.NAME
    C$SPARE(454) = Y.CUST.GN.NAME
    Y.L.LOAN.STATUS.1 = R.AA.OVERDUE<AA.OD.LOCAL.REF,Y.L.LOAN.STATUS.1.POS>
*-----------------------------
* Fetching the Loan Code C(27)
*-----------------------------
    Y.PRODUCT.LINE  = R.ARRANGEMENT<AA.ARR.PRODUCT.LINE>
    Y.PRODUCT.GROUP = R.ARRANGEMENT<AA.ARR.PRODUCT.GROUP>
    Y.PROD          = R.ARRANGEMENT<AA.ARR.PRODUCT>
*
    Y.LINKED.APPL    = R.ARRANGEMENT<AA.ARR.LINKED.APPL>
    Y.LINKED.APPL.ID = R.ARRANGEMENT<AA.ARR.LINKED.APPL.ID>
    LOCATE "ACCOUNT" IN Y.LINKED.APPL<1,1> SETTING Y.LINKED.POS THEN
        CHANGE @VM TO @FM IN Y.LINKED.APPL.ID
        Y.LOAN.CODE  = Y.LINKED.APPL.ID<Y.LINKED.POS>
    END
    ERR.ACCOUNT = ''; R.ACCOUNT = ''; Y.PREV.ACCOUNT = ''; Y.ALT.ACCT.TYPE= '';Y.ALT.ACCT.ID=''; YRTN.EXIT = 0
    CALL F.READ(FN.ACCOUNT,Y.LOAN.CODE,R.ACCOUNT,F.ACCOUNT,ERR.ACCOUNT)
    IF ERR.ACCOUNT THEN
        YRTN.EXIT = 1
        RETURN
    END
    YPOST.RESTRICT = R.ACCOUNT<AC.POSTING.RESTRICT>
    IF YPOST.RESTRICT EQ '75' OR YPOST.RESTRICT EQ '90' THEN
        YDE15.CLOSE.LN.FLG = 1
    END
    Y.NROPRESTAMO = Y.LOAN.CODE
    Y.ARRAY.VAL = ''
    YACCT.GRP = R.ACCOUNT:"###":R.ARRANGEMENT
    CALL REDO.RPT.ACCT.ALT.LOANS(YACCT.GRP,Y.PREV.ACCOUNT)
    IF NOT(Y.PREV.ACCOUNT) THEN
        Y.PREV.ACCOUNT = Y.LOAN.CODE
    END
    GOSUB GET.LN.CODE.5.1
    C$SPARE(455) = Y.PREV.ACCOUNT
RETURN
*---------------
GET.LN.CODE.5.1:
*---------------
**Verificar si tiene id alteno 4
    IF Y.LOAN.CODE EQ Y.PREV.ACCOUNT THEN
        ID.ALTENO4 = '' ; Y.ALT.TYPE = ''
        Y.ALT.TYPE = R.ACCOUNT<AC.ALT.ACCT.TYPE>
        CHANGE @VM TO @FM IN Y.ALT.TYPE
        CHANGE @SM TO @FM IN Y.ALT.TYPE
        LOCATE "ALTERNO2" IN Y.ALT.TYPE<1> SETTING EYPO.POS THEN
            ID.ALTENO4  = R.ACCOUNT<AC.ALT.ACCT.ID,EYPO.POS,1>
            FINDSTR "VI" IN ID.ALTENO4 SETTING Ap, Vp THEN
                Y.PREV.ACCOUNT = ID.ALTENO4[3,LEN(ID.ALTENO4)]
            END
        END
    END
RETURN
*-------------------
CON.LNS.BY.DEBTOR.2:
**-----------------------------------------------------------
* Fetching Disbursed Date C(10) and Disbursed Amount N(15,2):
**-----------------------------------------------------------

    IN.REC.VAL =  Y.AA.ARR.ID:"#":Y.CUSTOMER.ID:"#":Y.CURRENCY:"#":Y.L.LOAN.STATUS.1:"#":R.AA.TERM.AMOUNT:"#":R.AA.ACCOUNT.DETAILS:"#":R.AA.OVERDUE:"#":Y.LOAN.CODE:"#":R.AA.LIMIT:"#":R.AA.ACCOUNT
    CALL REDO.S.CON.CALC.DISB.DATE.AMT(IN.REC.VAL,OUT.REC.VAL)
*
    Y.DISBURSE.DATE.DIS =  FIELD(OUT.REC.VAL,"#",1)
    Y.DISBURSE.AMT  =  FIELD(OUT.REC.VAL,"#",2)
*    Y.COMP.CODE =  FIELD(OUT.REC.VAL,"#",3)
    Y.RESTRUCT.DATE.DIS =  FIELD(OUT.REC.VAL,"#",4)
    Y.RENEWAL.DATE.DIS =  FIELD(OUT.REC.VAL,"#",5)
    Y.EARLY.PAY.OFF =  FIELD(OUT.REC.VAL,"#",6)
    Y.MG.TOT.COMMIT = FIELD(OUT.REC.VAL,"#",7)
*
    IF Y.DISBURSE.AMT EQ 0 OR NOT(Y.DISBURSE.AMT) THEN
        Y.DISBURSE.AMT = Y.MG.TOT.COMMIT
    END
    IF Y.MG.TOT.COMMIT EQ 0 OR NOT(Y.MG.TOT.COMMIT) THEN
        Y.MG.TOT.COMMIT = Y.DISBURSE.AMT
    END
    C$SPARE(456) = Y.DISBURSE.DATE.DIS
    C$SPARE(457) =  Y.DISBURSE.AMT
    C$SPARE(468) = YCO.CODE[6,4]
    C$SPARE(469) = Y.RESTRUCT.DATE.DIS
    C$SPARE(470) = Y.RENEWAL.DATE.DIS
    C$SPARE(471) = Y.TXNEYPO.VAL.ARR
RETURN

CON.LNS.BY.DEBTOR.3:
*-------------------
* Fetching Maturity Date C(10), First Payment Date C(10), Bill Amount  N(10,2), Rate N(6,2), Currency Type C(1) and Judicial collection C(1):
    GOSUB GET.MAT.DATE
    GOSUB GET.FST.PAY.DATE
    GOSUB GET.RATE.CCY
    GOSUB GET.JUD.COLL
RETURN

GET.MAT.DATE:
*-----------
    Y.AA.MATURITY.DATE.DIS = ''
    Y.AA.MATURITY.DATE = ''
    Y.AA.MATURITY.DATE = R.AA.TERM.AMOUNT<AA.AMT.MATURITY.DATE>
    IF Y.AA.MATURITY.DATE THEN
        Y.AA.MATURITY.DATE.DIS = Y.AA.MATURITY.DATE[7,2]:"/":Y.AA.MATURITY.DATE[5,2]:"/":Y.AA.MATURITY.DATE[1,4]
    END
    C$SPARE(458)       = Y.AA.MATURITY.DATE.DIS
RETURN

GET.FST.PAY.DATE:
*---------------
    ERR.REDO.AA.MIG.PAY.START.DTE = ''; R.REDO.AA.MIG.PAY.START.DTE = ''; YL.FIRST.PAY.DATE = ''
    CALL F.READ(FN.REDO.AA.MIG.PAY.START.DTE,Y.AA.ARR.ID,R.REDO.AA.MIG.PAY.START.DTE,F.REDO.AA.MIG.PAY.START.DTE,ERR.REDO.AA.MIG.PAY.START.DTE)
    IF R.REDO.AA.MIG.PAY.START.DTE THEN
        YL.FIRST.PAY.DATE = R.REDO.AA.MIG.PAY.START.DTE<REDO.AA.MPSD.FIRST.PAY.DATE>
    END
    Y.FIRST.PAY.DATE = ''; Y.FIRST.PAY.DATE.DIS = ''; Y.L.FIRST.PAYMENT = ''; Y.L.MIGRATED.LN = ''
    Y.L.MIGRATED.LN = R.AA.PAYMENT.SCHEDULE<AA.PS.LOCAL.REF,L.MIGRATED.LN.POS>
    IF Y.L.MIGRATED.LN EQ 'YES' THEN
        Y.FIRST.PAY.DATE = YL.FIRST.PAY.DATE
        C$SPARE(456) = Y.ORG.CONT.DTE
        C$SPARE(457) = Y.MG.TOT.COMMIT
    END ELSE
        Y.FIRST.PAY.DATE = R.AA.ACCOUNT.DETAILS<AA.AD.PAYMENT.START.DATE>
    END

    IF LEN(Y.FIRST.PAY.DATE) EQ 8 THEN
        Y.FIRST.PAY.DATE.DIS = Y.FIRST.PAY.DATE[7,2]:"/":Y.FIRST.PAY.DATE[5,2]:"/":Y.FIRST.PAY.DATE[1,4]
    END
    C$SPARE(459)     = Y.FIRST.PAY.DATE.DIS
RETURN

GET.RATE.CCY:
*-----------
    Y.CURR.TYPE = '' ;Y.AA.RATE = ''
    Y.AA.RATE    = R.INTEREST.ACCRUALS<AA.INT.ACC.RATE,1,1>
    IF NOT(Y.AA.RATE) THEN
        Y.AA.RATE =  R.AA.INTEREST<AA.INT.FIXED.RATE,1>
    END
    C$SPARE(461) = Y.AA.RATE
    IF Y.CURRENCY EQ LCCY THEN
        Y.CURR.TYPE = "N"
    END ELSE
        Y.CURR.TYPE = "E"
    END
    C$SPARE(462) = Y.CURR.TYPE
RETURN

GET.JUD.COLL:
*-----------
    Y.JUD.COLL = ''; YJC.L.STATUS.CHG = ''; Y.ID.COMP.2 = ''; Y.ID.COMP = ''
    YJC.L.STATUS.CHG = R.AA.OVERDUE<AA.OD.LOCAL.REF,Y.L.STATUS.CHG.DT.POS>
    IF Y.L.LOAN.STATUS.1 EQ "JudicialCollection" THEN
        Y.JUD.COLL = "S"
        IF YJC.L.STATUS.CHG THEN
            C$SPARE(485) = YJC.L.STATUS.CHG[7,2]:"/":YJC.L.STATUS.CHG[5,2]:"/":YJC.L.STATUS.CHG[1,4]
        END
    END ELSE
        Y.JUD.COLL = "N"
    END
    C$SPARE(463) = Y.JUD.COLL

    Y.ID.COMP.2 = R.AA.TERM.AMOUNT<AA.AMT.ID.COMP.3>
    Y.ID.COMP = FIELD(Y.ID.COMP.2,'.',1)
    IF Y.ID.COMP GT YSTART.DTE THEN
        C$SPARE(484) = Y.ID.COMP[7,2]:"/":Y.ID.COMP[5,2]:"/":Y.ID.COMP[1,4]
    END

    Y.GUAR.NO = ''; Y.GUAR.VAL = ''; YTOT.CENTRAL.VAL = 0
    Y.GUAR.CNT = 0; YTOT.NOMINAL.VALUE = 0; YGUAR.VAL.TOT = 0
    Y.GUAR.NO  = R.AA.TERM.AMOUNT<AA.AMT.LOCAL.REF,POS.L.AA.COL>
    Y.GUAR.VAL = R.AA.TERM.AMOUNT<AA.AMT.LOCAL.REF,POS.L.AA.COL.VAL>
    CHANGE @SM TO @VM IN Y.GUAR.NO
    CHANGE @SM TO @VM IN Y.GUAR.VAL

    Y.GUAR.CNT = DCOUNT(Y.GUAR.NO,@VM)
    Y.CNT1 = 1
    LOOP
    WHILE Y.CNT1 LE Y.GUAR.CNT
        Y.GUAR.ID = Y.GUAR.NO<1,Y.CNT1>
        YGUAR.VAL.TOT += Y.GUAR.VAL<1,Y.CNT1>
        R.COLLATERAL = ''; CALL.ERR = ''
        CALL F.READ(FN.COLLATERAL,Y.GUAR.ID,R.COLLATERAL,F.COLLATERAL,CALL.ERR)
        IF NOT(R.COLLATERAL) THEN
            Y.CNT1 += 1 ;* R22 Auto conversion
            CONTINUE
        END
        YTOT.CENTRAL.VAL  += R.COLLATERAL<COLL.CENTRAL.BANK.VALUE>
        Y.CNT1 += 1 ;* R22 Auto conversion
    REPEAT
    YTOT.NOMINAL.VALUE = YTOT.CENTRAL.VAL
    Y.MONTO.EBTP = ABS(Y.MONTO.EBTP)
    IF YTOT.CENTRAL.VAL GT Y.MONTO.EBTP THEN
        YTOT.CENTRAL.VAL = Y.MONTO.EBTP
    END

    C$SPARE(487) = YTOT.CENTRAL.VAL
RETURN
*-------------------
CON.LNS.BY.DEBTOR.4:

**------------------------------------------------------------------------------------------------------------------------------------
* Fetching Debtor Risk Clasification C(2), Principal Provision Required N(15,2), Vinculation Type C(2), Location C(6) and Branch N(5):
**------------------------------------------------------------------------------------------------------------------------------------
    REDO.H.CUSTOMER.PROVISIONING.ERR = ""
    R.REDO.H.CUSTOMER.PROVISIONING   = ""
    CALL F.READ(FN.REDO.H.CUSTOMER.PROVISIONING,Y.CUSTOMER.ID,R.REDO.H.CUSTOMER.PROVISIONING,F.REDO.H.CUSTOMER.PROVISIONING,REDO.H.CUSTOMER.PROVISIONING.ERR)
    IF R.REDO.H.CUSTOMER.PROVISIONING THEN
        Y.LOAN.TYPE          = R.REDO.H.CUSTOMER.PROVISIONING<REDO.CUS.PROV.LOAN.TYPE>
        Y.NEW.ARRANGEMENT.ID = R.REDO.H.CUSTOMER.PROVISIONING<REDO.CUS.PROV.ARRANGEMENT.ID>
        Y.CURR.CLASS         = R.REDO.H.CUSTOMER.PROVISIONING<REDO.CUS.PROV.CURRENT.CLASS>
        Y.PROV.PRINC         = R.REDO.H.CUSTOMER.PROVISIONING<REDO.CUS.PROV.PROV.PRINC>
        Y.PROV.INTR = R.REDO.H.CUSTOMER.PROVISIONING<REDO.CUS.PROV.PROV.INTEREST>

* (S) 20131206
*       LOCATE "MORTGAGE" IN Y.LOAN.TYPE<1,1> SETTING LOAN.POS THEN
*           Y.DEBT.RISK.CLASS = Y.CURR.CLASS<1,LOAN.POS>
*       END
* (E) 20131206
        LOCATE Y.AA.ARR.ID IN Y.NEW.ARRANGEMENT.ID<1,1> SETTING ARR.POS THEN
            Y.PRINCI.PROV = Y.PROV.PRINC<1,ARR.POS>
            Y.INT.PROV.REQ    = Y.PROV.INTR<1,ARR.POS>
        END
    END

    YCNT = 1; YFLD2 = ''
    LOOP
        REMOVE DAY.ID FROM Y.LOAN.TYPE SETTING SL.POSN
    WHILE DAY.ID:SL.POSN
        IF DAY.ID EQ 'HIPOTECARIO' THEN
            YFLD2<-1> = R.REDO.H.CUSTOMER.PROVISIONING<REDO.CUS.PROV.DAYS.OD,YCNT>
        END
        YCNT += 1 ;* R22 Auto conversion
    REPEAT
    YNO.OF.DAYS = ''; YNO.OF.DAYS = MAXIMUM(YFLD2)

*    C$SPARE(464) = Y.DEBT.RISK.CLASS
    C$SPARE(465) = Y.PRINCI.PROV
*    C$SPARE(473) = Y.PRINCI.PROV
    C$SPARE(474) = Y.INT.PROV.REQ
    GOSUB GET.RLN.CODE
RETURN

GET.RLN.CODE:
*-----------
    CUSTOMER.ERR = ""
    R.CUSTOMER   = ""
    Y.FIRST.VAL  = "1"
    CALL F.READ(FN.CUSTOMER,Y.CUSTOMER.ID,R.CUSTOMER,F.CUSTOMER,CUSTOMER.ERR)
    Y.RELATION.CODE = R.CUSTOMER<EB.CUS.RELATION.CODE>
    Y.DCNT.RLN = DCOUNT(Y.RELATION.CODE,@VM)
    Y.STA.RLN = '1'
    Y.VINC.TYPE = ''
    LOOP
    WHILE Y.STA.RLN LE Y.DCNT.RLN
        Y.REL.CODE      = Y.RELATION.CODE<1,Y.STA.RLN>
        LOCATE Y.REL.CODE IN Y.VINCATION.DATA.NAME<1> SETTING VINC.POS THEN
            Y.VINC.TYPE = Y.VINCATION.DATA.VAL<VINC.POS>
        END
        IF Y.VINC.TYPE THEN
            Y.STA.RLN = Y.DCNT.RLN
        END
        Y.STA.RLN += 1
    REPEAT
    IF NOT(Y.VINC.TYPE) THEN
        Y.VINC.TYPE = 'NI'
    END
    C$SPARE(466) = Y.VINC.TYPE
    Y.L.LOCALIDAD = R.CUSTOMER<EB.CUS.LOCAL.REF,Y.L.LOCALIDAD.POS>
    Y.LOCATION    = Y.L.LOCALIDAD
    C$SPARE(467)  = Y.LOCATION
RETURN

*-------------------
CON.LNS.BY.DEBTOR.7:
**---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
* Fetching Penalty Porcentage Early Payoff N(6,2), Constituted Principal Provision N(15,2) and Interest Provision Required N(15,2) and Contingent Provision Required N(15,2):
**---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*    GOSUB PENALTY.PERCENTAGE
    GOSUB PENALTY.PERCENTAGE.1
*C$SPARE(472) = Y.TXNEYPOP.VAL.ARR
RETURN

PENALTY.PERCENTAGE.1:
*-------------------
    Y.CHG.RATE = ''
    Y.CHARGE.PROP = Y.CARGO.CANCELACION
*Y.CHARGE.PROP = 'PRCANCANTIC'
    EFF.DATE = ''
    PROP.CLASS='CHARGE'
    PROPERTY = Y.CHARGE.PROP
    R.CONDITION = ''
    ERR.MSG = ''
    CALL REDO.CRR.GET.CONDITIONS(Y.AA.ARR.ID,EFF.DATE,PROP.CLASS,PROPERTY,R.CONDITION,ERR.MSG)
    Y.CHG.RATE = R.CONDITION<AA.CHG.LOCAL.REF,Y.L.AA.CHG.RATE.POS>
    C$SPARE(472) = Y.CHG.RATE
RETURN
*
PENALTY.PERCENTAGE:
*-----------------
    Y.DCNT.PEN = DCOUNT(Y.ACT.CHG.PRTY,@VM)
    Y.STA.DCNT = '1'
    Y.CHG.RATE = ''
    LOOP
    WHILE Y.STA.DCNT LE Y.DCNT.PEN
        Y.PRTY.ACT = Y.ACT.CHG.PRTY<1,Y.STA.DCNT>
        Y.PRD.CAT.CHG = Y.MAIN.ARR.PRCT:"-":Y.PRTY.ACT
        GOSUB CHK.ACT.CHARGES
        Y.STA.DCNT += 1
    REPEAT
*    C$SPARE(472) = Y.CHG.RATE
RETURN
CHK.ACT.CHARGES:
*-------------
    FINDSTR Y.PRD.CAT.CHG IN Y.AA.PRD.CAT.ACTIVITY.CHARGES SETTING Y.CAT.CHG.POS THEN
        Y.AA.PRD.CAT.CHG.ID = Y.AA.PRD.CAT.ACTIVITY.CHARGES<Y.CAT.CHG.POS>
        IF Y.AA.PRD.CAT.CHG.ID THEN
            CALL F.READ(FN.AA.PRD.CAT.ACTIVITY.CHARGES,Y.AA.PRD.CAT.CHG.ID,R.AA.PRD.CAT.ACTIVITY.CHARGES,F.AA.PRD.CAT.ACTIVITY.CHARGES,AA.PRD.CAT.ERR)
            IF R.AA.PRD.CAT.ACTIVITY.CHARGES THEN
                GOSUB READ.AA.ACT.CG
            END
        END
    END
RETURN
READ.AA.ACT.CG:
*-------------
    Y.ACTIVITY.CHG = R.AA.PRD.CAT.ACTIVITY.CHARGES<AA.ACT.CHG.ACTIVITY.ID>
    LOCATE "LENDING-APPLYPAYMENT-RP.PAYOFF" IN Y.ACTIVITY.CHG<1,1> SETTING Y.ACT.POS THEN
        Y.PRP.CHARGE = R.AA.PRD.CAT.ACTIVITY.CHARGES<AA.ACT.CHG.CHARGE,Y.ACT.POS>
    END
    Y.DCNT.PRP.CHG = DCOUNT(Y.PRP.CHARGE,@SM)
    Y.STA.CHG = '1'
    GOSUB CHK.PROD.CHG
RETURN
CHK.PROD.CHG:
*------------
    LOOP
    WHILE Y.STA.CHG LE Y.DCNT.PRP.CHG
        Y.PRP.CHARGE.VAL = Y.PRP.CHARGE<1,1,Y.STA.CHG>
        Y.PRD.CHG.ID = Y.MAIN.ARR.PRCT:'-':Y.PRP.CHARGE.VAL
        FINDSTR Y.PRD.CHG.ID IN Y.AA.PRD.CAT.CHARGE SETTING Y.POS.CHG THEN
            Y.AA.CHARGE.ID = Y.AA.PRD.CAT.CHARGE<Y.POS.CHG>
            CALL F.READ(FN.AA.PRD.CAT.CHARGE,Y.AA.CHARGE.ID,R.AA.PRD.CAT.CHARGE,F.AA.PRD.CAT.CHARGE,AA.PRD.CAT.ERR)
            GOSUB CALC.CAT.CHG.RATE
            IF Y.CHG.RATE THEN
                Y.STA.CHG = Y.DCNT.PRP.CHG
            END
            Y.STA.CHG += 1
        END
    REPEAT
RETURN
CALC.CAT.CHG.RATE:
*-----------------
    IF R.AA.PRD.CAT.CHARGE THEN
        Y.CHG.RATE = ''
        Y.CHG.RATE = R.AA.PRD.CAT.CHARGE<AA.CHG.CHARGE.RATE>
        IF NOT(Y.CHG.RATE) THEN
            Y.CHG.RATE = R.AA.PRD.CAT.CHARGE<AA.CHG.LOCAL.REF,Y.L.AA.CHG.RATE.POS>
        END
    END
RETURN
CON.LNS.BY.DEBTOR.8:
*------------------
    Y.L.AA.REV.RT.TY = R.AA.INTEREST<AA.INT.LOCAL.REF,Y.L.AA.REV.RT.TY.POS>
    IF Y.L.AA.REV.RT.TY EQ "PERIODICO" THEN
        Y.L.AA.NXT.REV.DT = R.AA.INTEREST<AA.INT.LOCAL.REF,Y.L.AA.NXT.REV.DT.POS>
        Y.REVIEW.DATE.INT.RATE = Y.L.AA.NXT.REV.DT
    END
    Y.REVIEW.DATE.INT.RATE.DIS = ''
    IF Y.REVIEW.DATE.INT.RATE THEN
        Y.REVIEW.DATE.INT.RATE.DIS =  Y.REVIEW.DATE.INT.RATE[7,2]:"/":Y.REVIEW.DATE.INT.RATE[5,2]:"/":Y.REVIEW.DATE.INT.RATE[1,4]
    END
    C$SPARE(475) = Y.REVIEW.DATE.INT.RATE.DIS
RETURN

CON.LNS.BY.DEBTOR.9:
*------------------
    GOSUB GET.NEXT.PAY.AMT
    GOSUB GET.RESTRUCT.TYPE
    Y.L.TIP.CLI     = R.CUSTOMER<EB.CUS.LOCAL.REF,Y.L.TIP.CLI.POS>
    Y.CUSTOMER.TYPE = Y.L.TIP.CLI
    C$SPARE(479)    = Y.CUSTOMER.TYPE

    Y.ORIGEN.RECURSOS = ''; Y.CREDIT.FACILITY = ''; YOPER.TYPE = ''
    YL.AA.CAMP.TY = ''; YCAMP.SHRTNME = ''
*    Y.L.CR.FACILITY   = R.AA.TERM.AMOUNT<AA.AMT.LOCAL.REF,Y.L.CR.FACILITY.POS>
    Y.CREDIT.FACILITY   = R.AA.ACCOUNT<AA.AC.LOCAL.REF,L.CR.FACILITY.POS>
    C$SPARE(480)      = Y.CREDIT.FACILITY

    LOCATE Y.L.AA.REV.RT.TY IN Y.TXNTDT.VAL.ARR<1,1> SETTING TXNTE.POS THEN
        YOPER.TYPE = Y.TXNTDT.DIS.ARR<1,TXNTE.POS>
    END
    C$SPARE(481) = YOPER.TYPE

    Y.ORIGEN.RECURSOS = R.AA.ACCOUNT<AA.AC.LOCAL.REF,L.ORIGEN.RECURSOS.POS>
    C$SPARE(482)      = Y.ORIGEN.RECURSOS
    YL.AA.CAMP.TY = R.AA.CUSTOMER<AA.CUS.LOCAL.REF,L.AA.CAMP.TY.POS>
    ERR.REDO.CAMPAIGN.TYPES = ''; R.REDO.CAMPAIGN.TYPES = ''
    CALL F.READ(FN.REDO.CAMPAIGN.TYPES,YL.AA.CAMP.TY,R.REDO.CAMPAIGN.TYPES,F.REDO.CAMPAIGN.TYPES,ERR.REDO.CAMPAIGN.TYPES)
    IF R.REDO.CAMPAIGN.TYPES THEN
        YCAMP.SHRTNME = R.REDO.CAMPAIGN.TYPES<CG.TYP.CAM.SHORT.DESC>
    END
    C$SPARE(483) = YCAMP.SHRTNME
RETURN

GET.NEXT.PAY.AMT:
*---------------

    IF Y.MAIN.ARR.STATUS EQ 'EXPIRED' THEN
        ERR.AA.BILL = ''; R.AA.BILL.DETAILS = ''; YBILL.ID = ''; Y.BILL.CNT = 0; YBILL.VAL = ''; YBILL.TYPE = ''; YBILL.CNT = 0
        Y.TOT.BILL.AMT = 0; YBILL.AMT = 0; YOS.TOT.AMT = 0; SCHEDULE.DATE = ''; YBILL.CNT.TP = 0; NO.OF.DAYS = 0;YBILL.VAL.TP = ''
        YBILL.ID = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID>
        YBILL.TYPE = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.TYPE>
        YBILL.STATUS = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.STATUS>
        YBILL.DATE = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.DATE>
        YBILL.CNT = DCOUNT(YBILL.ID,@VM)
        YBILL.CNT = DCOUNT(YBILL.ID,@VM)
        YBILL.CNT.TP = YBILL.CNT
        XY = 0
        LOOP
        UNTIL XY EQ YBILL.CNT
            YBILL.VAL = ''; Y.BILL.TYPE = ''
            YBILL.DATE.VAL = ''; YBILL.STATUS.VAL = ''
            YBILL.VAL = YBILL.ID<1,YBILL.CNT,1>
            Y.BILL.TYPE = YBILL.TYPE<1,YBILL.CNT,1>
            YBILL.DATE.VAL = YBILL.DATE<1,YBILL.CNT,1>
            YBILL.STATUS.VAL = YBILL.STATUS<1,YBILL.CNT,1>
            IF Y.BILL.TYPE EQ 'PAYMENT' AND YBILL.VAL.TP NE '' THEN
                YBILL.VAL.TP = YBILL.VAL
*             YBILL.CNT = 0
*             CONTINUE
            END
            IF Y.BILL.TYPE EQ 'PAYMENT' AND YBILL.STATUS.VAL NE 'SETTLED' THEN
                IF YBILL.STATUS.VAL NE 'ISSUED' THEN
                    NO.OF.DAYS  = 'C'
                    Y.NEXT.DATE = Y.TODAY
                    CALL CDD('',YBILL.DATE.VAL,Y.NEXT.DATE,NO.OF.DAYS)
                    NO.OF.DAYS += 1 ;* R22 Auto conversion
                END
            END
            IF (NO.OF.DAYS NE 0 AND Y.BILL.TYPE EQ 'PAYMENT' AND YBILL.STATUS.VAL EQ 'SETTLED') AND YBILL.VAL.TP NE '' THEN
                YBILL.CNT = 0
                CONTINUE
            END
            YBILL.CNT -= 1 ;* R22 Auto conversion
        REPEAT

        IF NOT(YBILL.VAL.TP) THEN
            YBILL.VAL.TP = YBILL.ID<1,YBILL.CNT.TP,1>
        END
        CALL F.READ(FN.AA.BILL.DETAILS,YBILL.VAL.TP,R.AA.BILL.DETAILS,F.AA.BILL.DETAILS,ERR.AA.BILL)
        Y.TOT.BILL.AMT = R.AA.BILL.DETAILS<AA.BD.OR.TOTAL.AMOUNT>
        SCHEDULE.DATE = R.AA.BILL.DETAILS<AA.BD.PAYMENT.DATE>
        YBILL.AMT = SUM(R.AA.BILL.DETAILS<AA.BD.OS.PROP.AMOUNT>)
        IF NOT(YBILL.AMT) OR YBILL.AMT EQ 0 THEN
            YBILL.AMT = ABS(Y.TOT.BILL.AMT)
        END
        IF SCHEDULE.DATE THEN
            Y.PAMENT.DATE.EXTRA.BILL.DIS = SCHEDULE.DATE[7,2]:"/":SCHEDULE.DATE[5,2]:"/":SCHEDULE.DATE[1,4]
        END
    END ELSE
        GOSUB GET.DAYS.PROCESS
        GOSUB GET.NEXT.PAY.AMT.1
    END
    GOSUB FIN.PAY.AMT
    GOSUB Get.Monto.Expuesto
RETURN

GET.NEXT.PAY.AMT.1:
*-----------------
    R.REDO.AA.SCHEDULE = ''; REDO.AA.SCHEDULE.ERR = ''; YRANGE.AMT = ''; SCHEDULE.DATE = ''; Y.PAMENT.DATE.EXTRA.BILL.DIS = ''
    Y.DUE.TYPE.51 = 'INSURANCE'; Y.DUE.TYPE.52 = 'CARGOS'; YBILL.AMT = ''; DUE.DATES = ''; DUE.TYPES = ''; TOT.DUE.DATE.TMP = 0
    DUE.TYPE.AMTS = ''; DUE.PROPS = ''; DUE.PROP.AMTS = ''; TOT.PAY = ''; FLG.VAL1 = 0; FLG.VAL2 = 0; Y.VAR = 0 ;* R22 Auto conversion
    CALL F.READ(FN.REDO.AA.SCHEDULE,Y.AA.ARR.ID,R.REDO.AA.SCHEDULE,F.REDO.AA.SCHEDULE,REDO.AA.SCHEDULE.ERR)
    IF R.REDO.AA.SCHEDULE THEN
        TOT.PAY = RAISE(R.REDO.AA.SCHEDULE<1>)
        DUE.DATES = RAISE(R.REDO.AA.SCHEDULE<2>)
        DUE.TYPES = RAISE(R.REDO.AA.SCHEDULE<3>)
        DUE.TYPE.AMTS = RAISE(R.REDO.AA.SCHEDULE<5>)
        DUE.PROPS = RAISE(R.REDO.AA.SCHEDULE<6>)
        DUE.PROP.AMTS = RAISE(R.REDO.AA.SCHEDULE<7>)
    END

    TOT.DUE.DATE=DCOUNT(DUE.DATES,@FM)
    TOT.DUE.DATE.TMP = TOT.DUE.DATE
    J.VAR = 1 ;* R22 Auto conversion
    LOOP
    WHILE J.VAR LE TOT.DUE.DATE ;* R22 Auto conversion
        SCHEDULE.DATE = DUE.DATES<J.VAR> ;* R22 Auto conversion
        IF SCHEDULE.DATE LE Y.TODAY THEN
            Y.VAR = J.VAR ;* R22 Auto conversion
            J.VAR +=1 ;* R22 Auto conversion
            CONTINUE
        END
        YACCT.RANGE.AMT = 0; YSC.RANGE.AMT = 0; YCAP.RANGE.AMT = 0; FMPOS = ''; VMPOS = ''; SMPOS = ''
        FMS.POS = ''; VMS.POS = ''; SMS.POS = ''; FMSPOS = ''; VMSPOS = ''; SMSPOS = ''
        GOSUB SCHED.VAL.1
        GOSUB SCHED.VAL.2
        J.VAR = TOT.DUE.DATE + 1 ;* R22 Auto conversion
    REPEAT
    IF SCHEDULE.DATE THEN
        Y.PAMENT.DATE.EXTRA.BILL.DIS = SCHEDULE.DATE[7,2]:"/":SCHEDULE.DATE[5,2]:"/":SCHEDULE.DATE[1,4]
    END
    IF YBILL.AMT EQ 0 OR NOT(YBILL.AMT) THEN
        FMPOS1 = ''; VMPOS1 = ''; SMPOS1 = ''
        FINDSTR 'ACCOUNT' IN DUE.PROPS<Y.VAR> SETTING FMPOS1,VMPOS1,SMPOS1 THEN ;* R22 Auto conversion
            YBILL.AMT = TOT.PAY<Y.VAR,FMPOS1> ;* R22 Auto conversion
        END
        FMPOS1 = ''; VMPOS1 = ''; SMPOS1 = ''
        FINDSTR 'PRINCIPALINT' IN DUE.PROPS<Y.VAR> SETTING FMPOS1,VMPOS1,SMPOS1 THEN ;* R22 Auto conversion
            YBILL.AMT = TOT.PAY<Y.VAR,FMPOS1> ;* R22 Auto conversion
        END
    END
RETURN
FIN.PAY.AMT:
************
    C$SPARE(460) = YBILL.AMT
    C$SPARE(476) = Y.PAMENT.DATE.EXTRA.BILL.DIS
    C$SPARE(477) = YRANGE.AMT
RETURN

SCHED.VAL.1:
************
    FINDSTR 'ACCOUNT' IN DUE.PROPS<J.VAR> SETTING FMPOS,VMPOS,SMPOS THEN ;* R22 Auto conversion
        YACCT.RANGE.AMT = DUE.PROP.AMTS<J.VAR,VMPOS,SMPOS> ;* R22 Auto conversion
    END
    FINDSTR 'SOLO.CAPITAL' IN DUE.TYPES<J.VAR> SETTING FMS.POS,VMS.POS,SMS.POS THEN ;* R22 Auto conversion
        YSC.RANGE.AMT = DUE.PROP.AMTS<J.VAR,VMS.POS,SMS.POS> ;* R22 Auto conversion
    END
    FINDSTR 'CAPPROG' IN DUE.TYPES<J.VAR> SETTING FMSPOS,VMSPOS,SMSPOS THEN ;* R22 Auto conversion
        YCAP.RANGE.AMT = DUE.PROP.AMTS<J.VAR,VMSPOS,SMSPOS> ;* R22 Auto conversion
    END
    YRANGE.AMT = YSC.RANGE.AMT + YCAP.RANGE.AMT + YACCT.RANGE.AMT
RETURN
SCHED.VAL.2:
************
    FINDSTR 'ACCOUNT' IN DUE.PROPS<J.VAR> SETTING FMPOS1,VMPOS1,SMPOS1 THEN ;* R22 Auto conversion
        YBILL.AMT = TOT.PAY<J.VAR,FMPOS1> ;* R22 Auto conversion
    END
    IF YBILL.AMT EQ 0 OR NOT(YBILL.AMT) THEN
        FMPOS1 = ''; VMPOS1 = ''; SMPOS1 = ''
        FINDSTR 'PRINCIPALINT' IN DUE.PROPS<J.VAR> SETTING FMPOS1,VMPOS1,SMPOS1 THEN ;* R22 Auto conversion
            YBILL.AMT = TOT.PAY<J.VAR,FMPOS1> ;* R22 Auto conversion
        END
    END
RETURN

Get.Monto.Expuesto:
*******************
    C$SPARE(486) = '00'
    IF YNO.OF.DAYS AND YNO.OF.DAYS NE 0 THEN
        NO.OF.DAYS = YNO.OF.DAYS
    END
    YCOVERED.AMT = 0; YEXPOSE.AMT = 0; YCOVERED.PER = 0; YEXPOSE.PER = 0; YGRP = 0
    Y.MONTO.EBTP = ABS(Y.MONTO.EBTP)
    IF (YTOT.NOMINAL.VALUE AND YTOT.NOMINAL.VALUE NE 0) THEN
        IF Y.MONTO.EBTP LE YTOT.NOMINAL.VALUE THEN
            YCOVERED.AMT = Y.MONTO.EBTP
            YEXPOSE.AMT = 0
            YCOVERED.PER = 100
            YEXPOSE.PER = 0
            YCOVERED.PER = FMT(YCOVERED.PER,'R%3')
        END ELSE
            YCOVERED.AMT = YTOT.NOMINAL.VALUE
            YEXPOSE.AMT = Y.MONTO.EBTP - YTOT.NOMINAL.VALUE
            YEXPOSE.AMT = ABS(YEXPOSE.AMT)
            YCOVERED.PER = (YCOVERED.AMT / YTOT.NOMINAL.VALUE) * 100
            YEXPOSE.PER = (YEXPOSE.AMT / YTOT.NOMINAL.VALUE) * 100
            YCOVERED.PER = FMT(YCOVERED.PER,'R%3')
            YEXPOSE.PER = FMT(YEXPOSE.PER,'R%3')
        END
    END ELSE
        YCOVERED.AMT = 0
        YEXPOSE.AMT = Y.MONTO.EBTP
        YCOVERED.PER = 0
        YEXPOSE.PER = 100
    END

    BEGIN CASE
        CASE (NO.OF.DAYS EQ 0 AND (Y.L.LOAN.STATUS.1 NE 'Restructured' AND Y.L.LOAN.STATUS.1 NE 'JudicialCollection'))
            GOSUB GET.COMMER.VAL
            YGRP = 1

        CASE (Y.LOAN.STATUS EQ "JudicialCollection")
            GOSUB GET.cubierto.COND1
            YGRP = 1

        CASE (NO.OF.DAYS LT 181 AND Y.LOAN.STATUS NE "Restructured")
            GOSUB GET.cubierto.COND1
            YGRP = 1

        CASE (Y.L.LOAN.STATUS.1 NE "Restructured" AND NO.OF.DAYS GT 365)
            GOSUB GET.cubierto.COND1
            YGRP = 1

        CASE (NO.OF.DAYS GE 181 AND NO.OF.DAYS LE 365)
            C$SPARE(488) = 'C'
            YGRP = 2

        CASE (Y.L.LOAN.STATUS.1 EQ "Restructured")
            C$SPARE(488) = 'C'
            YGRP = 2

        CASE (NO.OF.DAYS GT 0 AND NO.OF.DAYS LT 365)
            C$SPARE(488) = 'D1'
            YGRP =1
    END CASE

    GOSUB GET.EXPOSE.VAL
RETURN

GET.COMMER.VAL:
***************
    BEGIN CASE
        CASE YCOVERED.PER LE 1
            C$SPARE(488) = 'A'
        CASE YCOVERED.PER GT 1 AND YCOVERED.PER LE 3
            C$SPARE(488) = 'B'
        CASE YCOVERED.PER GT 3 AND YCOVERED.PER LE 20
            C$SPARE(488) = 'C'
        CASE YCOVERED.PER GT 20 AND YCOVERED.PER LE 40
            C$SPARE(488) = 'D1'
        CASE YCOVERED.PER GT 40 AND YCOVERED.PER LE 60
            C$SPARE(488) = 'D2'
        CASE YCOVERED.PER GT 60 AND YCOVERED.PER LE 100
            C$SPARE(488) = 'E'
    END CASE
RETURN

GET.cubierto.COND1:
*******************
    BEGIN CASE
        CASE YCOVERED.PER LE 40
            C$SPARE(488) = 'A'
        CASE YCOVERED.PER GT 40 AND YCOVERED.PER LE 60
            C$SPARE(488) = 'B'
        CASE YCOVERED.PER GT 60
            C$SPARE(488) = 'C'
    END CASE
RETURN

GET.EXPOSE.VAL:
***************

    BEGIN CASE
        CASE YGRP EQ 1 AND YEXPOSE.PER LE 1
            C$SPARE(489) = 'A'
        CASE YGRP EQ 1 AND (YEXPOSE.PER GT 1 AND YEXPOSE.PER LE 3)
            C$SPARE(489) = 'B'
        CASE YGRP EQ 2 AND YEXPOSE.PER LE 20
            C$SPARE(489) = 'C'
        CASE (YEXPOSE.PER GT 3 AND YEXPOSE.PER LE 20)
            C$SPARE(489) = 'C'
        CASE (YEXPOSE.PER GT 20 AND YEXPOSE.PER LE 40)
            C$SPARE(489) = 'D1'
        CASE (YEXPOSE.PER GT 40 AND YEXPOSE.PER LE 60)
            C$SPARE(489) = 'D2'
        CASE (YEXPOSE.PER GT 60)
            C$SPARE(489) = 'E'
    END CASE
RETURN

GET.MORA.DETAL:
***************
    YMORA = ''
    BEGIN CASE
        CASE (NO.OF.DAYS LE 30)
            YMORA = 'A'
        CASE (NO.OF.DAYS GE 31 AND NO.OF.DAYS LE 60)
            YMORA = 'B'
        CASE (NO.OF.DAYS GE 61 AND NO.OF.DAYS LE 90)
            YMORA = 'C'
        CASE (NO.OF.DAYS GE 91 AND NO.OF.DAYS LE 180)
            YMORA = 'D1'
        CASE (NO.OF.DAYS GE 181 AND NO.OF.DAYS LE 270)
            YMORA = 'D2'
        CASE (NO.OF.DAYS GE 271)
            YMORA = 'E'
    END CASE
    C$SPARE(464) = YMORA
RETURN

GET.RESTRUC.DETAL:
******************
    BEGIN CASE
        CASE (NO.OF.DAYS LE 30)
            YMORA = 'B'
        CASE (NO.OF.DAYS GE 31 AND NO.OF.DAYS LE 60)
            YMORA = 'C'
        CASE (NO.OF.DAYS GE 61 AND NO.OF.DAYS LE 90)
            YMORA = 'D1'
        CASE (NO.OF.DAYS GE 91 AND NO.OF.DAYS LE 180)
            YMORA = 'D2'
        CASE (NO.OF.DAYS GE 181)
            YMORA = 'E'
    END CASE
    C$SPARE(464) = YMORA
RETURN

GET.DAYS.PROCESS:
****************
    ERR.AA.BILL = ''; R.AA.BILL.DETAILS = ''; YBILL.ID = ''; Y.BILL.CNT = 0; YBILL.VAL = ''; YBILL.TYPE = ''; YBILL.CNT = 0
    Y.TOT.BILL.AMT = 0; YBILL.AMT = 0; YOS.TOT.AMT = 0; SCHEDULE.DATE = ''; YBILL.CNT.TP = 0; NO.OF.DAYS = 0
    YBILL.ID = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID>
    YBILL.TYPE = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.TYPE>
    YBILL.STATUS = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.STATUS>
    YBILL.DATE = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.DATE>
    YBILL.CNT = DCOUNT(YBILL.ID,@VM)
    YBILL.CNT = DCOUNT(YBILL.ID,@VM)
    YBILL.CNT.TP = YBILL.CNT
    XY = 0
    LOOP
    UNTIL XY EQ YBILL.CNT
        YBILL.VAL = ''; Y.BILL.TYPE = ''; YBILL.VAL.TP = ''
        YBILL.DATE.VAL = ''; YBILL.STATUS.VAL = ''
        YBILL.VAL = YBILL.ID<1,YBILL.CNT,1>
        Y.BILL.TYPE = YBILL.TYPE<1,YBILL.CNT,1>
        YBILL.DATE.VAL = YBILL.DATE<1,YBILL.CNT,1>
        YBILL.STATUS.VAL = YBILL.STATUS<1,YBILL.CNT,1>

        IF Y.BILL.TYPE EQ 'PAYMENT' AND YBILL.STATUS.VAL NE 'SETTLED' THEN
            IF YBILL.STATUS.VAL NE 'ISSUED' THEN
                NO.OF.DAYS  = 'C'
                Y.NEXT.DATE = Y.TODAY
                CALL CDD('',YBILL.DATE.VAL,Y.NEXT.DATE,NO.OF.DAYS)
                NO.OF.DAYS += 1 ;* R22 Auto conversion
            END
        END
        IF Y.BILL.TYPE EQ 'PAYMENT' AND YBILL.STATUS.VAL EQ 'SETTLED' THEN
            YBILL.CNT = 0
            CONTINUE
        END
        YBILL.CNT -= 1 ;* R22 Auto conversion
    REPEAT
RETURN

GET.RESTRUCT.TYPE:
*------------------
    IF Y.L.LOAN.STATUS.1 EQ "Restructured" THEN
        Y.L.RESTRUCT.TYPE = R.AA.OVERDUE<AA.OD.LOCAL.REF,Y.L.RESTRUCT.TYPE.POS>
        Y.RESTRUCT.TYPE   = Y.L.RESTRUCT.TYPE
        GOSUB GET.RESTRUC.DETAL
    END ELSE
        GOSUB GET.MORA.DETAL
        Y.RESTRUCT.TYPE = "NR"
    END
    C$SPARE(478) = Y.RESTRUCT.TYPE
RETURN

CON.LNS.TEMP.WRITE:
*------------------
    RCL.ID  = Y.RCL.ID
    MAP.FMT = "MAP"
    APP     = FN.AA.ARRANGEMENT
    R.APP   = R.ARRANGEMENT
    CALL RAD.CONDUIT.LINEAR.TRANSLATION (MAP.FMT,RCL.ID,APP,Y.AA.ARR.ID,R.APP,R.RETURN.MSG,ERR.MSG)
    CALL F.WRITE(FN.DR.REG.DE15.WORKFILE,Y.AA.ARR.ID,R.RETURN.MSG)
*                 1                 2                3           4                 5                 6                             7               8                       9                       10               11             12               13                14              15               16             17               18                         19                     20                 21            22                 23                 24                       25                      26                           27                   28                  29                 30
*    Y.ARR<-1> = Y.CUST.IDEN:"*":Y.CUST.TYPE:"*":Y.CUST.NAME:"*":Y.CUST.GN.NAME:"*":Y.LOAN.CODE:"*":Y.DISBURSE.DATE.DIS:"*":Y.DISBURSE.AMT:"*":Y.AA.MATURITY.DATE.DIS:"*":Y.FIRST.PAY.DATE.DIS:"*":Y.BILL.AMT:"*":Y.AA.RATE:"*":Y.CURR.TYPE:"*":Y.JUD.COLL:"*":Y.DEBT.RISK.CLASS:"*":Y.PRINCI.PROV:"*":Y.VINC.TYPE:"*":Y.LOCATION:"*":Y.COMP.CODE:"*":Y.RESTRUCT.DATE.DIS:"*":Y.RENEWAL.DATE.DIS:"*":Y.EARLY.PAY.OFF:"*":Y.CHG.RATE:"*":Y.PRINCI.PROV:"*":Y.INT.PROV.REQ:"*":Y.REVIEW.DATE.INT.RATE.DIS:"*":Y.PAMENT.DATE.EXTRA.BILL.DIS:"*":Y.PAMENT.AMT:"*":Y.RESTRUCT.TYPE:"*":Y.CUSTOMER.TYPE:"*":Y.CREDIT.FACILITY
RETURN
AA.ARR.TERM.AMT.READ:
**-------------------
    AA.TERM.AMT.ERR   = "";    R.AA.ARR.TERM.AMT = ""
    CALL F.READ(FN.AA.ARR.TERM.AMOUNT,Y.AA.TERM.AMT.REC,R.AA.ARR.TERM.AMT,F.AA.ARR.TERM.AMOUNT,AA.TERM.AMT.ERR)
RETURN

GET.LOAN.STATUS:
*--------------*
    ArrangementID = Y.AA.ARR.ID
    idPropertyClass = 'OVERDUE'; Y.LOAN.STATUS = ''
    idProperty = ''; returnIds = ''; returnConditions = ''; returnError = ''; effectiveDate = ''
    CALL AA.GET.ARRANGEMENT.CONDITIONS(ArrangementID, idPropertyClass, idProperty, effectiveDate, returnIds, returnConditions, returnError)
    R.AA.OVERDUE = RAISE(returnConditions)
    Y.LOAN.STATUS = R.AA.OVERDUE<AA.OD.LOCAL.REF,Y.L.LOAN.STATUS.1.POS>
RETURN

GET.CLOSED.LOAN.CHK:
********************
    ERR.AA.ACTIVITY.HISTORY = ''; R.AA.ACTIVITY.HISTORY = ''; Y.CLOSE.LN.FLG = 0; YACT.IS.STAT = ''; YACT.ID.ARR = ''
    CALL F.READ(FN.AA.ACTIVITY.HISTORY,Y.AA.ARR.ID,R.AA.ACTIVITY.HISTORY,F.AA.ACTIVITY.HISTORY,ERR.AA.ACTIVITY.HISTORY)
    IF R.AA.ACTIVITY.HISTORY THEN
        YACT.ID.ARR = R.AA.ACTIVITY.HISTORY<AA.AH.ACTIVITY>
        YACT.IS.STAT = R.AA.ACTIVITY.HISTORY<AA.AH.ACT.STATUS>
        CHANGE @VM TO @FM IN YACT.ID.ARR
        CHANGE @SM TO @FM IN YACT.ID.ARR
        CHANGE @VM TO @FM IN YACT.IS.STAT
        CHANGE @SM TO @FM IN YACT.IS.STAT
    END
    ERR.REDO.APAP.PROPERTY.PARAM = ''; R.REDO.APAP.PROPERTY.PARAM = ''; YPAYOFF.ACT = ''; YPAY.CNT = 0
    CALL F.READ(FN.REDO.APAP.PROPERTY.PARAM,Y.MAIN.PROD.GROUP,R.REDO.APAP.PROPERTY.PARAM,F.REDO.APAP.PROPERTY.PARAM,ERR.REDO.APAP.PROPERTY.PARAM)
    IF R.REDO.APAP.PROPERTY.PARAM THEN
        YPAYOFF.ACT = R.REDO.APAP.PROPERTY.PARAM<PROP.PARAM.PAYOFF.ACTIVITY>
        YPAY.CNT = DCOUNT(YPAYOFF.ACT,@VM)
    END

    YCNT = 1
    LOOP
    WHILE YCNT LE YPAY.CNT
        YPAYOFF.ACT.1 = ''
        YPAYOFF.ACT.1 = R.REDO.APAP.PROPERTY.PARAM<PROP.PARAM.PAYOFF.ACTIVITY,YCNT>
        LOCATE YPAYOFF.ACT.1 IN YACT.ID.ARR<1> SETTING CHG.POSN.1 THEN
            YARR.STAT = YACT.IS.STAT<CHG.POSN.1>
            IF YARR.STAT EQ 'AUTH' OR YARR.STAT EQ 'DELETE-REV' THEN
                Y.CLOSE.LN.FLG = 1
                YDE15.CLOSE.LN.FLG = 1
                YCNT = YPAY.CNT + 1
                CONTINUE
            END
        END
        YCNT += 1 ;* R22 Auto conversion
    REPEAT
RETURN

INIT.VAL:
*********
    C$SPARE(451) = ''; C$SPARE(452) = ''; C$SPARE(453) = ''; C$SPARE(454) = ''; C$SPARE(455) = ''
    C$SPARE(456) = ''; C$SPARE(457) = ''; C$SPARE(458) = ''; C$SPARE(459) = ''; C$SPARE(460) = ''
    C$SPARE(461) = ''; C$SPARE(462) = ''; C$SPARE(463) = ''; C$SPARE(464) = ''; C$SPARE(465) = ''
    C$SPARE(466) = ''; C$SPARE(467) = ''; C$SPARE(468) = ''; C$SPARE(469) = ''; C$SPARE(470) = ''
    C$SPARE(471) = ''; C$SPARE(472) = ''; C$SPARE(473) = ''; C$SPARE(474) = ''; C$SPARE(475) = ''
    C$SPARE(476) = ''; C$SPARE(477) = ''; C$SPARE(478) = ''; C$SPARE(479) = ''; C$SPARE(480) = ''
    C$SPARE(481) = ''; C$SPARE(482) = ''; C$SPARE(483) = ''; C$SPARE(484) = ''; C$SPARE(485) = ''
    C$SPARE(486) = ''; C$SPARE(487) = ''; C$SPARE(488) = ''; C$SPARE(489) = ''
RETURN

READ.EB.CONTRAC.BALANCE:
************************
    START.DATE = ''
    START.DATE = YSTART.DTE
    END.DATE = Y.TODAY
    REQUEST.TYPE<4>='ECB'; Y.REGULATORY.ACC.NO = ''; SAVE.ACC.AC = ''; ASSET.TYPE.ARRAY = ''; YPOST.RESTRICT = ''
    AC.LEN = 7      ;* This is length of word 'ACCOUNT'
    PRIN.INT.LEN = 12         ;* This is length of word 'PRINCIPALINT'
    YPRINCIP.GRP = 0; YACCT.GRP = 0; YNAB.STATUS = ''; ERR.ACCOUNT = ''; R.ACCOUNT = ''
    TACCT.VAL = 0; EB.CON.BAL.ERR = ''; R.EB.CON.BAL = ''; YNAB.AMT = 0; CNT.BAL.TYPE = 0
    YPRINCIP.GRP = 0; YACCT.GRP = 0; YNAB.STATUS = ''; DAT.BALANCES = ''; ACCT.SET.STAT =''; ACCT.YINSTALL.CNT = ''
    CALL F.READ(FN.EB.CON.BAL,Y.LOAN.CODE,R.EB.CON.BAL,F.EB.CON.BAL,EB.CON.BAL.ERR)
    IF R.EB.CON.BAL THEN
        Y.CONSOL.KEY = R.EB.CON.BAL<ECB.CONSOL.KEY>
        Y.CONSOL.PART = FIELD(Y.CONSOL.KEY,'.',1,16)
        Y.ASSET.TYPE = R.EB.CON.BAL<ECB.CURR.ASSET.TYPE>
        CTR.BAL.TYPE = 1
        CNT.BAL.TYPE = DCOUNT(Y.ASSET.TYPE,@VM)
        LOOP
        WHILE CTR.BAL.TYPE LE CNT.BAL.TYPE
            ACC.POS = ''
            BAL.TYPE1 = Y.ASSET.TYPE<1,CTR.BAL.TYPE>
            IF BAL.TYPE1[1,3] EQ 'UNC' THEN
                CTR.BAL.TYPE += 1 ;* R22 Auto conversion
                CONTINUE
            END
            LEN.TYPE = LEN(BAL.TYPE1)
            REQ.LEN = BAL.TYPE1[((LEN.TYPE-AC.LEN)+1),AC.LEN]
            REQ.INT.LEN = BAL.TYPE1[((LEN.TYPE-PRIN.INT.LEN)+1),PRIN.INT.LEN]
            IF (REQ.LEN EQ 'ACCOUNT') OR (REQ.INT.LEN EQ 'PRINCIPALINT') THEN
                Y.IN.CONSOL.KEY = Y.CONSOL.PART:'.':BAL.TYPE1         ;*alter the consol key with current balance type in analysis
                Y.VARIABLE = ''
                CALL RE.CALCUL.REP.AL.LINE(Y.IN.CONSOL.KEY,Y.RPRTS,Y.LINES,Y.VARIABLE)
                Y.LINE = Y.RPRTS:'.':Y.LINES
                CALL F.READ(FN.RE.STAT.REP.LINE,Y.LINE,R.LINE,F.RE.STAT.REP.LINE,REP.ERR)
                GOSUB REG.ACCOUNT.NO
            END
            CTR.BAL.TYPE += 1 ;* R22 Auto conversion
        REPEAT
    END
    GOSUB ACC.NAB.PROCESS
    Y.FIN.ECB.AMT.CONS = ABS(Y.FIN.ECB.AMT.CONS)
RETURN

REG.ACCOUNT.NO:
***************
    IF NOT(R.LINE) THEN
        RETURN
    END
    Y.REGULATORY.ACC.NO = R.LINE<RE.SRL.DESC,1>   ;* get accounting account for the current balance type in analysis
    IF Y.REGULATORY.ACC.NO[1,1] EQ '8' THEN
        RETURN
    END
    IF Y.REGULATORY.ACC.NO[1,3] EQ '241' THEN
        RETURN
    END
    LOCATE Y.REGULATORY.ACC.NO IN SAVE.ACC.AC<1> SETTING ACC.POS THEN
        GOSUB CHECK.ASSET.TYPE
    END ELSE
        GOSUB SAVE.UNIQUE.AC.ACC
    END

    IF DAT.BALANCES THEN
        Y.FIN.ECB.AMT.CONS += DAT.BALANCES ;* R22 Auto conversion
    END
    DAT.BALANCES = ''
RETURN

SAVE.UNIQUE.AC.ACC:
*******************
*
    SAVE.ACC.AC<-1> = Y.REGULATORY.ACC.NO
    CALL AA.GET.PERIOD.BALANCES(Y.LOAN.CODE, BAL.TYPE1,REQUEST.TYPE, START.DATE, END.DATE, '',BAL.DETAILS, ERROR.MESSAGE)
    ASSET.TYPE.ARRAY<-1> = BAL.TYPE1
    DAT.BALANCES = BAL.DETAILS<4>
RETURN
*----------------------------------------------------------------------------
SAVE.EXISTING.AC.ACC:
*********************
    CALL AA.GET.PERIOD.BALANCES(Y.LOAN.CODE, BAL.TYPE1,REQUEST.TYPE, START.DATE, END.DATE, '',BAL.DETAILS, ERROR.MESSAGE)
    DAT.BALANCES = BAL.DETAILS<4>
RETURN
*----------------------------------------------------------------------------
CHECK.ASSET.TYPE:
*****************
    LOCATE BAL.TYPE1 IN ASSET.TYPE.ARRAY<1> SETTING ASSET.POS THEN
        ASSET.POS = ''
    END ELSE
        ASSET.TYPE.ARRAY<-1> = BAL.TYPE1
        GOSUB SAVE.EXISTING.AC.ACC
    END
RETURN

ACC.NAB.PROCESS:
****************
    R.REDO.CONCAT.ACC.NAB = ''; NAB.ERR = ''; YACC.NABBAL = ''; YNAB.STATUS = ''; REQUEST.TYPE = ''; YNAB.VAL = 0
    YCR.DTE = ''; YCR.AMT = 0; SUSPEND.VAL = ''; SUSPEND.STAT = ''; SUSPEND.DTE = ''
    SUSPEND.VAL = R.AA.ACCOUNT.DETAILS<AA.AD.SUSPENDED>
    SUSPEND.STAT = R.AA.ACCOUNT.DETAILS<AA.AD.SUSP.STATUS,1>
    SUSPEND.DTE = R.AA.ACCOUNT.DETAILS<AA.AD.SUSP.DATE,1>
    IF SUSPEND.STAT EQ 'SUSPEND' AND SUSPEND.DTE GT Y.TODAY THEN
        RETURN
    END
    CALL F.READ(FN.REDO.CONCAT.ACC.NAB,Y.LOAN.CODE,R.REDO.CONCAT.ACC.NAB,F.REDO.CONCAT.ACC.NAB,NAB.ERR)
    IF NOT(R.REDO.CONCAT.ACC.NAB) THEN
        RETURN
    END
    Y.ACCT.ID = ''; Y.ACCT.ID = R.REDO.CONCAT.ACC.NAB
    BAL.TYPE1 = "OFFDB";   REQUEST.TYPE<4> = "ECB"
    START.DATE = Y.TODAY; END.DATE = Y.TODAY; BAL.DETAILS = 0; ERROR.MESSAGE = ''
    CALL AA.GET.PERIOD.BALANCES(Y.ACCT.ID, BAL.TYPE1,REQUEST.TYPE, START.DATE, END.DATE, '',BAL.DETAILS, ERROR.MESSAGE)
    YCR.AMT = BAL.DETAILS<4>
    YACC.NABBAL = YCR.AMT
    IF YACC.NABBAL THEN
        Y.FIN.ECB.AMT.CONS += YACC.NABBAL ;* R22 Auto conversion
    END
    YACC.NABBAL = ''
RETURN

END
