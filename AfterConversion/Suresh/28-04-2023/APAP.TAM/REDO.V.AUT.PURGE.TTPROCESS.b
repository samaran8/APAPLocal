* @ValidationCode : Mjo5NDU5OTUyMzY6Q3AxMjUyOjE2ODI2NjIxMTM0OTE6MzMzc3U6LTE6LTE6MDowOmZhbHNlOk4vQTpSMjFfQU1SLjA6LTE6LTE=
* @ValidationInfo : Timestamp         : 28 Apr 2023 11:38:33
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : 333su
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.TAM
*-----------------------------------------------------------------------------
* <Rating>12</Rating>
*-----------------------------------------------------------------------------
SUBROUTINE REDO.V.AUT.PURGE.TTPROCESS
*-----------------------------------------------------------------------------
*DESCRIPTION:
*------------
*This routine is an authorisation routine attached to below versions,
*TELLER, SERVICE.CREATE

* Input/Output:
*--------------
* IN  : -NA-
* OUT : -NA-
*
* Dependencies:
*---------------
* CALLS : -NA-
* CALLED BY : -NA-
*
* Revision History:
*------------------
*   Date               who           Reference            Description
* 05-MAY-2010        Prabhu.N       ODR-2009-10-0322    Initial Creation
*Modification History:
*DATE                 WHO                  REFERENCE                     DESCRIPTION
*18/04/2023      CONVERSION TOOL     AUTO R22 CODE CONVERSION             NOCHANGE
*18/04/2023         SURESH           MANUAL R22 CODE CONVERSION           NOCHANGE
*------------------------------------------------------------------------------------------
    $INSERT I_EQUATE
    $INSERT I_COMMON
    $INSERT I_F.TELLER
    $INSERT I_F.USER
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.TELLER.DEFAULT
    $INSERT I_F.REDO.TELLER.PROCESS
    $INSERT I_F.REDO.PIGGY.STOCK.BY.DATE
    $INSERT I_F.REDO.TT.GROUP.PARAM
    $INSERT I_F.REDO.TELLER.REJECT
    $INSERT I_F.REDO.TFS.PROCESS
    $INSERT I_F.REDO.TFS.REJECT
    $INSERT I_F.REDO.H.PIGGY.BANKS
    $INSERT I_F.REDO.H.MAIN.COMPANY
    $INSERT I_F.REDO.ITEM.STOCK
    $INSERT I_F.REDO.ITEM.STOCK.BY.DATE
    $INSERT I_F.T24.FUND.SERVICES

    GOSUB INIT
    GOSUB PROCESS
RETURN
INIT:

    LREF.FIELDS='L.TT.PROCESS':@FM:'L.TT.PROCESS':@FM:'L.TT.PROCESS':@FM:'L.US.IDC.BR':@VM:'L.US.IDC.CODE'
    LREF.POS=''
    LREF.APPLICATION='TELLER':@FM:'T24.FUND.SERVICES':@FM:'FUNDS.TRANSFER':@FM:'USER'
    CALL MULTI.GET.LOC.REF(LREF.APPLICATION,LREF.FIELDS,LREF.POS)
    VAR.TELLER.PROCESS.ID.POS=LREF.POS<1,1>
    VAR.TFS.PROCESS.ID.POS=LREF.POS<2,1>
    VAR.FT.PROCESS.ID.POS=LREF.POS<3,1>
    POS.BRANCH = LREF.POS<4,1>
    POS.DEPT = LREF.POS<4,2>


    FN.REDO.TELLER.PROCESS='F.REDO.TELLER.PROCESS'
    F.REDO.TELLER.PROCESS=''
    CALL OPF(FN.REDO.TELLER.PROCESS,F.REDO.TELLER.PROCESS)

    FN.REDO.ITEM.STOCK = 'F.REDO.ITEM.STOCK'
    F.REDO.ITEM.STOCK =''
    CALL OPF(FN.REDO.ITEM.STOCK,F.REDO.ITEM.STOCK)

    FN.REDO.ITEM.STOCK.BY.DATE = 'F.REDO.ITEM.STOCK.BY.DATE'
    F.REDO.ITEM.STOCK.BY.DATE = ''
    CALL OPF(FN.REDO.ITEM.STOCK.BY.DATE,F.REDO.ITEM.STOCK.BY.DATE)


    FN.USER='F.USER'
    F.USER = ''
    CALL OPF(FN.USER,F.USER)

    FN.REDO.PIGGY.STOCK.BY.DATE = 'F.REDO.PIGGY.STOCK.BY.DATE'
    F.REDO.PIGGY.STOCK.BY.DATE = ''
    CALL OPF(FN.REDO.PIGGY.STOCK.BY.DATE,F.REDO.PIGGY.STOCK.BY.DATE)

    FN.REDO.TELLER.REJECT='F.REDO.TELLER.REJECT'
    F.REDO.TELLER.REJECT=''
    CALL OPF(FN.REDO.TELLER.REJECT,F.REDO.TELLER.REJECT)

    FN.REDO.H.MAIN.COMPANY ='F.REDO.H.MAIN.COMPANY'
    F.REDO.H.MAIN.COMPANY = ''
    CALL OPF(FN.REDO.H.MAIN.COMPANY,F.REDO.H.MAIN.COMPANY)

    FN.REDO.H.PIGGY.BANKS = 'F.REDO.H.PIGGY.BANKS'
    F.REDO.H.PIGGY.BANKS = ''
    CALL OPF(FN.REDO.H.PIGGY.BANKS,F.REDO.H.PIGGY.BANKS)

    FN.REDO.TFS.PROCESS='F.REDO.TFS.PROCESS'
    F.REDO.TFS.PROCESS=''
    CALL OPF(FN.REDO.TFS.PROCESS,F.REDO.TFS.PROCESS)

    FN.REDO.TFS.REJECT='F.REDO.TFS.REJECT'
    F.REDO.TFS.REJECT=''
    CALL OPF(FN.REDO.TFS.REJECT,F.REDO.TFS.REJECT)

    FN.TELLER.DEFAULT = 'F.TELLER.DEFAULT'
    F.TELLER.DEFAULT = ''
    CALL OPF(FN.TELLER.DEFAULT,F.TELLER.DEFAULT)

RETURN

PROCESS:
    IF APPLICATION EQ 'TELLER'  AND V$FUNCTION = "I"  THEN
        VAR.TELLER.PROCESS.ID=R.NEW(TT.TE.LOCAL.REF)<1,VAR.TELLER.PROCESS.ID.POS>
*HD1102996-Instead of deleting the REDO.TELLER.PROCESS record, status is updated in REDO.TELLER.PROCESS as PROCESSED
        CALL F.READ(FN.REDO.TELLER.PROCESS,VAR.TELLER.PROCESS.ID,R.TELLER.PROCESS,F.REDO.TELLER.PROCESS,ERR)
        R.TELLER.PROCESS<TEL.PRO.STATUS>="PROCESSED"
        CALL F.WRITE(FN.REDO.TELLER.PROCESS,VAR.TELLER.PROCESS.ID,R.TELLER.PROCESS)
    END
    IF APPLICATION EQ 'REDO.TELLER.REJECT' AND V$FUNCTION = "I" AND PGM.VERSION EQ ",CREATE" THEN
*HD1102996-Instaed of deleting REDO.TELLER.PROCESS record status is updated as rejected

        CALL F.READ(FN.REDO.TELLER.PROCESS,ID.NEW,R.TELLER.PROCESS,F.REDO.TELLER.PROCESS,ERR)
        R.TELLER.PROCESS<TEL.PRO.STATUS>="REJECTED"
        CALL F.WRITE(FN.REDO.TELLER.PROCESS,ID.NEW,R.TELLER.PROCESS)
    END
    IF APPLICATION EQ 'REDO.TELLER.REJECT' AND PGM.VERSION EQ ",REJECT" THEN
        CALL F.DELETE(FN.REDO.TELLER.REJECT,ID.NEW)
    END
    IF APPLICATION EQ 'REDO.TELLER.PROCESS' AND PGM.VERSION EQ ',CREATE' THEN
*HD1102996-This will remove status rejected from the record of REDO.TELLER.PROCESS
        R.NEW(TEL.PRO.STATUS)=''
        CALL F.DELETE(FN.REDO.TELLER.REJECT,ID.NEW)
    END
    IF APPLICATION EQ 'T24.FUND.SERVICES' AND (V$FUNCTION = "I" OR V$FUNCTION = "A") THEN
        VAR.TFS.PROCESS.ID=R.NEW(TFS.LOCAL.REF)<1,VAR.TFS.PROCESS.ID.POS>
*HD1102996-Instead of deleting the REDO.TFS.PROCESS record, status is updated in REDO.TFS.PROCESS with PROCESSED
        CALL F.READ(FN.REDO.TFS.PROCESS,VAR.TFS.PROCESS.ID,R.TFS.PROCESS,F.REDO.TFS.PROCESS,ERR)
        R.TFS.PROCESS<TFS.PRO.STATUS>='PROCESSED'
        CALL F.WRITE(FN.REDO.TFS.PROCESS,VAR.TFS.PROCESS.ID,R.TFS.PROCESS)
    END
    IF APPLICATION EQ 'REDO.TFS.REJECT' AND V$FUNCTION = "I" AND PGM.VERSION EQ ",CREATE" THEN
**HD1102996-Instead of deleting the REDO.TFS.PROCESS record status is updated as rejected
        CALL F.READ(FN.REDO.TFS.PROCESS,ID.NEW,R.TFS.PROCESS,F.REDO.TFS.PROCESS,ERR)
        R.TFS.PROCESS<TFS.PRO.STATUS>='REJECTED'
        CALL F.WRITE(FN.REDO.TFS.PROCESS,ID.NEW,R.TFS.PROCESS)
    END
    IF APPLICATION EQ 'REDO.TFS.REJECT' AND PGM.VERSION EQ ',REJECT' THEN
*PACS00269503 - S
        SEL.CMD = '' ; SEL.ID = '' ; NOR = '' ; SEL.ERR = ''
        VAR.AZ.ACCT = R.NEW(TFS.REJ.PRIMARY.ACCT)
        SEL.CMD = "SELECT ":FN.TELLER.DEFAULT:" WITH ACCOUNT.1 EQ ":VAR.AZ.ACCT:" AND TRANSACTION.REF EQ ''"
        CALL EB.READLIST(SEL.CMD,SEL.ID,'',NOR,SEL.ERR)
        IF SEL.ID THEN
            CALL F.DELETE(FN.TELLER.DEFAULT,SEL.ID)
        END
*PACS00269503 - E
        CALL F.DELETE(FN.REDO.TFS.REJECT,ID.NEW)
    END
    IF APPLICATION EQ 'REDO.TFS.PROCESS' AND PGM.VERSION EQ ',CREATE' THEN
**HD1102996-This code will remove the status from REDO.TFS.PROCESS application
        R.NEW(TFS.PRO.STATUS)=''
        CALL F.DELETE(FN.REDO.TFS.REJECT,ID.NEW)
    END
    IF APPLICATION EQ 'FUNDS.TRANSFER'  AND V$FUNCTION = "I"  THEN
        VAR.FT.PROCESS.ID=R.NEW(FT.LOCAL.REF)<1,VAR.FT.PROCESS.ID.POS>
        CALL F.READ(FN.REDO.TELLER.PROCESS,VAR.FT.PROCESS.ID,R.TELLER.PROCESS,F.REDO.TELLER.PROCESS,ERR)
        R.TELLER.PROCESS<TEL.PRO.STATUS>="PROCESSED"
        CALL F.WRITE(FN.REDO.TELLER.PROCESS,VAR.FT.PROCESS.ID,R.TELLER.PROCESS)
    END


    IF APPLICATION EQ 'REDO.TELLER.PROCESS' AND PGM.VERSION EQ ",PROCESS" THEN

        Y.CODE.VAL = ''
        Y.CODE = ''
        Y.DES = ''
        Y.GROUP = ID.COMPANY

        CALL F.READ(FN.USER,OPERATOR,R.USE,F.USER,Y.ERR.US)

        Y.BRANCH.LIST = R.USE<EB.USE.LOCAL.REF,POS.BRANCH>

        Y.CODE.LIST   = R.USE<EB.USE.LOCAL.REF,POS.DEPT>

        LOCATE ID.COMPANY IN Y.BRANCH.LIST<1,1,1> SETTING POS.BR THEN
            Y.CODE.VAL = Y.CODE.LIST<1,1,POS.BR>

        END
        Y.AMOUNT.PIGGY = ''
        Y.PIGGY.BANK.VAL = R.NEW(TEL.PRO.SUB.GROUP)
        Y.CUSTOME.NUMBER = R.NEW(TEL.PRO.CLIENT.ID)
        Y.AMOUNT.PIGGY   = R.NEW(TEL.PRO.AMOUNT)
        CHANGE '.' TO '' IN Y.AMOUNT.PIGGY
        CHANGE '0' TO '' IN Y.AMOUNT.PIGGY
        FINDSTR "PIGGY" IN Y.PIGGY.BANK.VAL SETTING POS.AP THEN
            GOSUB PIGGY.BANK
        END
        FINDSTR "ALCANCIAS" IN Y.PIGGY.BANK.VAL SETTING POS.AP THEN
            GOSUB PIGGY.BANK
        END
    END

RETURN
*-----------------------------------------------------------------
PIGGY.BANK:
*-----------------------------------------------------------------

    Y.VAL.QNTY = R.NEW(TEL.PRO.QUANTITY)
    IF NOT(Y.AMOUNT.PIGGY) THEN
        R.NEW(TEL.PRO.STATUS) = 'PROCESSED'
    END

    Y.UPD.FLAG = ''
    Y.SYSTEM = 'SYSTEM'
    CALL CACHE.READ(FN.REDO.H.PIGGY.BANKS,Y.SYSTEM,R.REDO.H.PIGGY.BANKS,Y.ERRR)

    IF R.REDO.H.PIGGY.BANKS THEN
        Y.BRANCH = R.REDO.H.PIGGY.BANKS<REDO.PIG.BRANCH.DEPT>
        Y.COUNT.BRAN = DCOUNT(Y.BRANCH,@VM)
        Y.CNT.BR = 1
        LOOP
        WHILE Y.CNT.BR LE Y.COUNT.BRAN
            IF ID.COMPANY EQ R.REDO.H.PIGGY.BANKS<REDO.PIG.BRANCH.DEPT,Y.CNT.BR> THEN
                Y.CODE.VAL.1 = R.REDO.H.PIGGY.BANKS<REDO.PIG.BRANCH.DEPT,Y.CNT.BR>
                IF Y.CODE.VAL AND Y.CODE.VAL EQ R.REDO.H.PIGGY.BANKS<REDO.PIG.DEPT,Y.CNT.BR> THEN
                    GOSUB UPD.VAL.1
                END
                IF NOT(Y.CODE.VAL) AND NOT(R.REDO.H.PIGGY.BANKS<REDO.PIG.DEPT,Y.CNT.BR>) THEN
                    GOSUB UPD.VAL.2
                END
            END
            Y.CNT.BR = Y.CNT.BR + 1
        REPEAT
    END
    CURR.NO.VALUE = R.REDO.H.PIGGY.BANKS<REDO.PIG.CURR.NO>
    R.REDO.H.PIGGY.BANKS<REDO.PIG.CURR.NO> = CURR.NO.VALUE + 1
    INPUTTER = TNO:'_':OPERATOR
    AUTHORISER = TNO:'_':OPERATOR
    TEMPTIME = OCONV(TIME(),"MTS")
    TEMPTIME = TEMPTIME[1,5]
    CONVERT ':' TO '' IN TEMPTIME
    CHECK.DATE = DATE()
    DATE.TIME = OCONV(CHECK.DATE,"DY2"):OCONV(CHECK.DATE,"DM"):OCONV(CHECK.DATE,"DD"):TEMPTIME
    R.REDO.H.PIGGY.BANKS<REDO.PIG.INPUTTER> = INPUTTER
    R.REDO.H.PIGGY.BANKS<REDO.PIG.DATE.TIME> = DATE.TIME
    R.REDO.H.PIGGY.BANKS<REDO.PIG.AUTHORISER> = AUTHORISER
    Y.ITEM.CODE = R.REDO.H.PIGGY.BANKS<REDO.PIG.ITEM.CODE>
    CALL F.WRITE(FN.REDO.H.PIGGY.BANKS,Y.SYSTEM,R.REDO.H.PIGGY.BANKS)
    GOSUB PIGGY.INV.STOCK
RETURN

*------------
UPD.VAL.1:
*------------
    IF R.NEW(TEL.PRO.QUANTITY) THEN
        Y.QNTY.VAL = R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> - R.NEW(TEL.PRO.QUANTITY)
    END ELSE
        Y.QNTY.VAL = R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> - 1
    END
    IF R.NEW(TEL.PRO.QUANTITY) THEN
        R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> = R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> - R.NEW(TEL.PRO.QUANTITY)
    END ELSE
        R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> = R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> - 1
    END
RETURN
*------------
UPD.VAL.2:
*------------
    IF R.NEW(TEL.PRO.QUANTITY) THEN
        Y.QNTY.VAL = R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> - R.NEW(TEL.PRO.QUANTITY)
    END ELSE
        Y.QNTY.VAL = R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> -1
    END
    IF R.NEW(TEL.PRO.QUANTITY) THEN
        R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> = R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> - R.NEW(TEL.PRO.QUANTITY)
    END ELSE
        R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> = R.REDO.H.PIGGY.BANKS<REDO.PIG.NO.AVBL,Y.CNT.BR> - 1
    END
RETURN
*-----------------------------------------------------------------
PIGGY.INV.STOCK:
*-----------------------------------------------------------------

    FN.REDO.TT.GROUP.PARAM = 'F.REDO.TT.GROUP.PARAM'
    F.REDO.TT.GROUP.PARAM = ''
    CALL OPF(FN.REDO.TT.GROUP.PARAM,F.REDO.TT.GROUP.PARAM)

    Y.SUB.GROUP = ''
    CALL CACHE.READ(FN.REDO.TT.GROUP.PARAM,'SYSTEM',R.REDO.TT.GROUP.PARAM,GRO.ERR)
    VAR.GROUP = R.REDO.TT.GROUP.PARAM<TEL.GRO.SUB.GROUP>
    Y.CATEGORY = R.REDO.TT.GROUP.PARAM<TEL.GRO.CATEGORY>
    LOCATE Y.PIGGY.BANK.VAL IN VAR.GROUP<1,1,1> SETTING POS.PIGGY THEN
        Y.ACOUNT = Y.CATEGORY<1,1,POS.PIGGY>
        Y.ACCOUNT.PIGGY = 'PL':Y.ACOUNT
    END
    IF Y.CODE.VAL THEN
        Y.ID.PIGGY = ID.COMPANY:"-":Y.CODE.VAL
    END ELSE
        Y.ID.PIGGY = ID.COMPANY
    END
    CALL F.READ(FN.REDO.PIGGY.STOCK.BY.DATE,Y.ID.PIGGY,R.REDO.PIGGY.STOCK.BY.DATE,F.REDO.PIGGY.STOCK.BY.DATE,Y.ERR.PIGGY)

    Y.DATE.RPT = TODAY

    Y.CONCEPT = R.NEW(TEL.PRO.PAYMENT.TYPE)
    Y.DATE.COUNT1 = DCOUNT(R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.DATE>,@VM)
    Y.DATE.COUNT = Y.DATE.COUNT1 + 1
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.DATE,Y.DATE.COUNT> =   Y.DATE.RPT
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.BRANCH,Y.DATE.COUNT>=  ID.COMPANY
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.ITEM.CODE,Y.DATE.COUNT>= Y.ITEM.CODE
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.STATUS,Y.DATE.COUNT> =   R.NEW(TEL.PRO.SUB.GROUP)
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.ACCOUNT,Y.DATE.COUNT> = R.NEW(TEL.PRO.CLIENT.ID)
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.PAYMENT,Y.DATE.COUNT>  = Y.CONCEPT
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.QNTY,Y.DATE.COUNT>    = Y.QNTY.VAL
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.INPUT,Y.DATE.COUNT> =  OPERATOR
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.AUTH,Y.DATE.COUNT> =   OPERATOR
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.TRANS.REF,Y.DATE.COUNT> = ID.NEW
    R.REDO.PIGGY.STOCK.BY.DATE<PIGGY.RPT.AMT,Y.DATE.COUNT> = R.NEW(TEL.PRO.AMOUNT)
    CALL F.WRITE(FN.REDO.PIGGY.STOCK.BY.DATE,Y.ID.PIGGY,R.REDO.PIGGY.STOCK.BY.DATE)
    GOSUB UPD.ITEM.STOCK
    GOSUB UPD.ITEM.STOCK.RPT
RETURN

UPD.ITEM.STOCK:
*-------------------------------
    Y.ITEM.STOCK.ID = Y.ID.PIGGY
    CALL F.READ(FN.REDO.ITEM.STOCK,Y.ITEM.STOCK.ID,R.REDO.ITEM.STOCK,F.REDO.ITEM.STOCK,Y.ERR)
    IF R.REDO.ITEM.STOCK THEN
        LOCATE Y.ITEM.CODE IN R.REDO.ITEM.STOCK<ITEM.REG.ITEM.CODE,1> SETTING POS THEN
            Y.BAL = R.REDO.ITEM.STOCK<ITEM.REG.BAL,POS>
            R.REDO.ITEM.STOCK<ITEM.REG.BAL,POS> = Y.BAL - R.NEW(TEL.PRO.QUANTITY)
        END
        CALL F.WRITE(FN.REDO.ITEM.STOCK,Y.ITEM.STOCK.ID,R.REDO.ITEM.STOCK)
    END
RETURN


*-------------------------------
UPD.ITEM.STOCK.RPT:
*-------------------------------

    Y.ITEM.STOCK.RPT.ID = Y.ID.PIGGY:'.':Y.ITEM.CODE<1,1>
    CALL F.READ(FN.REDO.ITEM.STOCK.BY.DATE,Y.ITEM.STOCK.RPT.ID,R.REDO.ITEM.STOCK.BY.DATE,F.REDO.ITEM.STOCK.BY.DATE,Y.ER.RPT)
    Y.DATE.RPT = TODAY
    IF R.REDO.ITEM.STOCK.BY.DATE THEN
        LOCATE Y.DATE.RPT IN R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.DATE,1> SETTING POS.RPT THEN
            R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.ASSIGNED,POS.RPT>            =   R.NEW(TEL.PRO.QUANTITY) + R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.ASSIGNED,POS.RPT>
            R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.AVALIABLE,POS.RPT>           =   R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.AVALIABLE,POS.RPT> - R.NEW(TEL.PRO.QUANTITY)
        END ELSE
            Y.DATE.COUNT1 = DCOUNT(R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.DATE>,@VM)
            Y.DATE.COUNT = Y.DATE.COUNT1 + 1
            R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.DATE,Y.DATE.COUNT>                =   Y.DATE.RPT
            R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.ITEM.CODE,Y.DATE.COUNT>           =   Y.ITEM.CODE<1,1>
            R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.INITIAL.STOCK,Y.DATE.COUNT>       =   R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.AVALIABLE,Y.DATE.COUNT1>
            R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.ASSIGNED,Y.DATE.COUNT>            =   R.NEW(TEL.PRO.QUANTITY)
            R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.AVALIABLE,Y.DATE.COUNT>           =   R.REDO.ITEM.STOCK.BY.DATE<ITEM.RPT.AVALIABLE,Y.DATE.COUNT1> - R.NEW(TEL.PRO.QUANTITY)

        END
    END

    CALL F.WRITE(FN.REDO.ITEM.STOCK.BY.DATE,Y.ITEM.STOCK.RPT.ID,R.REDO.ITEM.STOCK.BY.DATE)
RETURN

END
