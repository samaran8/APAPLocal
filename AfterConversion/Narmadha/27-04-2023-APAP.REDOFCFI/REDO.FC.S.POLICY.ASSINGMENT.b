* @ValidationCode : MjotMTQxOTEyNzI5NTpVVEYtODoxNjgyNTcyMTYyMTIzOkFkbWluOi0xOi0xOjA6MDpmYWxzZTpOL0E6UjIxX0FNUi4wOi0xOi0x
* @ValidationInfo : Timestamp         : 27 Apr 2023 10:39:22
* @ValidationInfo : Encoding          : UTF-8
* @ValidationInfo : User Name         : Admin
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOFCFI
SUBROUTINE REDO.FC.S.POLICY.ASSINGMENT
*-----------------------------------------------------------------------------
* Developer    : mgudino@temenos.com
* Date         : 2011-06-13
* Description  : This routine its on charge TO ASSING THE CORRECT POLICY TO THE CORRECT COLLATERAL
*                BASED ON RULES PARAMETRISED IN REDO.FC.PROD.COLL.POLICY
* Modified by:    : Jorge Valarezo
* Date            : 01.03.2012
* Notes           : PACS00167218 Resolution
* Modification History:
* Date                 Who                              Reference                            DESCRIPTION
*04-04-2023            CONVERSION TOOL                AUTO R22 CODE CONVERSION           VM TO @VM ,FM TO @FM SM TO @SM and I++ to I=+1
*04-04-2023          jayasurya H                       MANUAL R22 CODE CONVERSION            CALL ROUTINE METHOD ADDED
*-----------------------------------------------------------------------------
* Input/Output:
* -------------
* In  :  Y.POLICY.TYPE
* Out :
*-----------------------------------------------------------------------------


* <region name="INCLUDES">
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_GTS.COMMON
    $INSERT I_EB.TRANS.COMMON

    $INSERT I_F.REDO.FC.COLL.TYPE.PARAMS
    $INSERT I_F.REDO.CREATE.ARRANGEMENT
    $INSERT I_F.REDO.FC.PROD.COLL.POLICY
    $INSERT I_F.APAP.H.INSURANCE.DETAILS
    $INSERT I_REDO.CREATE.ARRANGEMENT.COMMON
    $INSERT I_F.REDO.POLIZA.CARGOS
    
* </region>

    GOSUB INITIALISE
    GOSUB PROCESS

RETURN

* <region name="INITIALISE">
INITIALISE:
    Y.COLL.IDS = R.NEW(REDO.FC.SEC.NO.STATE.BR)
    Y.COLL.IDS<-1> = R.NEW(REDO.FC.SEC.NO.STATE.VS)

    Y.COLL.CODES = R.NEW(REDO.FC.TYPE.OF.SEC.BR)
    Y.COLL.CODES<-1> = R.NEW(REDO.FC.TYPE.OF.SEC.VS)

    Y.COLL.TYPES = R.NEW(REDO.FC.SEC.CLASSIFY.BR)
    Y.COLL.TYPES<-1> = R.NEW(REDO.FC.SEC.CLASSIFY.VS)

    Y.ARR.PRODUCT =  R.NEW(REDO.FC.PRODUCT)         ;* PRODUCTO

    Y.POL.TYPE = ''
    Y.POL.MAND = ''

    Y.ID.AUX = ''
    K.POS = 1
    Y.ID = 1
    R.REDO.FC.PROD.COLL.POLICY = ''
    Y.EXISTE = ''
    Y.TYPE.TEXT = ''

*WMEZA
    Y.COLLATERAL.CODE = ''
    Y.COLLATERAL.TYPE = ''
    Y.POLICY.TYPE = ''
    X.I = 1

    FN.APAP.H.INSURANCE.DETAILS = 'F.APAP.H.INSURANCE.DETAILS'
    F.APAP.H.INSURANCE.DETAILS = ''

    CALL OPF(FN.APAP.H.INSURANCE.DETAILS, F.APAP.H.INSURANCE.DETAILS)

    FN.REDO.FC.PROD.COLL.POLICY = 'F.REDO.FC.PROD.COLL.POLICY'
    F.REDO.FC.PROD.COLL.POLICY = ''

    FN.REDO.POLIZA.CARGOS = 'F.REDO.POLIZA.CARGOS'
    F.REDO.POLIZA.CARGOS = ''

    CALL OPF(FN.REDO.FC.PROD.COLL.POLICY, F.REDO.FC.PROD.COLL.POLICY)
    CALL OPF(FN.REDO.POLIZA.CARGOS,F.REDO.POLIZA.CARGOS)
    Y.FIND.PAUX.POL= ''
    Y.FIND.TYPE.POLICE = ''
    Y.POS.POL.ALLOW = ''
    Y.FIND.POS.POL.ALLOW = ''
    Y.TYPE.POL.ALLOW = ''
RETURN
* </region>

* <region name="PROCESS">
PROCESS:
*WMEZA FEB 17 12
    CALL CACHE.READ(FN.REDO.FC.PROD.COLL.POLICY, Y.ARR.PRODUCT, R.REDO.FC.PROD.COLL.POLICY, Y.REDO.FC.POL.ERR)

    Y.COLLATERAL.CODE = R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.COLLATERAL.CODE>
    Y.COLLATERAL.TYPE = R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.COLLATERAL.TYPE>
    Y.POLICY.TYPE = R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.POLICY.TYPE>

*ES UN PRODUCTO Q NECESITA GARANTIA
    IF Y.COLLATERAL.CODE  AND Y.COLLATERAL.TYPE  AND Y.POLICY.TYPE  THEN
        GOSUB PROCESS.POLIZA      ;*2
        GOSUB PROCESS.POLIZA.PRESTAMO
        GOSUB THROW.ERROR
        RETURN
    END     ;*PRODUCTO QUE NO NECESITA GARANTIA
*BARRER TIPO DE POLIZAS DE LA TABLA DE PARAMETROS
    Y.TIPO.POLIZAS.PARAM = DCOUNT(R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.TIPO.POLIZA>, @VM)
    X.I = 1
    FOR X.I=1 TO Y.TIPO.POLIZAS.PARAM
*TIPO DE POLIZAS QUE SEAN SI DEBEN ESTAR EN LA PANTALLA DE PRESTAMO
        IF R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.PRES.MANDATORIO><1,X.I> EQ 'SI' THEN
            LOCATE R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.TIPO.POLIZA><1,X.I> IN R.NEW(REDO.FC.INS.POLICY.TYPE)<1,1> SETTING Y.POS.POLI.PRES THEN
            END ELSE      ;*SI NO ESTA EL TIPO DE POLIZA INGRESADO EN LA PARAMETRIZACION-->ERROR
                AF = REDO.FC.INS.POLICY.TYPE
                ETEXT = 'EB-FC-NEED-INSURANCE':@FM:R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.TIPO.POLIZA><1,X.I>
                CALL STORE.END.ERROR
            END
        END
    NEXT X.I
    GOSUB PROCESS.POLIZA.PRESTAMO


RETURN
* </region>


* <region name="PROCESS.POLIZA.PRESTAMO">
PROCESS.POLIZA.PRESTAMO:
* Recorrer todas las polizas y asignar ID auxiliar a las atadas al prestamo
    R.POLIZAS = R.NEW(REDO.FC.INS.POLICY.TYPE)
    Y.CONT.POLIZAS = DCOUNT(R.POLIZAS,@VM)
    Y.PAY.TYPE.TEMP = ''
    IF NOT(Y.TYPE.POL.ALLOW) THEN
        Y.TYPE.POL.ALLOW = R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.TIPO.POLIZA>
    END
    FOR Y.K = 1 TO Y.CONT.POLIZAS

        IF NOT( R.NEW(REDO.FC.POLICY.NUMBER.AUX)<1,Y.K>) AND R.NEW(REDO.FC.INS.POLICY.TYPE)<1,Y.I> AND  R.NEW(REDO.FC.CLASS.POLICY)<1,Y.I>  THEN
            CALL APAP.REDOFCFI.redoFcGenPolId(Y.ID);* R22 Manual conversion - CALL method format changed
            Y.ID.AUX = Y.ID
            R.NEW(REDO.FC.POLICY.NUMBER.AUX)<1,Y.K> = Y.ID.AUX
        END

        Y.CONT.PAY = DCOUNT(R.NEW(REDO.FC.INS.MON.POL.AMT)<1,Y.K>,@VM)

        LOCATE R.POLIZAS<1,Y.K> IN Y.TYPE.POL.ALLOW<1,1> SETTING Y.POS.POL.ALLOW THEN
            Y.FIND.POS.POL.ALLOW = 1
        END ELSE
            AF = REDO.FC.INS.POLICY.TYPE
            ETEXT = 'EB-FC-INSURANCE-NALLOW':@FM:R.POLIZAS<1,Y.K>
            CALL STORE.END.ERROR
        END


    NEXT Y.K


RETURN
*</region>

***************
ASIGN.PAY.TYPE:

    SELECT.STATEMENT = 'SELECT ':FN.REDO.POLIZA.CARGOS:' ':'WITH PROPIEDAD LIKE ':Y.PAY.TYPE.TEMP:' ONLY'
    REDO.POLIZA.CARGOS.LIST = ''
    LIST.NAME = ''
    SELECTED = ''
    SYSTEM.RETURN.CODE = ''
    Y.CARGO = ''
    CALL EB.READLIST(SELECT.STATEMENT,REDO.POLIZA.CARGOS.LIST,LIST.NAME,SELECTED,SYSTEM.RETURN.CODE)
    LOOP
        REMOVE Y.CARGO FROM REDO.POLIZA.CARGOS.LIST SETTING POS
    WHILE Y.CARGO:POS
        CALL F.READ(FN.REDO.POLIZA.CARGOS, Y.CARGO, R.REDO.POLIZA.CARGOS, F.REDO.POLIZA.CARGOS, YERR)
        Y.PAY.TYPE.TEMP = R.REDO.POLIZA.CARGOS<REDO.CAR.TIPO.PAGO>
    REPEAT

RETURN
**************

* <region name="PROCESS.POLIZA">
PROCESS.POLIZA:
* Do the search in Policy type, when is needed by the the COLL type
    FOR Y.Z = 1 TO 2
        Y.COLLATERAL.CODE = Y.COLL.CODES<Y.Z>
        Y.COLLATERAL.TYPE = Y.COLL.TYPES<Y.Z>

        IF Y.COLLATERAL.CODE THEN
            GOSUB PROCESS.POL.ID
        END
    NEXT

RETURN
* </region>

* <region name="PROCESS.POL.ID">

PROCESS.POL.ID:

* Do the searh to Policy type, when is needed by the the COLL type

    CALL CACHE.READ(FN.REDO.FC.PROD.COLL.POLICY, Y.ARR.PRODUCT, R.REDO.FC.PROD.COLL.POLICY, Y.REDO.FC.POL.ERR)
*CALL F.READ(FN.REDO.FC.PROD.COLL.POLICY,Y.ARR.PRODUCT,R.REDO.FC.PROD.COLL.POLICY,F.REDO.FC.PROD.COLL.POLICY,Y.REDO.FC.POL.ERR)

    Y.TYPE.POL.ALLOW = R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.TIPO.POLIZA>

    IF Y.REDO.FC.POL.ERR NE '' THEN
        ETEXT = 'EB-FC-NO-PARAMS':@FM:Y.ARR.PRODUCT
        CALL STORE.END.ERROR
        RETURN
    END

    Y.COLL.COUNT = DCOUNT(Y.COLLATERAL.CODE,@VM)

    FOR Y.I = 1 TO Y.COLL.COUNT
        Y.COLL.CODE = Y.COLLATERAL.CODE<1,Y.I>
        Y.COLL.TYPE = Y.COLLATERAL.TYPE<1,Y.I>
        Y.FIND.TYPE.POLICE = ''
*1.- BUSCAR SI EXISTE EL COLL CODE Y COLL TYPE EN PROD.POLICY
        GOSUB COLL.CODE.TYPE

        Y.POL.COUNT = DCOUNT(Y.POL.TYPE,@FM)

        Y.TYPE.POL.ALLOW = R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.TIPO.POLIZA>:@VM:Y.POL.TYPE
        CHANGE @FM TO @VM IN Y.TYPE.POL.ALLOW
* se asigno el Y.POL.TYPE, BUSCALO

        FOR Y.J = 1  TO Y.POL.COUNT
            Y.POL.T = Y.POL.TYPE<Y.J>
            Y.POL.M = Y.POL.MAND<Y.J>
            IF NOT ( Y.FIND.TYPE.POLICE ) THEN
                GOSUB BUSCA.POLL.TYPE
            END
        NEXT Y.J
        IF Y.FIND.TYPE.POLICE THEN
            GOSUB ASIGNA.AUX
        END
    NEXT Y.I

RETURN
* </region>

* <region name="COLL.CODE.TYPE">
COLL.CODE.TYPE:
    LOCATE Y.COLL.CODE IN R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.COLLATERAL.CODE,K.POS> SETTING K.VAR THEN
        K.POS = K.VAR
    END ELSE
        RETURN
    END

    Y.COUNT.TYPES = DCOUNT(R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.COLLATERAL.TYPE,K.POS>,@SM)

    K.POS.I = 1
    Y.POL.TYPE = ''
    Y.POL.MAND = ''
    FOR Y.T = 1 TO Y.COUNT.TYPES

*PARA VER SI HUBO ERROR
        LOCATE Y.COLL.TYPE IN R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.COLLATERAL.TYPE,K.POS,1> SETTING K.VAR THEN

        END ELSE
            ETEXT = 'EB-FC-COLL-NO-COLL-TYPE':@FM:Y.COLLATERAL.TYPE
            CALL STORE.END.ERROR
            RETURN
        END

        LOCATE Y.COLL.TYPE IN R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.COLLATERAL.TYPE,K.POS,K.POS.I> SETTING K.VAR THEN
            Y.POL.TYPE<-1> = R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.POLICY.TYPE,K.POS,K.VAR>
            Y.POL.MAND<-1> = R.REDO.FC.PROD.COLL.POLICY<REDO.CPL.POLI.MANDATORIO,K.POS,K.VAR>
        END

        K.POS.I = K.VAR + 1

    NEXT Y.T

RETURN
* </region>

* <region name="ASIGNA.AUX">
ASIGNA.AUX:

* JP comments
*Valida si ya existe el POlicy NUmber
*    IF R.NEW(REDO.FC.POLICY.NUMBER)<1,Y.J> THEN
*        Y.ID.POL = R.NEW(REDO.FC.POLICY.NUMBER)<1,Y.J>
*        GOSUB POBLAR.POL
*        RETURN
*    END
    IF NOT(Y.FIND.TYPE.POLICE) THEN
        RETURN
    END

    GOSUB VALIDA.POLIZA.AUX

*Valida si ya existe el POlicy Number Aux
    IF Y.EXISTE OR NOT(R.NEW(REDO.FC.INS.POLICY.TYPE)<1,K.POS.TYPE>) OR  NOT(R.NEW(REDO.FC.CLASS.POLICY)<1,K.POS.TYPE>) OR R.NEW(REDO.FC.POLICY.NUMBER.AUX)<1,K.POS.TYPE> THEN
        RETURN
    END

    LOCATE Y.POL.T IN Y.POL.TYPE<1> SETTING K.VAR THEN
        CALL APAP.REDOFCFI.redoFcGenPolId(Y.ID);* R22 Manual conversion - Call method format changed
        Y.ID.AUX = Y.ID
        R.NEW(REDO.FC.POLICY.NUMBER.AUX)<1,K.POS.TYPE> = Y.ID.AUX

        IF Y.COLL.CODE EQ R.NEW(REDO.FC.TYPE.OF.SEC.BR)<1,Y.I> THEN
* buscar el BR q tiene el registro COLL TYPE correspondiente
            NRO.POLS = DCOUNT(R.NEW(REDO.FC.INSUR.POLICY.BR)<1,Y.I>,@SM)
            IF NRO.POLS GT 1 THEN
                NRO.POLS += 1
            END
            R.NEW(REDO.FC.INSUR.POLICY.BR)<1,Y.I,NRO.POLS> =  Y.ID.AUX
        END
        IF Y.COLL.CODE EQ R.NEW(REDO.FC.TYPE.OF.SEC.VS)<1,Y.I> THEN
            NRO.POLS = DCOUNT(R.NEW(REDO.FC.INSUR.POLICY.VS)<1,Y.I>,@SM)
            IF NRO.POLS GT 1 THEN
                NRO.POLS += 1
            END
            R.NEW(REDO.FC.INSUR.POLICY.VS)<1,Y.I,NRO.POLS> = Y.ID.AUX
        END
    END
RETURN
* </region>

* <region name="VALIDA.POLIZA.AUX">
*-----------------
VALIDA.POLIZA.AUX:
    Y.AUX = ''
    R.COLATERAL = ''

    IF Y.COLL.CODE EQ R.NEW(REDO.FC.TYPE.OF.SEC.BR)<1,Y.I> THEN
        R.COLLATERAL = R.NEW(REDO.FC.INSUR.POLICY.BR)
        Y.TYPE.TEXT = 'PROPIEDAD'

    END
    IF Y.COLL.CODE EQ R.NEW(REDO.FC.TYPE.OF.SEC.VS)<1,Y.I> THEN
        R.COLLATERAL = R.NEW(REDO.FC.INSUR.POLICY.VS)
        Y.TYPE.TEXT = 'VEHICULO'
    END

    IF R.NEW(REDO.FC.POLICY.NUMBER.AUX)<1,K.POS.TYPE> THEN
        Y.AUX = R.NEW(REDO.FC.POLICY.NUMBER.AUX)<1,K.POS.TYPE>
        LOCATE Y.AUX IN R.COLLATERAL<1,1,1> SETTING K.VAR THEN
            Y.EXISTE = 1
        END
    END
    GOSUB THROW.ERROR
RETURN
*-----------------
* </region>

* <region name="POBLAR.POL">
POBLAR.POL:
    CALL CACHE.READ(FN.APAP.H.INSURANCE.DETAILS, Y.ID.POL, R.APAP.H.INSURANCE.DETAILS, Y.REDO.FC.POL.ERR)
    IF Y.REDO.FC.POL.ERR NE '' THEN
        ETEXT = 'EB-FC-NO-PARAMS'
        ETEXT<2> = Y.ID.POL
        CALL STORE.END.ERROR
        RETURN
    END

    R.NEW(REDO.FC.SEN.POLICY.NUMBER)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.SEN.POLICY.NUMBER>
    R.NEW(REDO.FC.INS.POLICY.TYPE)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.INS.POLICY.TYPE>
    R.NEW(REDO.FC.CLASS.POLICY)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.CLASS.POLICY>
    R.NEW(REDO.FC.INS.COMPANY)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.INS.COMPANY>
    R.NEW(REDO.FC.CUSTOMER.POL)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.CUSTOMER>
* R.NEW(REDO.FC.INS.OTHER.PARTY) = R.APAP.H.INSURANCE.DETAILS<>
    R.NEW(REDO.FC.CURRENCY)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.CURRENCY>
    R.NEW(REDO.FC.INS.MANAGEM.TYPE)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.MANAGEMENT.TYPE>
    R.NEW(REDO.FC.INS.AMOUNT)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.INS.AMOUNT>
*    R.NEW(REDO.FC.DATE.AMT.SEC)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.AMOUNT.DATE>
    R.NEW(REDO.FC.INS.MON.POL.AMT)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.MON.POL.AMT>
    R.NEW(REDO.FC.INS.DATE.BEG.CHARG)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.INS.START.DATE>
    R.NEW(REDO.FC.INS.DATE.END.CHARG)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.INS.END.DATE>
    R.NEW(REDO.FC.INS.EXTRA.AMT)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.EXTRA.AMT>
    R.NEW(REDO.FC.INS.TOT.PREM.AMT)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.MON.TOT.PRE.AMT>
    R.NEW(REDO.FC.INS.TOTAL.PREM.AMT)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.TOTAL.PRE.AMT>
    R.NEW(REDO.FC.INS.POLI.ORG.DATE)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.POLICY.ORG.DATE>
    R.NEW(REDO.FC.INS.POL.START.DATE)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.POL.START.DATE>
    R.NEW(REDO.FC.INS.POL.EXP.DATE)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.POL.EXP.DATE>
    R.NEW(REDO.FC.INS.REMARKS)<1,Y.J> = R.APAP.H.INSURANCE.DETAILS<INS.DET.REMARKS>

RETURN
* </region>

* <region name="DO.OVERRIDE">
DO.OVERRIDE:
* MANEJAR EL OVERRIDE
    IF TEXT THEN
        NRO.OVE = DCOUNT(R.NEW(REDO.FC.OVERRIDE),@VM) + 1
        CALL STORE.OVERRIDE(NRO.OVE)
    END

RETURN
* </region>
* <region name="BUSCA.POLL.TYPE">
BUSCA.POLL.TYPE:
    ETEXT = ''
    TEXT = ''

    LOCATE Y.POL.T IN R.NEW(REDO.FC.INS.POLICY.TYPE)<1,1> SETTING K.POS.TYPE THEN
        Y.FIND.TYPE.POLICE = "1"
    END ELSE
*Y.POL.M = 'SI'
        AF = REDO.FC.INS.POLICY.TYPE
        ETEXT = 'EB-FC-NEED-INSURANCE':@FM:Y.COLL.CODE:'-':Y.I
    END

RETURN
* </region>
* <region name="THROW.ERROR">
THROW.ERROR:

    IF NOT (Y.FIND.TYPE.POLICE) AND ETEXT THEN
        ETEXT := @VM:Y.TYPE.TEXT
    END

    IF NOT (Y.FIND.TYPE.POLICE) AND Y.POL.M NE 'SI' AND ETEXT THEN
        TEXT = ETEXT
        NRO.OVE = DCOUNT(R.NEW(REDO.FC.OVERRIDE),@VM) + 1
        CALL STORE.OVERRIDE(NRO.OVE)
        RETURN
    END

    IF NOT (Y.FIND.TYPE.POLICE) AND Y.POL.M EQ 'SI' AND ETEXT THEN
        CALL STORE.END.ERROR
        RETURN
    END


RETURN
* </region>
END
