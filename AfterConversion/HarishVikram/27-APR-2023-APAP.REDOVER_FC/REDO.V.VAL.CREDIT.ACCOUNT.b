* @ValidationCode : MjoxMjk4Mjg3ODM0OkNwMTI1MjoxNjgyNDEyMzU4NjAyOkhhcmlzaHZpa3JhbUM6LTE6LTE6MDoxOmZhbHNlOk4vQTpERVZfMjAyMTA4LjA6LTE6LTE=
* @ValidationInfo : Timestamp         : 25 Apr 2023 14:15:58
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : HarishvikramC
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : DEV_202108.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOVER
SUBROUTINE  REDO.V.VAL.CREDIT.ACCOUNT
*--------------------------------------------------------------------------------
*Company   Name    :Asociacion Popular de Ahorros y Prestamos
*Developed By      :PRABHU.N
*Program   Name    :REDO.V.VAL.CREDIT.ACCOUNT
*---------------------------------------------------------------------------------

*DESCRIPTION       :It is a validation routine for payoff version
*LINKED WITH       :

* ----------------------------------------------------------------------------------
*Modification Details:
*=====================
*   Date               who                  Reference                       Description
* 3-JUN-2010        Prabhu.N             ODR-2010-01-0081                  Initial Creation
*13-04-2023         Conversion Tool       R22 Auto Code conversion      FM TO @FM VM TO @VM,++ TO +=1
*13-04-2023          Samaran T            R22 Manual Code conversion           No Changes
*-------------------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.TELLER
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.AA.ACCOUNT.DETAILS
    $INSERT I_F.AA.BILL.DETAILS
    $INSERT I_F.EB.CONTRACT.BALANCES
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.ACCOUNT
    IF VAL.TEXT EQ '' THEN
        GOSUB INIT
    END
RETURN
*----
INIT:
*----

    VAR.ACCOUNT.ID= ECOMI

    IF APPLICATION EQ 'FUNDS.TRANSFER' THEN
        LREF.APP='FUNDS.TRANSFER'
        LREF.FIELDS='L.PRINC.AMT.DUE':@VM:'L.INT.AMT.DUE'
        LREF.POS=''
        CALL MULTI.GET.LOC.REF(LREF.APP,LREF.FIELDS,LREF.POS)

        GOSUB PROCESS

        R.NEW(FT.CREDIT.AMOUNT)=VAR.OS.AMOUNT
        R.NEW(FT.LOCAL.REF)<1,LREF.POS<1,1>>=VAR.PRINCIPAL.DUE
        R.NEW(FT.LOCAL.REF)<1,LREF.POS<1,2>>=VAR.INTEREST.DUE
    END
    IF APPLICATION EQ 'TELLER' THEN
        LREF.APP='TELLER'
        LREF.FIELDS='L.PRINC.AMT.DUE':@VM:'L.INT.AMT.DUE'
        LREF.POS=''
        CALL MULTI.GET.LOC.REF(LREF.APP,LREF.FIELDS,LREF.POS)

        GOSUB PROCESS
        R.NEW(TT.TE.AMOUNT.LOCAL.1)=VAR.OS.AMOUNT
        R.NEW(TT.TE.LOCAL.REF)<1,LREF.POS<1,1>>=VAR.PRINCIPAL.DUE
        R.NEW(TT.TE.LOCAL.REF)<1,LREF.POS<1,2>>=VAR.INTEREST.DUE
    END
RETURN
*-------
PROCESS:
*-------
    FN.EB.CONTRACT.BALANCES='F.EB.CONTRACT.BALANCES'
    F.EB.CONTRACT.BALANCES=''
    CALL OPF(FN.EB.CONTRACT.BALANCES,F.EB.CONTRACT.BALANCES)

    FN.AA.ARRANGEMENT='F.AA.ARRANGEMENT'
    F.AA.ARRANGEMENT=''
    CALL OPF(FN.AA.ARRANGEMENT,F.AA.ARRANGEMENT)

    FN.ACCOUNT='F.ACCOUNT'
    F.ACCOUNT=''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)
    CALL F.READ(FN.ACCOUNT,VAR.ACCOUNT.ID,R.ACCOUNT,F.ACCOUNT,ERR)
    VAR.AA.ID=R.ACCOUNT<AC.ARRANGEMENT.ID>
    CALL F.READ(FN.AA.ARRANGEMENT,VAR.AA.ID,R.AA.ARRANGEMENT,F.AA.ARRANGEMENT,READ.ERR)
    BALANCE.TYPE='DUEACCOUNT'
    GOSUB CALC.PRIN.DUE
    BALANCE.TYPE='DUEPRINCIPALINT'
    GOSUB CALC.INT.DUE
    BALANCE.TYPE='GRCACCOUNT'
    GOSUB CALC.PRIN.DUE
    BALANCE.TYPE='GRCPRINCIPALINT'
    GOSUB CALC.INT.DUE
    BALANCE.TYPE='DELACCOUNT'
    GOSUB CALC.PRIN.DUE
    BALANCE.TYPE='DELPRINCIPALINT'
    GOSUB CALC.INT.DUE
    BALANCE.TYPE='NABACCOUNT'
    GOSUB CALC.PRIN.DUE
    BALANCE.TYPE='NABPRINCIPALINT'
    GOSUB CALC.INT.DUE
    BALANCE.TYPE='DUEPENALTYINT'
    GOSUB CALC.OTHER.BAL
    BALANCE.TYPE='GRCPENALTYINT'
    GOSUB CALC.OTHER.BAL
    BALANCE.TYPE='DELPENALTYINT'
    GOSUB CALC.OTHER.BAL
    BALANCE.TYPE='NABPENALTYINT'
    GOSUB CALC.OTHER.BAL
    BALANCE.TYPE='CURACCOUNT'
    GOSUB CALC.OTHER.BAL
    BALANCE.TYPE='ACCPRINCIPALINT'
    GOSUB CALC.OTHER.BAL
    VAR.OS.AMOUNT=VAR.PRINCIPAL.DUE+VAR.INTEREST.DUE+VAR.OTHER.BAL
RETURN
*-------------
CALC.PRIN.DUE:
*-------------
    Y.BAL.AMOUNT=''
    Y.REQ.TYPE = ''
    START.DATE= R.AA.ARRANGEMENT<AA.ARR.START.DATE>
    END.DATE=TODAY
    EFFECTIVE.DATE = TODAY
    CHARGEOFF.TYPE = ''
    CALL AC.GET.PERIOD.BALANCES(VAR.ACCOUNT.ID,BALANCE.TYPE, Y.REQ.TYPE, START.DATE, END.DATE ,EFFECTIVE.DATE, CHARGEOFF.TYPE, Y.BAL.AMOUNT, ERR.MSG)
    Y.LIM.BALANCE = Y.BAL.AMOUNT<4>
    CHANGE @VM TO @FM IN Y.LIM.BALANCE
    Y.LIM.BALANCE.SIZE=DCOUNT(Y.LIM.BALANCE,@FM)
    Y.LIM.BALANCE=Y.LIM.BALANCE<Y.LIM.BALANCE.SIZE>
    Y.LIM.BALANCE = ABS(Y.LIM.BALANCE)
    VAR.PRINCIPAL.DUE += Y.LIM.BALANCE
    Y.BAL.AMOUNT=''
RETURN
*------------
CALC.INT.DUE:
*------------
    Y.BAL.AMOUNT=''
    Y.REQ.TYPE = ''
    START.DATE= R.AA.ARRANGEMENT<AA.ARR.START.DATE>
    END.DATE=TODAY
    EFFECTIVE.DATE = TODAY
    CHARGEOFF.TYPE = ''
    CALL AC.GET.PERIOD.BALANCES(VAR.ACCOUNT.ID,BALANCE.TYPE, Y.REQ.TYPE, START.DATE, END.DATE ,EFFECTIVE.DATE, CHARGEOFF.TYPE, Y.BAL.AMOUNT, ERR.MSG)
    Y.LIM.BALANCE = Y.BAL.AMOUNT<4>
    CHANGE @VM TO @FM IN Y.LIM.BALANCE
    Y.LIM.BALANCE.SIZE=DCOUNT(Y.LIM.BALANCE,@FM)
    Y.LIM.BALANCE=Y.LIM.BALANCE<Y.LIM.BALANCE.SIZE>
    Y.LIM.BALANCE = ABS(Y.LIM.BALANCE)
    VAR.INTEREST.DUE += Y.LIM.BALANCE
    Y.BAL.AMOUNT=''
RETURN
*------------
CALC.OTHER.BAL:
*------------
    Y.BAL.AMOUNT=''
    Y.REQ.TYPE = ''
    START.DATE= R.AA.ARRANGEMENT<AA.ARR.START.DATE>
    END.DATE=TODAY
    EFFECTIVE.DATE = TODAY
    CHARGEOFF.TYPE = ''
    CALL AC.GET.PERIOD.BALANCES(VAR.ACCOUNT.ID,BALANCE.TYPE, Y.REQ.TYPE, START.DATE, END.DATE ,EFFECTIVE.DATE, CHARGEOFF.TYPE, Y.BAL.AMOUNT, ERR.MSG)
    Y.LIM.BALANCE = Y.BAL.AMOUNT<4>
    CHANGE @VM TO @FM IN Y.LIM.BALANCE
    Y.LIM.BALANCE.SIZE=DCOUNT(Y.LIM.BALANCE,@FM)
    Y.LIM.BALANCE=Y.LIM.BALANCE<Y.LIM.BALANCE.SIZE>
    Y.LIM.BALANCE = ABS(Y.LIM.BALANCE)
    VAR.OTHER.BAL += Y.LIM.BALANCE
    Y.BAL.AMOUNT=''
RETURN
END
