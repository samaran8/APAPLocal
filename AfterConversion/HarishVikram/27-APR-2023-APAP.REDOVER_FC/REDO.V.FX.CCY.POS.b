* @ValidationCode : MjoxNDQ5MTQ4MDcxOkNwMTI1MjoxNjgyNTA3NzM3MDA5OkhhcmlzaHZpa3JhbUM6LTE6LTE6MDowOmZhbHNlOk4vQTpSMjFfQU1SLjA6LTE6LTE=
* @ValidationInfo : Timestamp         : 26 Apr 2023 16:45:37
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : HarishvikramC
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOVER
SUBROUTINE REDO.V.FX.CCY.POS
*---------------------------------------------------------------------------------
* Company Name  : ASOCIACION POPULAR DE AHORROS Y PRESTAMOS
* Developed By  : A C Rajkumar
* Program Name  : REDO.V.FX.CCY.POS
* ODR NUMBER    : ODR-2010-08-0422
*----------------------------------------------------------------------------------
* Description   : This is an authorisation routine which is used to update the table
*                 REDO.FX.CCY.POSN with the nominal and rate
* In parameter  : None
* out parameter : None
*----------------------------------------------------------------------------------
*    Date           Author          Reference           Description
* 05-Nov-2010    A C Rajkumar    ODR-2010-08-0430      Initial creation
* 21-Mar-2011    Sudharsanan S   PACS00034123          Fix for No of auth
* 07-Nov-2011    Pradeep S       PACS00157021          FX Rate calculations changed
*-----------------------------------------------------------------------------
*Modification History
*DATE                       WHO                         REFERENCE                                   DESCRIPTION
*11-04-2023            Conversion Tool             R22 Auto Code conversion                      FM TO @FM VM TO @VM,TNO TO C$T24.SESSION.NO
*11-04-2023              Samaran T                R22 Manual Code conversion                      CALL routine format modified
*-----------------------------------------------------------------------------------------------------------------------------------------------------
*
    $INSERT I_COMMON
    $INSERT I_EQUATE
*
    $INSERT I_F.USER
    $INSERT I_F.FOREX
    $INSERT I_F.TELLER
    $INSERT I_F.FUNDS.TRANSFER
*
    $INSERT I_F.REDO.FX.CCY.POSN
    $INSERT I_EB.EXTERNAL.COMMON
    $USING APAP.TAM
*
    GOSUB PERF.PRE.VAL          ;* PERFORMANCE FIX TO EXCLUDE THE CALL FOR FX POSITION

    IF Y.PERF.FLAG ELSE

        GOSUB OPEN.PARA
        GOSUB LOCAL.REF.POSITIONS
*

        IF V$FUNCTION EQ 'I' OR Y.REC.STAT EQ 'INAU' OR Y.REC.STAT EQ 'INAO' THEN   ;* PACS00240825 - S/E
            IF Y.CHANNEL.TYPE NE 'INTERNET' THEN
                CALL APAP.TAM.redoVauFxttDslip() ;*R22 Manual Code conversion
            END
        END
*
        GOSUB INITIAL.PROCESS
        GOSUB READ.DETS
*
*PACS00034123 - S

        IF V$FUNCTION EQ 'R' OR Y.REC.STAT[1,3] EQ 'RNA' THEN
            GOSUB REVE.PROCESS
        END ELSE
            GOSUB WRITE.DETS
        END
*PACS00034123 - E
    END
RETURN
*
*=========
OPEN.PARA:
*=========

    FN.FOREX = 'F.FOREX'
    F.FOREX  = ''
    CALL OPF(FN.FOREX, F.FOREX)

    FN.TELLER = 'F.TELLER'
    F.TELLER  = ''
    CALL OPF(FN.TELLER, F.TELLER)

    FN.FUNDS.TRANSFER = 'F.FUNDS.TRANSFER'
    F.FUNDS.TRANSFER  = ''
    CALL OPF(FN.FUNDS.TRANSFER, F.FUNDS.TRANSFER)

    FN.REDO.FX.CCY.POSN = 'F.REDO.FX.CCY.POSN'
    F.REDO.FX.CCY.POSN  = ''
    CALL OPF(FN.REDO.FX.CCY.POSN, F.REDO.FX.CCY.POSN)

    BEGIN CASE

        CASE (APPLICATION EQ 'TELLER')

            Y.FXSN.NUM = R.NEW(TT.TE.LOCAL.REF)<1,L.TT.FXSN.NUM.POS>
            Y.REC.STAT = R.NEW(TT.TE.RECORD.STATUS)

        CASE (APPLICATION EQ 'FUNDS.TRANSFER')

            Y.FXSN.NUM = R.NEW(FT.LOCAL.REF)<1,L.FT.FXSN.NUM.POS>
            Y.REC.STAT = R.NEW(FT.RECORD.STATUS)

        CASE (APPLICATION EQ 'FOREX')

            Y.FXSN.NUM = R.NEW(FX.LOCAL.REF)<1,L.FX.FXSN.NUM.POS>
            Y.REC.STAT = R.NEW(FX.RECORD.STATUS)

    END CASE

RETURN

*===================
LOCAL.REF.POSITIONS:
*===================

    APPL.ARR = "FUNDS.TRANSFER":@FM:"TELLER":@FM:"FOREX"

    FT.LOC.FIELDS = "L.FT.FXSN.NUM"
    TT.LOC.FIELDS = "L.TT.FXSN.NUM"
    FX.LOC.FIELDS = "L.FX.FXSN.NUM"

    FIELDS.NAME.ARR = FT.LOC.FIELDS:@FM:TT.LOC.FIELDS:@FM:FX.LOC.FIELDS

    FIELD.POS.ARR = ""

    CALL MULTI.GET.LOC.REF(APPL.ARR,FIELDS.NAME.ARR,FIELD.POS.ARR)

    L.FT.FXSN.NUM.POS   = FIELD.POS.ARR<1,1>
    L.TT.FXSN.NUM.POS   = FIELD.POS.ARR<2,1>
    L.FX.FXSN.NUM.POS   = FIELD.POS.ARR<3,1>
    Y.CHANNEL.TYPE      = EB.EXTERNAL$CHANNEL

RETURN

*===============
INITIAL.PROCESS:
*===============

    BEGIN CASE

        CASE (APPLICATION EQ 'TELLER')

            IF Y.FXSN.NUM NE '' THEN
                GOSUB UPDATE.TT
            END

        CASE (APPLICATION EQ 'FUNDS.TRANSFER')

            IF Y.FXSN.NUM NE '' THEN
                GOSUB UPDATE.FT
            END

        CASE (APPLICATION EQ 'FOREX')

            IF Y.FXSN.NUM NE '' THEN
                GOSUB UPDATE.FX
            END

    END CASE

RETURN

*=========
UPDATE.FT:
*=========

    Y.TRANS.REF = ID.NEW

    Y.BUY.CCY      = R.NEW(FT.DEBIT.CURRENCY)
    Y.BUY.NOM.TEMP = R.NEW(FT.AMOUNT.DEBITED)
    Y.BUY.LGTH     = LEN(Y.BUY.NOM.TEMP)
    Y.BUY.NOM      = Y.BUY.NOM.TEMP[4,Y.BUY.LGTH]
    Y.BUY.RATE     = R.NEW(FT.TREASURY.RATE)

    Y.SELL.CCY      = R.NEW(FT.CREDIT.CURRENCY)
    Y.SELL.NOM.TEMP = R.NEW(FT.AMOUNT.CREDITED)
    Y.SELL.LGTH     = LEN(Y.SELL.NOM.TEMP)
    Y.SELL.NOM      = Y.SELL.NOM.TEMP[4,Y.SELL.LGTH]
    Y.SELL.RATE     = R.NEW(FT.TREASURY.RATE)

RETURN

*=========
UPDATE.FX:
*=========

    Y.TRANS.REF = ID.NEW

    Y.BUY.CCY   = R.NEW(FX.CURRENCY.BOUGHT)
    Y.BUY.NOM   = R.NEW(FX.AMOUNT.BOUGHT)
*Y.BUY.RATE  = R.NEW(FX.SPOT.RATE)

    Y.SELL.CCY  = R.NEW(FX.CURRENCY.SOLD)
    Y.SELL.NOM  = R.NEW(FX.AMOUNT.SOLD)
*Y.SELL.RATE = R.NEW(FX.SPOT.RATE)

*PACS00157021 - S
    IF R.NEW(FX.DEAL.TYPE)  EQ 'SP' THEN
        Y.BUY.RATE  = R.NEW(FX.SPOT.RATE)
        Y.SELL.RATE = R.NEW(FX.SPOT.RATE)
    END ELSE
        Y.BUY.RATE  = R.NEW(FX.FORWARD.RATE)
        Y.SELL.RATE = R.NEW(FX.FORWARD.RATE)
    END
*PACS00157021 - E

RETURN

*=========
UPDATE.TT:
*=========

    Y.TRANS.REF    = ID.NEW
    Y.DR.CR.MARKER = R.NEW(TT.TE.DR.CR.MARKER)

    IF Y.DR.CR.MARKER EQ 'DEBIT' THEN

        Y.BUY.CCY       = R.NEW(TT.TE.CURRENCY.1)

        IF Y.BUY.CCY EQ LCCY THEN
            Y.BUY.NOM   = R.NEW(TT.TE.AMOUNT.LOCAL.1)
        END ELSE
            Y.BUY.NOM = R.NEW(TT.TE.AMOUNT.FCY.1)
        END

        Y.BUY.RATE      = R.NEW(TT.TE.DEAL.RATE)

        Y.SELL.CCY      = R.NEW(TT.TE.CURRENCY.2)

        IF Y.SELL.CCY EQ LCCY THEN
            Y.SELL.NOM  = R.NEW(TT.TE.AMOUNT.LOCAL.2)
        END ELSE
            Y.SELL.NOM  = R.NEW(TT.TE.AMOUNT.FCY.2)
        END

        Y.SELL.RATE = R.NEW(TT.TE.DEAL.RATE)

    END

    IF Y.DR.CR.MARKER EQ 'CREDIT' THEN

        Y.BUY.CCY  = R.NEW(TT.TE.CURRENCY.2)

        IF Y.BUY.CCY EQ LCCY THEN
            Y.BUY.NOM  = R.NEW(TT.TE.AMOUNT.LOCAL.2)
        END ELSE
            Y.BUY.NOM  = R.NEW(TT.TE.AMOUNT.FCY.2)
        END

        Y.BUY.RATE = R.NEW(TT.TE.DEAL.RATE)

        Y.SELL.CCY = R.NEW(TT.TE.CURRENCY.1)

        IF Y.SELL.CCY EQ LCCY THEN
            Y.SELL.NOM  = R.NEW(TT.TE.AMOUNT.LOCAL.1)
        END ELSE
            Y.SELL.NOM  = R.NEW(TT.TE.AMOUNT.FCY.1)
        END

        Y.SELL.RATE = R.NEW(TT.TE.DEAL.RATE)

    END

RETURN

*=========
READ.DETS:
*=========

    Y.BUY.ID  = Y.BUY.CCY:TODAY
    Y.SELL.ID = Y.SELL.CCY:TODAY

    CALL F.READU(FN.REDO.FX.CCY.POSN,Y.BUY.ID,R.BUY.REDO.FX.CCY.POSN,F.REDO.FX.CCY.POSN,Y.ERR.BUY,'')

    Y.TXN.ID.BUY = R.BUY.REDO.FX.CCY.POSN<REDO.FX.TRANS.REF>
    CHANGE @VM TO @FM IN Y.TXN.ID.BUY

    CALL F.READU(FN.REDO.FX.CCY.POSN,Y.SELL.ID,R.SELL.REDO.FX.CCY.POSN,F.REDO.FX.CCY.POSN,Y.ERR.SELL,'')

    Y.TXN.ID.SELL = R.SELL.REDO.FX.CCY.POSN<REDO.FX.TRANS.REF>
    CHANGE @VM TO @FM IN Y.TXN.ID.SELL

*PACS00157021 - S
    IF Y.BUY.CCY EQ LCCY THEN
        Y.PREV.CCY = Y.SELL.CCY
    END ELSE
        Y.PREV.CCY = Y.BUY.CCY
    END

    GOSUB READ.PREV.REC


    Y.PREV.CLOSE.BAL    = R.FX.CCY.POSN.PREV<REDO.FX.TOTAL.POSN>
    Y.PREV.WGT.BUY.AVG  = R.FX.CCY.POSN.PREV<REDO.FX.WGT.BUY.AVG>
    Y.PREV.WGT.SELL.AVG = R.FX.CCY.POSN.PREV<REDO.FX.WGT.SELL.AVG>
*PACS00157021 - E

RETURN

*=============
READ.PREV.REC:
*=============
*New section included to get previous days closing balance

    R.FX.CCY.POSN.PREV = '' ; Y.DATE.INITIAL = TODAY
    Y.PREV.DAYS = 100 ; Y.PREV.DAYS.CNT = 1
    LOOP
    WHILE Y.PREV.DAYS.CNT LE Y.PREV.DAYS
        Y.FREQ = '-1C'
        CALL CDT('',Y.DATE.INITIAL,Y.FREQ)
        Y.ID = Y.PREV.CCY:Y.DATE.INITIAL
        CALL F.READU(FN.REDO.FX.CCY.POSN,Y.ID,R.FX.CCY.POSN.PREV,F.REDO.FX.CCY.POSN,Y.ERR.SELL,'')
        IF R.FX.CCY.POSN.PREV THEN
            Y.PREV.DAYS.CNT += Y.PREV.DAYS
        END
        Y.PREV.DAYS.CNT += 1
    REPEAT

RETURN

*===========
WRITE.DETS:
*===========

    Y.TEMP.TIME = OCONV(TIME(),"MTS")
    Y.TEMP.TIME = Y.TEMP.TIME[1,5]
    CHANGE ':' TO '' IN Y.TEMP.TIME

    Y.CHECK.DATE = DATE()
    Y.DATE.TIME = OCONV(Y.CHECK.DATE,"DY2"):FMT(OCONV(Y.CHECK.DATE,"DM"),'R%2'):FMT(OCONV(Y.CHECK.DATE,"DD"),'R%2'):Y.TEMP.TIME

    IF R.BUY.REDO.FX.CCY.POSN THEN

        Y.BUY.COUNT = DCOUNT(Y.TXN.ID.BUY,@FM) + 1

        R.BUY.REDO.FX.CCY.POSN<REDO.FX.BUY.NOM,Y.BUY.COUNT>   = Y.BUY.NOM
        R.BUY.REDO.FX.CCY.POSN<REDO.FX.BUY.RATE,Y.BUY.COUNT>  = Y.BUY.RATE
        R.BUY.REDO.FX.CCY.POSN<REDO.FX.TRANS.REF,Y.BUY.COUNT> = Y.TRANS.REF

        GOSUB UPDATE.BUY.AUDIT.FIELS

    END

    IF R.SELL.REDO.FX.CCY.POSN THEN

        Y.SELL.COUNT = DCOUNT(Y.TXN.ID.SELL,@FM) + 1

        R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.NOM,Y.SELL.COUNT>  = Y.SELL.NOM
        R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.RATE,Y.SELL.COUNT> = Y.SELL.RATE
        R.SELL.REDO.FX.CCY.POSN<REDO.FX.TRANS.REF,Y.SELL.COUNT> = Y.TRANS.REF

        GOSUB UPDATE.SELL.AUDIT.FIELS

    END

    GOSUB WRITE.FINAL

RETURN

*======================
UPDATE.BUY.AUDIT.FIELS:
*======================

    R.BUY.REDO.FX.CCY.POSN<REDO.FX.DATE.TIME>             = Y.DATE.TIME
    R.BUY.REDO.FX.CCY.POSN<REDO.FX.INPUTTER>              = C$T24.SESSION.NO:'_':OPERATOR    ;*R22 AUTO CODE CONVERSION
    R.BUY.REDO.FX.CCY.POSN<REDO.FX.AUTHORISER>            = C$T24.SESSION.NO:'_':OPERATOR    ;*R22 AUTO CODE CONVERSION
    R.BUY.REDO.FX.CCY.POSN<REDO.FX.CO.CODE>               = ID.COMPANY
    R.BUY.REDO.FX.CCY.POSN<REDO.FX.DEPT.CODE>             = R.USER<EB.USE.DEPARTMENT.CODE>
    Y.CURR.NO =  R.BUY.REDO.FX.CCY.POSN<REDO.FX.CURR.NO>
    R.BUY.REDO.FX.CCY.POSN<REDO.FX.CURR.NO>               = Y.CURR.NO + 1
RETURN

*=======================
UPDATE.SELL.AUDIT.FIELS:
*=======================

    R.SELL.REDO.FX.CCY.POSN<REDO.FX.DATE.TIME>              = Y.DATE.TIME
    R.SELL.REDO.FX.CCY.POSN<REDO.FX.AUTHORISER>             = C$T24.SESSION.NO:'_':OPERATOR    ;*R22 AUTO CODE CONVERSION
    R.SELL.REDO.FX.CCY.POSN<REDO.FX.CO.CODE>                = ID.COMPANY
    R.SELL.REDO.FX.CCY.POSN<REDO.FX.DEPT.CODE>              = R.USER<EB.USE.DEPARTMENT.CODE>
    Y.CURR.NO =  R.SELL.REDO.FX.CCY.POSN<REDO.FX.CURR.NO>
    R.SELL.REDO.FX.CCY.POSN<REDO.FX.CURR.NO>                = Y.CURR.NO + 1
RETURN

*===========
REVE.PROCESS:
*===========

    Y.WRITE.FLAG = @FALSE

    LOCATE Y.TRANS.REF IN Y.TXN.ID.BUY SETTING Y.POS.REV.BUY THEN
        DEL R.BUY.REDO.FX.CCY.POSN<REDO.FX.BUY.NOM,Y.POS.REV.BUY>
        DEL R.BUY.REDO.FX.CCY.POSN<REDO.FX.BUY.RATE,Y.POS.REV.BUY>
        DEL R.BUY.REDO.FX.CCY.POSN<REDO.FX.SELL.NOM,Y.POS.REV.BUY>
        DEL R.BUY.REDO.FX.CCY.POSN<REDO.FX.SELL.RATE,Y.POS.REV.BUY>
        DEL R.BUY.REDO.FX.CCY.POSN<REDO.FX.TRANS.REF,Y.POS.REV.BUY>
        Y.WRITE.FLAG = @TRUE
    END

    LOCATE Y.TRANS.REF IN Y.TXN.ID.SELL SETTING Y.POS.REV.SELL THEN
        DEL R.SELL.REDO.FX.CCY.POSN<REDO.FX.BUY.NOM,Y.POS.REV.SELL>
        DEL R.SELL.REDO.FX.CCY.POSN<REDO.FX.BUY.RATE,Y.POS.REV.SELL>
        DEL R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.NOM,Y.POS.REV.SELL>
        DEL R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.RATE,Y.POS.REV.SELL>
        DEL R.SELL.REDO.FX.CCY.POSN<REDO.FX.TRANS.REF,Y.POS.REV.SELL>
        Y.WRITE.FLAG = @TRUE
    END

    IF Y.WRITE.FLAG THEN
        GOSUB WRITE.FINAL
    END

RETURN

*===========
WRITE.FINAL:
*===========

    IF Y.FXSN.NUM NE '' THEN

        GOSUB WEIGHTED.AVG

        Y.BUY.ID.T  = Y.BUY.ID[1,3]
        Y.SELL.ID.T = Y.SELL.ID[1,3]
        Y.LCCY.T    = LCCY

        IF Y.BUY.ID.T EQ Y.LCCY.T THEN
            IF (R.SELL.REDO.FX.CCY.POSN<REDO.FX.BUY.POSITION> EQ '' OR R.SELL.REDO.FX.CCY.POSN<REDO.FX.BUY.POSITION> EQ 0) AND (R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.POSITION> EQ '' OR R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.POSITION> EQ 0) THEN
                CALL F.DELETE(FN.REDO.FX.CCY.POSN,Y.SELL.ID)
            END ELSE
                CALL F.WRITE(FN.REDO.FX.CCY.POSN,Y.SELL.ID,R.SELL.REDO.FX.CCY.POSN)
                CALL F.RELEASE(FN.REDO.FX.CCY.POSN,Y.SELL.ID,F.SELL.REDO.FX.CCY.POSN)
            END
        END
        IF Y.SELL.ID.T EQ Y.LCCY.T THEN
            IF (R.SELL.REDO.FX.CCY.POSN<REDO.FX.BUY.POSITION> EQ '' OR R.SELL.REDO.FX.CCY.POSN<REDO.FX.BUY.POSITION> EQ 0) AND (R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.POSITION> EQ '' OR R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.POSITION> EQ 0) THEN
                CALL F.DELETE(FN.REDO.FX.CCY.POSN,Y.BUY.ID)
            END ELSE
                CALL F.WRITE(FN.REDO.FX.CCY.POSN,Y.BUY.ID,R.BUY.REDO.FX.CCY.POSN)
                CALL F.RELEASE(FN.REDO.FX.CCY.POSN,Y.BUY.ID,F.BUY.REDO.FX.CCY.POSN)
            END
        END

    END

RETURN

*============
WEIGHTED.AVG:
*============

    Y.MUL.COUNT.B = DCOUNT(R.BUY.REDO.FX.CCY.POSN<REDO.FX.TRANS.REF>,@VM)
    Y.MUL.START.B = 1

    LOOP
    WHILE Y.MUL.START.B LE Y.MUL.COUNT.B
        Y.BUY.AVG.B   += R.BUY.REDO.FX.CCY.POSN<REDO.FX.BUY.NOM,Y.MUL.START.B> * R.BUY.REDO.FX.CCY.POSN<REDO.FX.BUY.RATE,Y.MUL.START.B>
        Y.SEL.AVG.B   += R.BUY.REDO.FX.CCY.POSN<REDO.FX.SELL.NOM,Y.MUL.START.B> * R.BUY.REDO.FX.CCY.POSN<REDO.FX.SELL.RATE,Y.MUL.START.B>
        Y.MUL.START.B += 1
    REPEAT

    Y.BUY.TOT.B = SUM(R.BUY.REDO.FX.CCY.POSN<REDO.FX.BUY.NOM>)
    Y.SEL.TOT.B = SUM(R.BUY.REDO.FX.CCY.POSN<REDO.FX.SELL.NOM>)

*PACS00157021 - S
    IF Y.BUY.AVG.B THEN
        Y.BUY.AVG.B = Y.BUY.AVG.B + (Y.PREV.CLOSE.BAL * Y.PREV.WGT.BUY.AVG)
        Y.BUY.TOT.B += Y.PREV.CLOSE.BAL  ;*R22 AUTO CODE CONVERSION
    END
    IF Y.SEL.AVG.B THEN
        Y.SEL.AVG.B = Y.SEL.AVG.B + (Y.PREV.CLOSE.BAL * Y.PREV.WGT.SELL.AVG)
        Y.SEL.TOT.B += Y.PREV.CLOSE.BAL    ;*R22 AUTO CODE CONVERSION
    END
*PACS00157021 - E
    IF Y.BUY.TOT.B GT 0 THEN
        R.BUY.REDO.FX.CCY.POSN<REDO.FX.WGT.BUY.AVG>  = Y.BUY.AVG.B / Y.BUY.TOT.B
    END ELSE
        R.BUY.REDO.FX.CCY.POSN<REDO.FX.WGT.BUY.AVG>  = Y.BUY.AVG.B
    END

    IF Y.SEL.TOT.B GT 0 THEN
        R.BUY.REDO.FX.CCY.POSN<REDO.FX.WGT.SELL.AVG> = Y.SEL.AVG.B / Y.SEL.TOT.B
    END ELSE
        R.BUY.REDO.FX.CCY.POSN<REDO.FX.WGT.SELL.AVG> = Y.SEL.AVG.B
    END

    R.BUY.REDO.FX.CCY.POSN<REDO.FX.WGT.BUY.AVG>  = DROUND(R.BUY.REDO.FX.CCY.POSN<REDO.FX.WGT.BUY.AVG>,4)
    R.BUY.REDO.FX.CCY.POSN<REDO.FX.WGT.SELL.AVG> = DROUND(R.BUY.REDO.FX.CCY.POSN<REDO.FX.WGT.SELL.AVG>,4)

    Y.MUL.COUNT.S = DCOUNT(R.SELL.REDO.FX.CCY.POSN<REDO.FX.TRANS.REF>,@VM)
    Y.MUL.START.S = 1

    LOOP
    WHILE Y.MUL.START.S LE Y.MUL.COUNT.S
        Y.BUY.AVG.S   += R.SELL.REDO.FX.CCY.POSN<REDO.FX.BUY.NOM,Y.MUL.START.S> * R.SELL.REDO.FX.CCY.POSN<REDO.FX.BUY.RATE,Y.MUL.START.S>
        Y.SEL.AVG.S   += R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.NOM,Y.MUL.START.S> * R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.RATE,Y.MUL.START.S>
        Y.MUL.START.S += 1
    REPEAT

    Y.BUY.TOT.S = SUM(R.SELL.REDO.FX.CCY.POSN<REDO.FX.BUY.NOM>)
    Y.SEL.TOT.S = SUM(R.SELL.REDO.FX.CCY.POSN<REDO.FX.SELL.NOM>)

*PACS00157021 - S
    IF Y.BUY.AVG.S THEN
        Y.BUY.AVG.S = Y.BUY.AVG.S + (Y.PREV.CLOSE.BAL * Y.PREV.WGT.BUY.AVG)
        Y.BUY.TOT.S += Y.PREV.CLOSE.BAL  ;*R22 AUTO CODE CONVERSION
    END
    IF Y.SEL.AVG.S THEN
        Y.SEL.AVG.S = Y.SEL.AVG.S + (Y.PREV.CLOSE.BAL * Y.PREV.WGT.SELL.AVG)
        Y.SEL.TOT.S += Y.PREV.CLOSE.BAL    ;*R22 AUTO CODE CONVERSION
    END
*PACS00157021 - E
    IF Y.BUY.TOT.S GT 0 THEN
        R.SELL.REDO.FX.CCY.POSN<REDO.FX.WGT.BUY.AVG>  = Y.BUY.AVG.S / Y.BUY.TOT.S
    END ELSE
        R.SELL.REDO.FX.CCY.POSN<REDO.FX.WGT.BUY.AVG>  = Y.BUY.AVG.S
    END

    IF Y.SEL.TOT.S GT 0 THEN
        R.SELL.REDO.FX.CCY.POSN<REDO.FX.WGT.SELL.AVG> = Y.SEL.AVG.S / Y.SEL.TOT.S
    END ELSE
        R.SELL.REDO.FX.CCY.POSN<REDO.FX.WGT.SELL.AVG> = Y.SEL.AVG.S
    END

    R.SELL.REDO.FX.CCY.POSN<REDO.FX.WGT.BUY.AVG>  = DROUND(R.SELL.REDO.FX.CCY.POSN<REDO.FX.WGT.BUY.AVG>,4)
    R.SELL.REDO.FX.CCY.POSN<REDO.FX.WGT.SELL.AVG> = DROUND(R.SELL.REDO.FX.CCY.POSN<REDO.FX.WGT.SELL.AVG>,4)

RETURN

*-----------*
PERF.PRE.VAL:
*-----------*

    Y.PERF.FLAG = ''

    BEGIN CASE
        CASE APPLICATION EQ 'FOREX'
            Y.PERF.DCCY = R.NEW(FX.CURRENCY.SOLD)
            Y.PERF.CCCY = R.NEW(FX.CURRENCY.BOUGHT)

        CASE APPLICATION EQ 'FUNDS.TRANSFER'
            Y.PERF.DCCY = R.NEW(FT.DEBIT.CURRENCY)
            Y.PERF.CCCY = R.NEW(FT.CREDIT.CURRENCY)

        CASE APPLICATION EQ 'TELLER'
            Y.PERF.DCCY = R.NEW(TT.TE.CURRENCY.1)
            Y.PERF.CCCY = R.NEW(TT.TE.CURRENCY.2)

    END CASE

    IF Y.PERF.DCCY EQ LCCY AND Y.PERF.CCCY EQ LCCY THEN
        Y.PERF.FLAG = '1'
    END

RETURN

*---------------------------------------------------------------------------------------------------------------------
END
