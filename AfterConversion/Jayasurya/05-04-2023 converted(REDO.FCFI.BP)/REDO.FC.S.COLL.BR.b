* @ValidationCode : MjotMTMxODA2NzcwOTpDcDEyNTI6MTY4MDY3ODYyODU3MjpJVFNTQk5HOi0xOi0xOjA6MDpmYWxzZTpOL0E6REVWXzIwMjEwOC4wOi0xOi0x
* @ValidationInfo : Timestamp         : 05 Apr 2023 12:40:28
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSSBNG
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : DEV_202108.0
$PACKAGE APAP.REDOFCFI
SUBROUTINE REDO.FC.S.COLL.BR

*-----------------------------------------------------------------------------
* Subroutine Type : ROUTINE
* Attached to     : TEMPLATE REDO.CREATE.ARRANGEMENT
* Attached as     : CALLED BY REDO.FC.S.PRODUCT.COLL ROUTINE TO VALIDATE COLLATERAL
* Primary Purpose : VALIDATE COLLATERAL
* Incoming:
* ---------
*
* Outgoing:
* ---------
*
* Error Variables:
*
*-----------------------------------------------------------------------------
* Modification History:
*
* Development for : Asociacion Popular de Ahorros y Prestamos
* Development by  : Meza William - TAM Latin America
* Date            : Junio 23 2011
*
* Modified by     : Luis Pazmino - TAM Latin America
* Date            : 11.28.2011
* Notes           : PACS00167218 Resolution

* Modified by     : Jorge Valarezo - TAM Latin America
* Date            : 01.03.2012-01.26.2012-03.20.2012
* Notes           : PACS00167218 Resolution

* Modified by     : Jorge Valarezo - TAM Latin America
* Date            : 11.05.2012 - 7-12-2012
* Notes           : Rebuild it's a dependency of PAC00169926
* Modification History:
* Date                 Who                              Reference                            DESCRIPTION
*04-04-2023            CONVERSION TOOL                AUTO R22 CODE CONVERSION           VM TO @VM ,FM TO @FM SM TO @SM and I++ to I=+1
*04-04-2023          jayasurya H                       MANUAL R22 CODE CONVERSION            NO CHANGES
*-----------------------------------------------------------------------------
*-----------------------------------------------------------------------------

    $INSERT I_COMMON
    $INSERT I_EQUATE

    $INSERT I_F.REDO.FC.COLL.CODE.PARAMS
    $INSERT I_F.REDO.CREATE.ARRANGEMENT
    $INSERT I_F.REDO.COLLATERAL.REA

    $INSERT I_F.COLLATERAL
    $INSERT I_F.COLLATERAL.CODE
    $INSERT I_F.USER

    GOSUB INITIALISE
    GOSUB OPEN.FILES
    GOSUB PROCESS
RETURN

* =========
INITIALISE:
* =========

    Y.NOMINAL.VALUE = R.NEW(REDO.FC.SEC.VALUE.BR)   ;* VALOR NOMINAL
*PORCENTAJE.MAXIMO.PRESTAR:
    FN.REDO.MAXIMO.PRESTAR.COLLATERAL = 'F.REDO.FC.COLL.CODE.PARAMS'
    F.REDO.MAXIMO.PRESTAR.COLLATERAL  = ''
    R.REDO.MAXIMO.PRESTAR.COLLATERAL  = ''

    Y.REDO.MAXIMO.PRESTAR.COLLATERAL.ID  = R.NEW(REDO.FC.TYPE.OF.SEC.BR)
    Y.ERR.REDO.MAXIMO.PRESTAR.COLLATERAL = ''

*VALOR.ADMISIBLE.REA
    Y.CENTRAL.BANK.VALUE = ''
    FN.REDO.COLLATERAL.REA = 'F.REDO.COLLATERAL.REA'
    F.REDO.COLLATERAL.REA = ''
    R.REDO.COLLATERAL.REA = ''
    Y.REDO.COLLATERAL.REA.ID =  R.NEW(REDO.FC.SEC.CLASSIFY.BR)
    Y.ERR.REDO.COLLATERAL.REA = ''
    PROCESS.GOAHEAD = 1

    FN.COLLATERAL= "F.COLLATERAL"
    F.COLLATERAL=""

    FN.COLLATERAL.CODE= "F.COLLATERAL.CODE"
    F.COLLATERAL.CODE=""

    FN.USR  = 'F.USER'
    F.USR   = ''
    R.USR   = ''
    WCAMPOU = "VAL.MODI.DATE"
    WCAMPOU = CHANGE(WCAMPOU,@FM,@VM)
    YPOSU=''
    CALL MULTI.GET.LOC.REF("USER",WCAMPOU,YPOSU)
    WPOSUSER  = YPOSU<1,1>

    YPOS = 0
    Y.CUSTOMER = R.NEW(REDO.FC.CUSTOMER)
    Y.COLL.TYPE = R.NEW(REDO.FC.TYPE.OF.SEC.BR)
    Y.EFFECTIVE.DATE = R.NEW(REDO.FC.EFFECT.DATE)
    Y.COLL.ID = R.NEW(REDO.FC.SEC.NO.STATE.BR)
RETURN

* =========
OPEN.FILES:
* =========
*PORCENTAJE.MAXIMO.PRESTAR:
    CALL OPF(FN.REDO.MAXIMO.PRESTAR.COLLATERAL, F.REDO.MAXIMO.PRESTAR.COLLATERAL)

*VALOR.ADMISIBLE.REA
    CALL OPF(FN.REDO.COLLATERAL.REA, F.REDO.COLLATERAL.REA)
RETURN

* ======
PROCESS:
* ======

    Y.I = 1
    Y.COUNT = ""
    Y.COUNT = DCOUNT(Y.COLL.TYPE,@VM)
    LOOP
    WHILE Y.I LE Y.COUNT
        IF Y.COLL.TYPE<1,Y.I> AND NOT(Y.COLL.ID<1,Y.I>) THEN
            GOSUB SET.ADDRESS
            GOSUB SET.DESCRIP
            GOSUB CLASE.GARANTIA    ;* CLASE.GARANTIA
            GOSUB MONEDA  ;* MONEDA

            GOSUB FECHA.TASACION    ;* FECHA.TASACION
            GOSUB PORCENTAJE.MAXIMO.PRESTAR   ;* PORCENTAJE.MAXIMO.PRESTAR
            GOSUB TOTAL.VALOR.TERRENO         ;* TOTAL.VALOR.TERRENO
            GOSUB TOTAL.VALOR.CONSTRUCCION    ;* TOTAL.VALOR.CONSTRUCCION
            GOSUB VALOR.DEPRECIACION          ;* VALOR.DEPRECIACION
            GOSUB TOTAL.TASACION    ;* TOTAL.TASACION
            GOSUB MONTO.MAXIMO.PRESTAR        ;* MONTO.MAXIMO.PRESTAR
            GOSUB FECHA.VENCIMIENTO.TASACION  ;* FECHA.VENCIMIENTO.TASACION
* GOSUB POLIZA.SEGUROS                ;* POLIZA.SEGUROS
            GOSUB VALOR.NOMINAL     ;* VALOR.NOMINAL
            GOSUB VALOR.ADMISIBLE.REA         ;* VALOR.ADMISIBLE.REA
        END

        IF Y.COLL.ID<1,Y.I> THEN
            GOSUB VALIDA.CUST
            GOSUB SET.ADDRESS
            GOSUB SET.DESCRIP
        END ELSE
            GOSUB FECHA.CREACION.GARANTIA     ;* FECHA.CREACION.GARANTIA:
            GOSUB FECHA.CONSTITUCION.GARANTIA ;* FECHA.CONSTITUCION.GARANTIA:
            GOSUB FECHA.FORMALIZACION.GARANTIA          ;* FECHA.FORMALIZACION.GARANTIA:
        END

        Y.I += 1
    REPEAT

RETURN

* ============
VALIDA.CUST:
* ============
    Y.CUST = FIELD(Y.COLL.ID<1,Y.I>, '.', 1)
    IF Y.CUSTOMER NE Y.CUST THEN
        TEXT = 'EB.FC.CUST.DIF'
        M.CONT = DCOUNT(R.NEW(REDO.FC.OVERRIDE),@VM) + 1
        CALL STORE.OVERRIDE(M.CONT)
    END
* ============
SET.ADDRESS:
* ============

*SET THE FIRTS STRING
    VAR.CONCATENA =  R.NEW(REDO.FC.ADDRESS.BR)<1,Y.I>

*GET THE NUMBER OF ROWS THAT GENERATE
    VAR.CONTADOR = LEN(VAR.CONCATENA)
    VAR.DIFE = VAR.CONTADOR / 35
    VAR.FILAS  = INT(VAR.DIFE)  + 1

    VAR.POS = 0
    VAR.I = 1
    LOOP
    WHILE VAR.I LE VAR.FILAS
        VAR.SUBCA = SUBSTRINGS(VAR.CONCATENA, VAR.POS + 1, 35)
        IF LEN(VAR.SUBCA) GT 0 THEN
            R.NEW(REDO.FC.ADDRESS.BR)<1,Y.I,VAR.I> = VAR.SUBCA
            VAR.POS += 35
        END
        VAR.I += 1
    REPEAT
    VAR.J = VAR.FILAS+1


RETURN


* ============
SET.DESCRIP:
* ============


    VAR.MATRICULA = R.NEW(REDO.FC.SEC.IDENT.BR)<1,Y.I>
    VAR.PARCELA   = R.NEW(REDO.FC.DESIGNATION.NO.BR)<1,Y.I>
    VAR.SOLAR     = R.NEW(REDO.FC.SOLAR.NO.BR)<1,Y.I>
    VAR.MANZANA   = R.NEW(REDO.FC.BLOCK.NO.BR)<1,Y.I>
    VAR.DISTRITO  = R.NEW(REDO.FC.CADASTRAL.DIST.BR)<1,Y.I>
    VAR.PROVINCIA = R.NEW(REDO.FC.PROVINCES.BR)<1,Y.I>
    VAR.CIUDAD    = R.NEW(REDO.FC.CITY.BR)<1,Y.I>
    VAR.SECTOR    = R.NEW(REDO.FC.SECTOR.BR)<1,Y.I>
    VAR.COUNTRY   = R.NEW(REDO.FC.COUNTRY.BR)<1,Y.I>

*SET THE FIRTS STRING
    VAR.CONCATENA = VAR.MATRICULA : " " :VAR.PARCELA : " " : VAR.SOLAR : " " : VAR.MANZANA : " ": VAR.DISTRITO : " " : VAR.COUNTRY : " ": VAR.PROVINCIA : " " : VAR.CIUDAD : " " :VAR.SECTOR

*GET THE NUMBER OF ROWS THAT GENERATE
    VAR.CONTADOR = LEN(VAR.CONCATENA)
    VAR.DIFE = VAR.CONTADOR / 35
    VAR.FILAS  = INT(VAR.DIFE)  + 1

    VAR.POS = 0
    VAR.I = 1
    LOOP
    WHILE VAR.I LE VAR.FILAS
        VAR.SUBCA = SUBSTRINGS(VAR.CONCATENA, VAR.POS + 1, 35)
        IF LEN(VAR.SUBCA) GT 0 THEN
            R.NEW(REDO.FC.PROP.DESCR.BR)<1,Y.I,VAR.I> = VAR.SUBCA
            VAR.POS += 35
        END
        VAR.I += 1
    REPEAT
    VAR.J = VAR.FILAS+1

*CONCATENA THE ROWS FOR DIRECCION
*VAR.SUBCA
    VAR.DIRECCION =  R.NEW(REDO.FC.ADDRESS.BR)<1,Y.I>

    VAR.FILAS    = DCOUNT(VAR.DIRECCION,@SM)
    VAR.REGDIRE  = CHANGE(VAR.DIRECCION,@SM,@FM)

    VAR.CONCATENA = ''
    VAR.I = 1
    LOOP
    WHILE VAR.I LE VAR.FILAS
        VAR.CADENA = VAR.REGDIRE<VAR.I>
        VAR.CONCATENA = VAR.CONCATENA : " " : VAR.CADENA
        VAR.I += 1
    REPEAT

*CONCATENA THE LAST ROW AND DIRECTION AND SET THE NEW DATA
    VAR.CONCATENA = VAR.CONCATENA
    VAR.POS = 0

    VAR.CONTADOR = LEN(VAR.CONCATENA)
    VAR.DIFE = VAR.CONTADOR / 35
    VAR.FILAS  = INT(VAR.DIFE)  + 1
    VAR.TOT = VAR.J + VAR.FILAS
    VAR.I = VAR.J
    LOOP
    WHILE VAR.I LE VAR.TOT
        VAR.SUBCA = SUBSTRINGS(VAR.CONCATENA, VAR.POS + 1, 35)
        IF LEN(VAR.SUBCA) GT 0 THEN
            R.NEW(REDO.FC.PROP.DESCR.BR)<1,Y.I,VAR.I> = VAR.SUBCA
            VAR.POS += 35
        END
        VAR.I += 1
    REPEAT
RETURN
* ============
CLASE.GARANTIA:
* ============
    CALL F.READ(FN.COLLATERAL.CODE,Y.COLL.TYPE<1,Y.I>,R.COLLATERAL.CODE,F.COLLATERAL.CODE,ERR.MSJ)
    IF NOT(ERR.MSJ) THEN
        GOSUB SEARCH.TYPE.CODES
    END ELSE
        ETEXT = "EB-FC-READ.ERROR" : @FM : FN.COLLATERAL.CODE
        CALL STORE.END.ERROR
    END
RETURN

* ===============
SEARCH.TYPE.CODES:
* ===============
    IF R.COLLATERAL.CODE THEN
        Y.TYPE.CODES = R.COLLATERAL.CODE<COLL.CODE.COLLATERAL.TYPE>
        IF Y.TYPE.CODES THEN
            Y.NEW.TYPE.CODE = R.NEW(REDO.FC.SEC.CLASSIFY.BR)<1,Y.I>
            LOCATE Y.NEW.TYPE.CODE IN Y.TYPE.CODES<1,1> SETTING YPOS ELSE
                AF = REDO.FC.SEC.CLASSIFY.BR
                AV = Y.I
                ETEXT = "EB-FC-DONT-COLL-ASO"
                CALL STORE.END.ERROR
            END
        END
    END

RETURN

* ====
MONEDA:
* ====
    R.NEW(REDO.FC.COLL.CURRENCY.BR)<1,Y.I> = R.NEW(REDO.FC.LOAN.CURRENCY)
RETURN

* =================
VALOR.ADMISIBLE.REA:
* =================
    CALL F.READ(FN.REDO.COLLATERAL.REA, Y.REDO.COLLATERAL.REA.ID<1,Y.I>, R.REDO.COLLATERAL.REA, F.REDO.COLLATERAL.REA, Y.ERR.REDO.COLLATERAL.REA)
    IF NOT(Y.ERR.REDO.COLLATERAL.REA) THEN
        PERCENTAGE = R.REDO.COLLATERAL.REA<R.COL.REA.PERCENTAGE>          ;* PORCENTAJE DEL REA--> %  DEL VALOR DEL BIEN  QUE SE TOMARA EN CUENTA
        Y.CENTRAL.BANK.VALUE = R.NEW(REDO.FC.SEC.VALUE.BR)<1,Y.I>*(PERCENTAGE/100)
        Y.CENTRAL.BANK.VALUE = DROUND(Y.CENTRAL.BANK.VALUE, 2)
        R.NEW(REDO.FC.CENTR.BANK.VAL.BR)<1,Y.I> = Y.CENTRAL.BANK.VALUE    ;*VALOR ADMISIBLE DEL REA
    END ELSE
        ETEXT = "EB-FC-READ.ERROR" : @FM : FN.REDO.COLLATERAL.REA
        CALL STORE.END.ERROR
    END
RETURN

* ============
FECHA.TASACION:
* ============
    Y.F.TASACION = R.NEW(REDO.FC.VAL.DATE.BR)<1,Y.I>          ;*FECHA TASACION
    IF Y.F.TASACION THEN
        IF Y.F.TASACION GT TODAY THEN
            AF = REDO.FC.VAL.DATE.BR
            AV = Y.I
            ETEXT = 'EB-FC-DONT-DATE'
            CALL STORE.END.ERROR
        END
    END
RETURN

* =======================
PORCENTAJE.MAXIMO.PRESTAR:
* =======================
    CALL F.READ(FN.REDO.MAXIMO.PRESTAR.COLLATERAL, Y.REDO.COLLATERAL.REA.ID<1,Y.I>, R.REDO.MAXIMO.PRESTAR.COLLATERAL, F.REDO.MAXIMO.PRESTAR.COLLATERAL, Y.ERR.REDO.MAXIMO.PRESTAR.COLLATERAL)
    IF NOT(Y.ERR.REDO.MAXIMO.PRESTAR.COLLATERAL) THEN
        PERCENTAGE = R.REDO.MAXIMO.PRESTAR.COLLATERAL<FC.PR.PER.MAX.PRESTAR>        ;* PENDIENTE DEFINIR CAMPO % DE ESTA TABLA
        IF PERCENTAGE THEN
            R.NEW(REDO.FC.LOAN.MAX.PERC.BR)<1,Y.I> = PERCENTAGE
        END ELSE
            AF = REDO.FC.LOAN.MAX.PERC.BR
            AV= Y.I
            ETEXT = 'EB-FC-NO-DE-PARAMS'
            CALL STORE.END.ERROR
        END
    END ELSE
        ETEXT = "EB-FC-READ.ERROR" : @FM : FN.REDO.MAXIMO.PRESTAR.COLLATERAL
        CALL STORE.END.ERROR
    END


RETURN

* ==================
MONTO.MAXIMO.PRESTAR:
* ==================
    VAR.VAL.GRAV  = SUM (R.NEW(REDO.FC.ENCUM.VAL.BR)<1,Y.I>)  ;* VALOR GRAVAMEN
    Y.PORCENTAJE.MAX.PRES = R.NEW(REDO.FC.LOAN.MAX.PERC.BR)<1,Y.I>
    Y.TOTAL.TASACION = R.NEW(REDO.FC.TOT.VAL.BR)<1,Y.I>       ;* TOTAL TASACION
    R.NEW(REDO.FC.MAX.LOAN.AMT.BR)<1,Y.I> = DROUND(((Y.TOTAL.TASACION - VAR.VAL.GRAV)*Y.PORCENTAJE.MAX.PRES/100), 2)
RETURN

* ==================
TOTAL.VALOR.TERRENO:
* ==================

    VALOR.M2.TERR = R.NEW(REDO.FC.LAND.UNIT.VALUE.BR)<1,Y.I>  ;*VALOR POR M2 DE TERRENO
    AREA.M2.TERR = R.NEW(REDO.FC.LAND.AREA.BR)<1,Y.I>         ;*AREA TERRENO M2
    IF VALOR.M2.TERR AND AREA.M2.TERR THEN
        R.NEW(REDO.FC.TOT.LAND.VALUE.BR)<1,Y.I> = DROUND((VALOR.M2.TERR*AREA.M2.TERR),2)      ;*TOTAL VALOR TERRENO
    END
RETURN

* ======================
TOTAL.VALOR.CONSTRUCCION:
* ======================
    AREA.M2.CONS = R.NEW(REDO.FC.BUILD.AREA.BR)<1,Y.I>        ;*AREA CONSTRUCCION (M2)
    VALOR.M2.CONS = R.NEW(REDO.FC.BUILD.UNIT.VAL.BR)<1,Y.I>   ;*VALOR POR  M2 CONSTRUCCION
    IF AREA.M2.CONS AND VALOR.M2.CONS THEN
        R.NEW(REDO.FC.TOT.BUIL.AREA.BR)<1,Y.I> = DROUND((AREA.M2.CONS*VALOR.M2.CONS), 2)      ;*TOTAL VALOR CONSTRUCCION
    END
RETURN

* ================
VALOR.DEPRECIACION:
* ================
    VAR.TOT.CON  = R.NEW(REDO.FC.TOT.BUIL.AREA.BR)<1,Y.I>     ;*TOTAL VALOR  CONSTRUCCION
    VAR.POR.DEP  = R.NEW(REDO.FC.TOT.DEPREC.BR)<1,Y.I>        ;*% DEPRECIACION ANNUAL
    VAR.ANI.CON  = R.NEW(REDO.FC.YEARS.OF.BUILD.BR)<1,Y.I>    ;*AS DE CONSTRUCCION

    IF NOT(VAR.TOT.CON) THEN
        R.NEW(REDO.FC.TOT.DEPREC.BR)<1,Y.I> = ""
        VAR.POR.DEP = ""
        R.NEW(REDO.FC.YEARS.OF.BUILD.BR)<1,Y.I> = ""
        VAR.ANI.CON = ""
    END

    IF VAR.POR.DEP AND NOT (VAR.ANI.CON) THEN
        AF = REDO.FC.YEARS.OF.BUILD.BR
        AV = Y.I
        ETEXT  = 'EB-FC-MANDOTORY.FIELD'
        CALL STORE.END.ERROR
    END
    IF NOT(VAR.POR.DEP) AND VAR.ANI.CON THEN
        AF = REDO.FC.TOT.DEPREC.BR
        AV = Y.I
        ETEXT  = 'EB-FC-MANDOTORY.FIELD'
        CALL STORE.END.ERROR
    END
    VAR.VAL.DEP  = DROUND(((VAR.POR.DEP/100)*VAR.TOT.CON*VAR.ANI.CON),2)
    R.NEW(REDO.FC.DEPREC.VAL.BR)<1,Y.I> = VAR.VAL.DEP         ;*VALOR DEPRECIACION
RETURN

* ============
TOTAL.TASACION:
* ============
    VAR.TOT.LAN = R.NEW(REDO.FC.TOT.LAND.VALUE.BR)<1,Y.I>     ;*TOTAL VALOR TERRENO
    VAR.VAL.DEP = R.NEW(REDO.FC.DEPREC.VAL.BR)<1,Y.I>
    VAR.TOT.CON = R.NEW(REDO.FC.TOT.BUIL.AREA.BR)<1,Y.I>
    VAR.VAL.TOT = VAR.TOT.LAN + VAR.TOT.CON - VAR.VAL.DEP     ;*
    R.NEW(REDO.FC.TOT.VAL.BR)<1,Y.I> =  VAR.VAL.TOT ;*TOTAL TASACION
    R.NEW(REDO.FC.SEC.VALUE.BR)<1,Y.I>= VAR.VAL.TOT
RETURN

* ========================
FECHA.VENCIMIENTO.TASACION:
* ========================
    Y.ACTUAL   = R.NEW(REDO.FC.VAL.DATE.BR)<1,Y.I>  ;*FECHA TASACION
    Y.MESES    = R.NEW(REDO.FC.REVIEW.DT.FQU.BR)<1,Y.I>       ;*FRECUENCIA REVISION EN MESES(SE ENTIENDE QUE SERA SIEMPRE MAYOR A 18)
    IF Y.ACTUAL THEN
        IF Y.MESES THEN
*JV20120424 FIX HOW TO CALC THE NEXT DATE
            Y.COMI = COMI
            Y.AUX    = RIGHT(Y.ACTUAL,4)
            Y.DIA    = RIGHT(Y.AUX,2)
            COMI =Y.ACTUAL:"M":Y.MESES:Y.DIA
            CALL CFQ
            Y.DATE = COMI[1,8]
            R.NEW(REDO.FC.VALUA.DUE.DATE.BR)<1,Y.I> = Y.DATE      ;*FECHA VENCIMIENTO TASACION
            COMI = Y.COMI
        END
    END

RETURN

* ============
POLIZA.SEGUROS:
* ============
    R.NEW(REDO.FC.INSUR.POLICY.BR)<1,Y.I> = R.NEW(REDO.FC.POLICY.NUMBER.AUX)<1,Y.I>

RETURN

* ===========
VALOR.NOMINAL:
* ===========

    R.NEW(REDO.FC.SEC.EXE.VAL.BR)<1,Y.I> = R.NEW(REDO.FC.SEC.VALUE.BR)<1,Y.I>     ;*TOTAL TASACION
    R.NEW(REDO.FC.GEN.LEDGER.VAL.BR)<1,Y.I> = R.NEW(REDO.FC.SEC.VALUE.BR)<1,Y.I>  ;*TOTAL TASACION
RETURN

* =====================
FECHA.CREACION.GARANTIA:
* =====================
    Y.CREATE.DATE.BR = R.NEW(REDO.FC.SEC.CREATE.DATE.BR)
    Y.USR.ID = OPERATOR
    USR.ERR = ''
    CALL CACHE.READ(FN.USR,Y.USR.ID,R.USR,USR.ERR)

    IF USR.ERR THEN
        ETEXT = "EB-FC-READ.ERROR" : @FM : FN.USR
        CALL STORE.END.ERROR
    END ELSE
        VAR.BAN.DATE = R.USR<EB.USE.LOCAL.REF,WPOSUSER>
    END

    IF VAR.BAN.DATE EQ '' THEN
        AF = REDO.FC.SEC.CREATE.DATE.BR
        AV = Y.I
        ETEXT = 'EB-FC-USER-ALOW-VALID'
        CALL STORE.END.ERROR
    END

    Y.CREATE.DATE.CL = Y.CREATE.DATE.BR<1,Y.I>      ;*FECHA.CREACION.GARANTIA
    AF = REDO.FC.SEC.CREATE.DATE.BR
    AV = Y.I

    IF Y.CREATE.DATE.CL THEN
* Control for back value user permission
        IF (VAR.BAN.DATE EQ 2) AND (Y.CREATE.DATE.CL NE Y.ACTUAL) THEN
            ETEXT = 'EB-FC-NO.ALLOW-TO-USER'
            CALL STORE.END.ERROR
        END

* Future dates not allowed
        IF Y.CREATE.DATE.CL GT TODAY THEN
            ETEXT = 'EB-FC-DONT-FUTURE-DATE'
            CALL STORE.END.ERROR
        END

* PACS00167218
* Fecha de creacion debe ser igual a la fecha del prestamo
        IF Y.CREATE.DATE.CL NE Y.EFFECTIVE.DATE THEN
            ETEXT = 'EB-FC.LOAN.CL.DATES'
            CALL STORE.END.ERROR
        END

* Creation date not allowed to be before the loan creation
        IF Y.CREATE.DATE.CL LT Y.EFFECTIVE.DATE THEN
            IF Y.COLL.ID<1,Y.I> EQ '' THEN
* New Collateral - error
*ETEXT = 'EB-FC-DONT-AFTER-DATE'
*CALL STORE.END.ERROR
            END ELSE
* Existing Collateral - override
                TEXT = 'EB.FC.BEFORE.DATE'
                M.CONT = DCOUNT(R.NEW(REDO.FC.OVERRIDE),@VM) + 1
                CALL STORE.OVERRIDE(M.CONT)
            END
        END
    END
RETURN

* =========================
FECHA.CONSTITUCION.GARANTIA:
* =========================
    Y.GRTNG.DATE.BR = R.NEW(REDO.FC.GRANTING.DATET.BR)        ;*FECHA CONSTITUCION GARANTIA
    IF Y.GRTNG.DATE.BR<1,Y.I> GT Y.EFFECTIVE.DATE THEN
        AF = REDO.FC.GRANTING.DATET.BR
        AV = Y.I
        ETEXT = 'EB-FC-DONT-AFTER-DATE'
        CALL STORE.END.ERROR
        RETURN
    END


RETURN

* ==========================
FECHA.FORMALIZACION.GARANTIA:
* ==========================

    Y.EXE.DATE.BR = R.NEW(REDO.FC.EXECUTING.DATE.BR)<1,Y.I>
    IF Y.EXE.DATE.BR THEN
        IF Y.EXE.DATE.BR GT Y.EFFECTIVE.DATE THEN
            AF = REDO.FC.EXECUTING.DATE.BR
            AV = Y.I
            ETEXT = 'EB-FC-DONT-AFTER-DATE'
            CALL STORE.END.ERROR
        END

        IF Y.EXE.DATE.BR LT Y.EFFECTIVE.DATE THEN
            AF = REDO.FC.EXECUTING.DATE.BR
            AV = Y.I
            ETEXT = 'EB-ALOW-BEFORE-DATE'
            CALL STORE.END.ERROR
        END
    END

RETURN

END
