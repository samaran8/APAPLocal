* @ValidationCode : MjotMTgxMzY3MjcyNjpDcDEyNTI6MTY4MjU4NDY0MTMxMzpJVFNTQk5HOi0xOi0xOjA6MDpmYWxzZTpOL0E6REVWXzIwMjEwOC4wOi0xOi0x
* @ValidationInfo : Timestamp         : 27 Apr 2023 14:07:21
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSSBNG
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : DEV_202108.0
$PACKAGE APAP.REDOBATCH
SUBROUTINE REDO.B.RAISE.NAB.ACT.HOLI(Y.ID)
*-------------------------------------------------------------------------------------
*Modification
* Date                   who                   Reference
* 12-04-2023         CONVERSTION TOOL     R22 AUTO CONVERSTION - FM TO @FM AND VM TO @VM AND SM TO @SM
* 12-04-2023          ANIL KUMAR B        R22 MANUAL CONVERSTION CALL RTN METHOD ADDED
*--------------------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
    $INSERT I_F.STMT.ENTRY
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.REDO.AA.INT.CLASSIFICATION
    $INSERT I_F.REDO.AA.NAB.HISTORY
    $INSERT I_REDO.B.RAISE.NAB.ACT.HOLI.COMMON
    $INSERT I_F.DATES
    $USING APAP.TAM
* Tus Start
    $INSERT I_F.EB.CONTRACT.BALANCES
* Tus End

MAIN:

    CALL OCOMO("Processing started the loan -":Y.ID)
    CALL F.READ(FN.REDO.AA.NAB.HISTORY,Y.ID,R.REDO.AA.NAB.HISTORY,F.REDO.AA.NAB.HISTORY,NAB.ERR)
    IF R.REDO.AA.NAB.HISTORY THEN
        Y.NAB.AMT = SUM(R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.INT.BALANCE>)
        IF Y.NAB.AMT THEN
            Y.NAB.AMT += R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.ACC.AMT>
            GOSUB FORM.ENTRIES
            R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.MARK.HOLIDAY> = 'NO'
            R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.ACCT.YES.NO> = 'NO'
            CALL F.WRITE(FN.REDO.AA.NAB.HISTORY,Y.ID,R.REDO.AA.NAB.HISTORY)
        END
    END

RETURN

FORM.ENTRIES:

    R.REDO.CONCAT.ACC.NAB = ''

    CALL F.READ(FN.AA.ARRANGEMENT,Y.ID,R.AA.ARRANGEMENT,F.AA.ARRANGEMENT,ARR.ERR)
    Y.LOAN.ACC = R.AA.ARRANGEMENT<AA.ARR.LINKED.APPL.ID>
    Y.LOAN.COMP= R.AA.ARRANGEMENT<AA.ARR.CO.CODE>
    Y.LOAN.CUR = R.AA.ARRANGEMENT<AA.ARR.CURRENCY>

    CALL F.READ(FN.AC,Y.LOAN.ACC,R.ACCOUNT,F.AC,ACC.ERR)
    Y.LOAN.CATEG = R.ACCOUNT<AC.CATEGORY>

    GOSUB BEFORE.RAISE.ENTRIES


    CALL F.READ(FN.REDO.CONCAT.ACC.NAB,Y.LOAN.ACC,R.REDO.CONCAT.ACC.NAB,F.REDO.CONCAT.ACC.NAB,CNCT.ERR)
    IF R.REDO.CONCAT.ACC.NAB THEN
        Y.NEW.AC = R.REDO.CONCAT.ACC.NAB<1>
        CALL F.READ(FN.AC,Y.NEW.AC,R.CONT.ACCOUNT,F.AC,ACC.ERR)
*Tus Start
        R.ECB = ''
        ECB.ERR = ''
        CALL EB.READ.HVT("EB.CONTRACT.BALANCES", Y.NEW.AC, R.ECB, ECB.ERR) ; * Tus End

        GOSUB RAISE.ENTRIES
    END ELSE

        GOSUB MM.STR.OFS

        APP.VAL     = 'ACCOUNT'
        OFSFUNCT    = 'I'
        OFS.VER     = 'ACCOUNT,REDO.NAB'
        NO.OF.AUTH  = 0
        AZ.ID       = ''
        GTS.MODE    = ''
        Y.COMPANY   = ID.COMPANY
        ID.COMPANY  = Y.LOAN.COMP
        CALL OFS.BUILD.RECORD(APP.VAL,OFSFUNCT,'PROCESS',OFS.VER,GTS.MODE,NO.OF.AUTH,AZ.ID,R.OFS.ACC,OFS.RECORD)
        ID.COMPANY   = Y.COMPANY
        CALL.INFO    = ''
        CALL.INFO<1> = 'REDO.NAB'
        THE.RESPONSE = ''
        TXN.CMM      = ''
        CALL OFS.CALL.BULK.MANAGER(CALL.INFO,OFS.RECORD,THE.RESPONSE,TXN.CMM)
        Y.AC.DE = FIELD(THE.RESPONSE,',',1)
        Y.NEW.AC = FIELD(Y.AC.DE,'/',1)
        Y.LFG = FIELD(Y.AC.DE,'/',3)
        Y.RESP = FIELD(THE.RESPONSE,',',2)
        IF Y.LFG EQ 1 THEN
            R.REDO.CONCAT.ACC.NAB<1> = Y.NEW.AC
            CALL F.WRITE(FN.REDO.CONCAT.ACC.NAB,Y.LOAN.ACC,R.REDO.CONCAT.ACC.NAB)
            CALL F.READ(FN.AC,Y.NEW.AC,R.CONT.ACCOUNT,F.AC,ACC.ERR)
*Tus Start
            R.ECB = ''
            ECB.ERR = ''
            CALL EB.READ.HVT("EB.CONTRACT.BALANCES", Y.NEW.AC, R.ECB, ECB.ERR) ; * Tus End
            GOSUB RAISE.ENTRIES
        END ELSE
            IF Y.LFG EQ '-1' THEN
                R.OFS.ACC.DP<AC.CONTINGENT.INT>    = ''
                GOSUB FORM.AC.DP
            END
        END

    END

RETURN

BEFORE.RAISE.ENTRIES:

    Y.INTERNAL.ACC = ''
    LOCATE Y.LOAN.CATEG IN R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.PROD.CATEGORY,1> SETTING POS.CMP THEN
        Y.CONT.CATEG = R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.CONT.CATEG,POS.CMP>
        LOCATE Y.LOAN.CUR IN R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.CURRENCY,POS.CMP,1> SETTING POS.CUR THEN
            Y.INTERNAL.ACC = R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.DEBIT.INT.ACCOUNT,POS.CMP,POS.CUR>
        END
    END ELSE
        CALL OCOMO('Product category not parameterized ':Y.ID)
        GOSUB END1
    END
    IF Y.INTERNAL.ACC THEN

        Y.LOAN.CO.CODE = R.ACCOUNT<AC.CO.CODE>
*CALL APAP.TAM.REDO.NAB.CREATE.INT.ACC(Y.LOAN.CO.CODE,Y.INTERNAL.ACC,Y.RET.INT.ACC) ;* MANUAL R22 CODE CONVERSTION
        CALL APAP.TAM.redoNabCreateIntAcc(Y.LOAN.CO.CODE,Y.INTERNAL.ACC,Y.RET.INT.ACC) ;* MANUAL R22 CODE CONVERSTION
        Y.INTERNAL.ACC = Y.RET.INT.ACC
        CALL F.READ(FN.AC,Y.INTERNAL.ACC,R.INT.ACC,F.AC,ACC.ERR)
        IF R.INT.ACC ELSE
            CALL OCOMO('Internal Account not created - ':Y.ID)
            GOSUB END1
        END
    END ELSE
        CALL OCOMO('Internal Account not parameterized':Y.ID)
        GOSUB END1

    END


RETURN

MM.STR.OFS:

    R.OFS.ACC = ''
    R.OFS.ACC<AC.CUSTOMER>          = R.ACCOUNT<AC.CUSTOMER>
    R.OFS.ACC<AC.CATEGORY>          = Y.CONT.CATEG
    R.OFS.ACC<AC.ACCOUNT.TITLE.1>   = R.ACCOUNT<AC.ACCOUNT.TITLE.1>
    R.OFS.ACC<AC.ACCOUNT.TITLE.2>   = R.ACCOUNT<AC.ACCOUNT.TITLE.2>
    R.OFS.ACC<AC.SHORT.TITLE>       = R.ACCOUNT<AC.SHORT.TITLE>
    R.OFS.ACC<AC.CURRENCY>          = R.ACCOUNT<AC.CURRENCY>
    R.OFS.ACC<AC.MNEMONIC>          = R.ACCOUNT<AC.MNEMONIC>
    R.OFS.ACC<AC.POSITION.TYPE>     = R.ACCOUNT<AC.POSITION.TYPE>
    R.OFS.ACC<AC.ACCOUNT.OFFICER>   = R.ACCOUNT<AC.ACCOUNT.OFFICER>
    R.OFS.ACC<AC.POSTING.RESTRICT>  = R.ACCOUNT<AC.POSTING.RESTRICT>
    R.OFS.ACC<AC.LOCAL.REF,POS.L.LOAN.STATUS>  = R.ACCOUNT<AC.LOCAL.REF,POS.L.LOAN.STATUS>
    R.OFS.ACC<AC.LOCAL.REF,POS.AV.BAL> = R.ACCOUNT<AC.LOCAL.REF,POS.AV.BAL>
    R.OFS.ACC<AC.LOCAL.REF,POS.L.OD.STATUS>    = R.ACCOUNT<AC.LOCAL.REF,POS.L.OD.STATUS>
    R.OFS.ACC<AC.LOCAL.REF,POS.L.OD.STATUS.2>  = R.ACCOUNT<AC.LOCAL.REF,POS.L.OD.STATUS.2>
    R.OFS.ACC<AC.LOCAL.REF,POS.OR.RE> = R.ACCOUNT<AC.LOCAL.REF,POS.OR.RE>
    R.OFS.ACC<AC.CONTINGENT.INT> = "C"
    R.OFS.ACC.DP = R.OFS.ACC

RETURN

FORM.AC.DP:

    OFS.RECORD = ''
    Y.COMPANY   = ID.COMPANY
    ID.COMPANY  = Y.LOAN.COMP
    CALL OFS.BUILD.RECORD(APP.VAL,OFSFUNCT,'PROCESS',OFS.VER,GTS.MODE,NO.OF.AUTH,AZ.ID,R.OFS.ACC.DP,OFS.RECORD)
    ID.COMPANY   = Y.COMPANY
    CALL.INFO    = ''
    CALL.INFO<1> = 'REDO.NAB'
    THE.RESPONSE = ''
    TXN.CMM      = ''
    CALL OFS.CALL.BULK.MANAGER(CALL.INFO,OFS.RECORD,THE.RESPONSE,TXN.CMM)
    Y.AC.DE = FIELD(THE.RESPONSE,',',1)
    Y.NEW.AC = FIELD(Y.AC.DE,'/',1)
    Y.LFG = FIELD(Y.AC.DE,'/',3)
    Y.RESP = FIELD(THE.RESPONSE,',',2)

    IF Y.LFG EQ 1 THEN
        R.REDO.CONCAT.ACC.NAB<1> = Y.NEW.AC
        CALL F.WRITE(FN.REDO.CONCAT.ACC.NAB,Y.LOAN.ACC,R.REDO.CONCAT.ACC.NAB)
        CALL F.READ(FN.AC,Y.NEW.AC,R.CONT.ACCOUNT,F.AC,ACC.ERR)
*Tus Start
        R.ECB = ''
        ECB.ERR = ''
        CALL EB.READ.HVT("EB.CONTRACT.BALANCES", Y.NEW.AC, R.ECB, ECB.ERR) ; * Tus End
        GOSUB RAISE.ENTRIES
    END ELSE
        CALL OCOMO("Interest Customer Contingent Account not created  ":Y.ID:'- Response -':Y.RESP)
    END

RETURN


RAISE.ENTRIES:

    R.DR.STMT.ENTRY = ''
    R.CR.STMT.ENTRY = ''
    R.STMT.ENTRY    = ''

    Y.PR.DATE = TODAY
    Y.NAB.DATE      = R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.NAB.CHANGE.DATE>
*Y.NX.WK.DATE = R.DATES(EB.DAT.NEXT.WORKING.DAY) ;* These lines are commented to pass the exposure,booking&processing date as today date even for month end scenario.
*IF Y.NAB.DATE[5,2] NE Y.NX.WK.DATE[5,2] THEN       Because since we are passing the next working day in case of month end scenario, mirror account entry is not reported
*Y.PR.DATE = Y.NX.WK.DATE                           in SAPRPT & CRB report, whereas it is reported in next month saprpt.
*END

* Y.NAB.AMT = Y.NAB.AMT + R.CONT.ACCOUNT<AC.WORKING.BALANCE>
* Tus Start
    Y.NAB.AMT = Y.NAB.AMT + R.ECB<ECB.WORKING.BALANCE>
* Tus End
    IF Y.NAB.AMT EQ 0 THEN
*    CALL OCOMO("Accounting has been skipped - AVOID.DUP.ENTRY-":Y.ID:" : ":R.CONT.ACCOUNT<AC.WORKING.BALANCE>)
* Tus Start
        CALL OCOMO("Accounting has been skipped - AVOID.DUP.ENTRY-":Y.ID:" : ":R.ECB<ECB.WORKING.BALANCE>) ; * Tus End
        RETURN
    END



    R.DR.STMT.ENTRY<AC.STE.ACCOUNT.NUMBER>    = Y.NEW.AC
    R.DR.STMT.ENTRY<AC.STE.COMPANY.CODE>      = R.CONT.ACCOUNT<AC.CO.CODE>
    R.DR.STMT.ENTRY<AC.STE.AMOUNT.LCY>        = -1*Y.NAB.AMT
    R.DR.STMT.ENTRY<AC.STE.TRANSACTION.CODE>  = '1'
    R.DR.STMT.ENTRY<AC.STE.PRODUCT.CATEGORY>  = R.CONT.ACCOUNT<AC.CATEGORY>
    R.DR.STMT.ENTRY<AC.STE.VALUE.DATE>        = Y.NAB.DATE
    R.DR.STMT.ENTRY<AC.STE.CURRENCY>          = R.CONT.ACCOUNT<AC.CURRENCY>
    R.DR.STMT.ENTRY<AC.STE.OUR.REFERENCE>     = R.CONT.ACCOUNT<AC.CO.CODE>
    R.DR.STMT.ENTRY<AC.STE.EXPOSURE.DATE>     = Y.PR.DATE
    R.DR.STMT.ENTRY<AC.STE.CURRENCY.MARKET>   = '1'
    R.DR.STMT.ENTRY<AC.STE.TRANS.REFERENCE>   = Y.NEW.AC
    R.DR.STMT.ENTRY<AC.STE.SYSTEM.ID>         = 'AC'
    R.DR.STMT.ENTRY<AC.STE.PROCESSING.DATE>   = Y.PR.DATE
    R.DR.STMT.ENTRY<AC.STE.BOOKING.DATE>      = Y.PR.DATE

    CHANGE @FM TO @SM IN R.DR.STMT.ENTRY
    CHANGE @SM TO @VM IN R.DR.STMT.ENTRY

    R.STMT.ENTRY<-1> = R.DR.STMT.ENTRY


    R.CR.STMT.ENTRY<AC.STE.ACCOUNT.NUMBER>   = Y.INTERNAL.ACC
    R.CR.STMT.ENTRY<AC.STE.COMPANY.CODE>     = R.INT.ACC<AC.CO.CODE>
    R.CR.STMT.ENTRY<AC.STE.AMOUNT.LCY>       = Y.NAB.AMT
    R.CR.STMT.ENTRY<AC.STE.TRANSACTION.CODE> = '51'
    R.CR.STMT.ENTRY<AC.STE.PRODUCT.CATEGORY> = R.INT.ACC<AC.CATEGORY>
    R.CR.STMT.ENTRY<AC.STE.VALUE.DATE>       = Y.NAB.DATE
    R.CR.STMT.ENTRY<AC.STE.CURRENCY>         = R.INT.ACC<AC.CURRENCY>
    R.CR.STMT.ENTRY<AC.STE.OUR.REFERENCE>    = R.INT.ACC<AC.CO.CODE>
    R.CR.STMT.ENTRY<AC.STE.EXPOSURE.DATE>    = Y.PR.DATE
    R.CR.STMT.ENTRY<AC.STE.CURRENCY.MARKET>  = '1'
    R.CR.STMT.ENTRY<AC.STE.TRANS.REFERENCE>  = Y.NEW.AC
    R.CR.STMT.ENTRY<AC.STE.SYSTEM.ID>        = 'AC'
    R.CR.STMT.ENTRY<AC.STE.PROCESSING.DATE>  = Y.PR.DATE
    R.CR.STMT.ENTRY<AC.STE.BOOKING.DATE>     = Y.PR.DATE

    CHANGE @FM TO @SM IN R.CR.STMT.ENTRY
    CHANGE @SM TO @VM IN R.CR.STMT.ENTRY

    R.STMT.ENTRY<-1> = R.CR.STMT.ENTRY

    IF Y.LOAN.COMP THEN
        CALL LOAD.COMPANY(Y.LOAN.COMP)
    END


    ACC.PRODUCT = 'AC'
    ACC.TYPE = 'SAO'  ;*Automatically overridden when an override conditions

    CALL EB.ACCOUNTING(ACC.PRODUCT,ACC.TYPE,R.STMT.ENTRY,'')  ;* Raise accounting for Consolidated

    CALL OCOMO('Processed the Arrangement: ':Y.ID)

RETURN

END1:

END
