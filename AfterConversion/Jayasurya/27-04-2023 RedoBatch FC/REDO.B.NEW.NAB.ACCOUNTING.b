* @ValidationCode : Mjo3OTYxODY2OTY6Q3AxMjUyOjE2ODI1ODE2NDc0MDY6SVRTU0JORzotMTotMTowOjA6ZmFsc2U6Ti9BOkRFVl8yMDIxMDguMDotMTotMQ==
* @ValidationInfo : Timestamp         : 27 Apr 2023 13:17:27
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSSBNG
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : DEV_202108.0
$PACKAGE APAP.REDOBATCH
SUBROUTINE REDO.B.NEW.NAB.ACCOUNTING(ARR.ID)
*--------------------------------------------------------
*Description: This is batch routine to create and raise the accounting entries
* for NAB accounting
*--------------------------------------------------------
*Input Arg  : N/A
*Out   Arg  : N/A
*Deals With : NAB Accounting
*--------------------------------------------------------
* Date           Name        Dev Ref.                           Comments
* 16 Oct 2012   H Ganesh     NAB Accounting - PACS00202156     Initial Draft
* Date                   who                   Reference
* 12-04-2023         CONVERSTION TOOL     R22 AUTO CONVERSTION - FM TO @FM AND VM TO @VM AND SM TO @SM
* 12-04-2023          ANIL KUMAR B        R22 MANUAL CONVERSTION -NO CHANGES
*--------------------------------------------------------

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
    $INSERT I_F.STMT.ENTRY
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.REDO.AA.INT.CLASSIFICATION
    $INSERT I_F.REDO.AA.NAB.HISTORY
    $INSERT I_REDO.B.NEW.NAB.ACCOUNTING.COMMON
    $INSERT I_F.AA.SCHEDULED.ACTIVITY
*TUS START
    $INSERT I_F.EB.CONTRACT.BALANCES
*TUS END
    $USING APAP.TAM
    GOSUB PROCESS
RETURN
*--------------------------------------------------------
PROCESS:
*--------------------------------------------------------


    CALL OCOMO('Processing the Arrangement: ':ARR.ID)

    CALL F.READ(FN.REDO.AA.NAB.HISTORY,ARR.ID,R.REDO.AA.NAB.HISTORY,F.REDO.AA.NAB.HISTORY,NAB.ERR)

*GOSUB GET.ACC.AMT
    Y.NAB.AMT = SUM(R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.INT.BALANCE>)
    IF Y.NAB.AMT THEN
        Y.NAB.AMT += R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.ACC.AMT>
        GOSUB FORM.ENTRIES
        R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.ACCT.YES.NO> = 'NO'
        CALL F.WRITE(FN.REDO.AA.NAB.HISTORY,ARR.ID,R.REDO.AA.NAB.HISTORY)
    END

RETURN

GET.ACC.AMT:

    CALL F.READ(FN.AA.ARRANGEMENT,ARR.ID,R.AA.ARRANGEMENT,F.AA.ARRANGEMENT,ARR.ERR)
    ARR.ACCOUNT.ID = R.AA.ARRANGEMENT<AA.ARR.LINKED.APPL.ID>

    BAL.TYPES = 'ACCPRINCIPALINT'
    Y.TOT.ACC.AMT = ''

    ACCOUNT.ID = ARR.ACCOUNT.ID
    ERROR.MESSAGE = ''
    START.DATE = TODAY ; END.DATE = '' ; SYSTEM.DATE = ''
    REQUEST.TYPE<4>  = 'ECB'
    CALL AA.GET.PERIOD.BALANCES(ACCOUNT.ID, BAL.TYPES, REQUEST.TYPE, START.DATE, END.DATE, SYSTEM.DATE, BAL.DETAILS, ERROR.MESSAGE)

    Y.TOT.ACC.AMT = ABS(BAL.DETAILS<4>)

    CALL F.READ(FN.AA.SCH.ACT,ARR.ID,R.AA.SCH.ACT,F.AA.SCH.ACT,SCH.ERR)

    FINDSTR 'LENDING-MAKEDUE-REPAYMENT.SCHEDULE' IN R.AA.SCH.ACT<AA.SCH.ACTIVITY.NAME,1> SETTING POS.NEX THEN
        Y.NEX.BL.DATE = R.AA.SCH.ACT<AA.SCH.NEXT.DATE,POS.NEX>
    END ELSE
        Y.NEX.BL.DATE = BAL.DETAILS<1>
    END

    R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.NXT.BILL.DATE> = Y.NEX.BL.DATE
    R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.ACC.AMT> = Y.TOT.ACC.AMT
    CALL F.WRITE(FN.REDO.AA.NAB.HISTORY,ARR.ID,R.REDO.AA.NAB.HISTORY)

RETURN
*--------------------------------------------------------
FORM.ENTRIES:
*--------------------------------------------------------

    R.REDO.CONCAT.ACC.NAB = ''

    CALL F.READ(FN.AA.ARRANGEMENT,ARR.ID,R.AA.ARRANGEMENT,F.AA.ARRANGEMENT,ARR.ERR)
    Y.LOAN.ACC = R.AA.ARRANGEMENT<AA.ARR.LINKED.APPL.ID>
    Y.LOAN.COMP= R.AA.ARRANGEMENT<AA.ARR.CO.CODE>
    Y.LOAN.CUR = R.AA.ARRANGEMENT<AA.ARR.CURRENCY>

    CALL F.READ(FN.ACCOUNT,Y.LOAN.ACC,R.ACCOUNT,F.ACCOUNT,ACC.ERR)
    Y.LOAN.CATEG = R.ACCOUNT<AC.CATEGORY>

    GOSUB BEFORE.RAISE.ENTRIES


    CALL F.READ(FN.REDO.CONCAT.ACC.NAB,Y.LOAN.ACC,R.REDO.CONCAT.ACC.NAB,F.REDO.CONCAT.ACC.NAB,CNCT.ERR)
    IF R.REDO.CONCAT.ACC.NAB THEN
        Y.NEW.AC = R.REDO.CONCAT.ACC.NAB<1>
        CALL F.READ(FN.ACCOUNT,Y.NEW.AC,R.CONT.ACCOUNT,F.ACCOUNT,ACC.ERR)
* Tus Start
        R.ECB =''
        ECB.ERR =''
        CALL EB.READ.HVT('EB.CONTRACT.BALANCES',Y.NEW.AC,R.ECB,ECB.ERR)
*Tus End

        GOSUB RAISE.ENTRIES
    END ELSE

        GOSUB MM.STR.OFS

        APP.VAL     = 'ACCOUNT'
        OFSFUNCT    = 'I'
        OFS.VER     = 'ACCOUNT,REDO.NAB'
        NO.OF.AUTH  = 0
        AZ.ID       = ''
        GTS.MODE    = ''
        Y.COMPANY   = ID.COMPANY
        ID.COMPANY  = Y.LOAN.COMP
        CALL OFS.BUILD.RECORD(APP.VAL,OFSFUNCT,'PROCESS',OFS.VER,GTS.MODE,NO.OF.AUTH,AZ.ID,R.OFS.ACC,OFS.RECORD)
        ID.COMPANY   = Y.COMPANY
        CALL.INFO    = ''
        CALL.INFO<1> = 'REDO.NAB'
        THE.RESPONSE = ''
        TXN.CMM      = ''
        CALL OFS.CALL.BULK.MANAGER(CALL.INFO,OFS.RECORD,THE.RESPONSE,TXN.CMM)
        Y.AC.DE = FIELD(THE.RESPONSE,',',1)
        Y.NEW.AC = FIELD(Y.AC.DE,'/',1)
        Y.LFG = FIELD(Y.AC.DE,'/',3)
        Y.RESP = FIELD(THE.RESPONSE,',',2)
        IF Y.LFG EQ 1 THEN
            R.REDO.CONCAT.ACC.NAB<1> = Y.NEW.AC
            CALL F.WRITE(FN.REDO.CONCAT.ACC.NAB,Y.LOAN.ACC,R.REDO.CONCAT.ACC.NAB)
            CALL F.READ(FN.ACCOUNT,Y.NEW.AC,R.CONT.ACCOUNT,F.ACCOUNT,ACC.ERR)
* Tus Start
            R.ECB =''
            ECB.ERR =''
            CALL EB.READ.HVT('EB.CONTRACT.BALANCES',Y.NEW.AC,R.ECB,ECB.ERR)
*Tus End
            GOSUB RAISE.ENTRIES
        END ELSE
            IF Y.LFG EQ '-1' THEN
                CALL OCOMO("Interest Customer Contingent Account not created  ":ARR.ID:'- Response -':Y.RESP)
                R.OFS.ACC.DP<AC.CONTINGENT.INT>    = 'C'
                GOSUB FORM.AC.DP
            END
        END
    END

RETURN

MM.STR.OFS:

    R.OFS.ACC = ''
    R.OFS.ACC<AC.CUSTOMER>          = R.ACCOUNT<AC.CUSTOMER>
    R.OFS.ACC<AC.CATEGORY>          = Y.CONT.CATEG
    R.OFS.ACC<AC.ACCOUNT.TITLE.1>   = R.ACCOUNT<AC.ACCOUNT.TITLE.1>
    R.OFS.ACC<AC.ACCOUNT.TITLE.2>   = R.ACCOUNT<AC.ACCOUNT.TITLE.2>
    R.OFS.ACC<AC.SHORT.TITLE>       = R.ACCOUNT<AC.SHORT.TITLE>
    R.OFS.ACC<AC.CURRENCY>          = R.ACCOUNT<AC.CURRENCY>
    R.OFS.ACC<AC.MNEMONIC>          = R.ACCOUNT<AC.MNEMONIC>
    R.OFS.ACC<AC.POSITION.TYPE>     = R.ACCOUNT<AC.POSITION.TYPE>
    R.OFS.ACC<AC.ACCOUNT.OFFICER>   = R.ACCOUNT<AC.ACCOUNT.OFFICER>
    R.OFS.ACC<AC.POSTING.RESTRICT>  = R.ACCOUNT<AC.POSTING.RESTRICT>
    R.OFS.ACC<AC.CONTINGENT.INT>    = 'C'
    R.OFS.ACC<AC.LOCAL.REF,POS.L.LOAN.STATUS>  = R.ACCOUNT<AC.LOCAL.REF,POS.L.LOAN.STATUS>
    R.OFS.ACC<AC.LOCAL.REF,POS.AV.BAL> = R.ACCOUNT<AC.LOCAL.REF,POS.AV.BAL>
    R.OFS.ACC<AC.LOCAL.REF,POS.L.OD.STATUS>    = R.ACCOUNT<AC.LOCAL.REF,POS.L.OD.STATUS>
    R.OFS.ACC<AC.LOCAL.REF,POS.L.OD.STATUS.2>  = R.ACCOUNT<AC.LOCAL.REF,POS.L.OD.STATUS.2>
    R.OFS.ACC<AC.LOCAL.REF,POS.OR.RE> = R.ACCOUNT<AC.LOCAL.REF,POS.OR.RE>
    R.OFS.ACC.DP = R.OFS.ACC

RETURN

FORM.AC.DP:

    OFS.RECORD = ''
    Y.COMPANY   = ID.COMPANY
    ID.COMPANY  = Y.LOAN.COMP
    CALL OFS.BUILD.RECORD(APP.VAL,OFSFUNCT,'PROCESS',OFS.VER,GTS.MODE,NO.OF.AUTH,AZ.ID,R.OFS.ACC.DP,OFS.RECORD)
    ID.COMPANY   = Y.COMPANY
    CALL.INFO    = ''
    CALL.INFO<1> = 'REDO.NAB'
    THE.RESPONSE = ''
    TXN.CMM      = ''
    CALL OFS.CALL.BULK.MANAGER(CALL.INFO,OFS.RECORD,THE.RESPONSE,TXN.CMM)
    Y.AC.DE = FIELD(THE.RESPONSE,',',1)
    Y.NEW.AC = FIELD(Y.AC.DE,'/',1)
    Y.LFG = FIELD(Y.AC.DE,'/',3)
    Y.RESP = FIELD(THE.RESPONSE,',',2)

    IF Y.LFG EQ 1 THEN
        R.REDO.CONCAT.ACC.NAB<1> = Y.NEW.AC
        CALL F.WRITE(FN.REDO.CONCAT.ACC.NAB,Y.LOAN.ACC,R.REDO.CONCAT.ACC.NAB)
        CALL F.READ(FN.ACCOUNT,Y.NEW.AC,R.CONT.ACCOUNT,F.ACCOUNT,ACC.ERR)
*TUS START
        R.ECB =''
        ECB.ERR =''
        CALL EB.READ.HVT('EB.CONTRACT.BALANCES',Y.NEW.AC,R.ECB,ECB.ERR)
*TUS END

        GOSUB RAISE.ENTRIES
    END ELSE
        CALL OCOMO("Interest Customer Contingent Account not created  ":ARR.ID:'- Response -':Y.RESP)
    END

RETURN

BEFORE.RAISE.ENTRIES:

    Y.INTERNAL.ACC = ''
    LOCATE Y.LOAN.CATEG IN R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.PROD.CATEGORY,1> SETTING POS.CMP THEN
        Y.CONT.CATEG = R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.CONT.CATEG,POS.CMP>
        LOCATE Y.LOAN.CUR IN R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.CURRENCY,POS.CMP,1> SETTING POS.CUR THEN
            Y.INTERNAL.ACC = R.REDO.AA.INT.CLASSIFICATION<REDO.INT.CLASS.DEBIT.INT.ACCOUNT,POS.CMP,POS.CUR>
        END
    END ELSE
        CALL OCOMO('Product category not parameterized ':ARR.ID)
        GOSUB END1
    END
    IF Y.INTERNAL.ACC THEN

        Y.LOAN.CO.CODE = R.ACCOUNT<AC.CO.CODE>
*CALL APAP.TAM.REDO.NAB.CREATE.INT.ACC(Y.LOAN.CO.CODE,Y.INTERNAL.ACC,Y.RET.INT.ACC) ;* MANUAL R22 CODE CONVERSION
        CALL APAP.TAM.redoNabCreateIntAcc(Y.LOAN.CO.CODE,Y.INTERNAL.ACC,Y.RET.INT.ACC) ;* MANUAL R22 CODE CONVERSION
        Y.INTERNAL.ACC = Y.RET.INT.ACC
        CALL F.READ(FN.ACCOUNT,Y.INTERNAL.ACC,R.INT.ACC,F.ACCOUNT,ACC.ERR)
        IF R.INT.ACC ELSE
            CALL OCOMO('Internal Account not created - ':ARR.ID)
            GOSUB END1
        END
    END ELSE
        CALL OCOMO('Internal Account not parameterized':ARR.ID)
        GOSUB END1

    END

RETURN
*------------------------------------------------------
RAISE.ENTRIES:
*------------------------------------------------------

    IF R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.MIGRATED.LOAN> EQ 'YES' THEN
        Y.NAB.DATE = TODAY
    END ELSE
        Y.NAB.DATE      = R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.NAB.CHANGE.DATE>
    END
*TUS START
    Y.NAB.AMT = Y.NAB.AMT + R.ECB<ECB.WORKING.BALANCE>
*TUS END
    IF Y.NAB.AMT EQ 0 THEN
*TUS START
        CALL OCOMO("Accounting has been skipped - AVOID.DUP.ENTRY-":ARR.ID:" : ":R.ECB<ECB.WORKING.BALANCE>)
*TUS END
        RETURN
    END
    R.DR.STMT.ENTRY = ''
    R.CR.STMT.ENTRY = ''
    R.STMT.ENTRY    = ''

    R.DR.STMT.ENTRY<AC.STE.ACCOUNT.NUMBER>    = Y.NEW.AC
    R.DR.STMT.ENTRY<AC.STE.COMPANY.CODE>      = R.CONT.ACCOUNT<AC.CO.CODE>
    R.DR.STMT.ENTRY<AC.STE.AMOUNT.LCY>        = -1*Y.NAB.AMT
    R.DR.STMT.ENTRY<AC.STE.TRANSACTION.CODE>  = '1'
    R.DR.STMT.ENTRY<AC.STE.PRODUCT.CATEGORY>  = R.CONT.ACCOUNT<AC.CATEGORY>
    R.DR.STMT.ENTRY<AC.STE.VALUE.DATE>        = Y.NAB.DATE
    R.DR.STMT.ENTRY<AC.STE.CURRENCY>          = R.CONT.ACCOUNT<AC.CURRENCY>
    R.DR.STMT.ENTRY<AC.STE.OUR.REFERENCE>     = R.CONT.ACCOUNT<AC.CO.CODE>
    R.DR.STMT.ENTRY<AC.STE.EXPOSURE.DATE>     = TODAY
    R.DR.STMT.ENTRY<AC.STE.CURRENCY.MARKET>   = '1'
    R.DR.STMT.ENTRY<AC.STE.TRANS.REFERENCE>   = Y.NEW.AC
    R.DR.STMT.ENTRY<AC.STE.SYSTEM.ID>         = 'AC'
    R.DR.STMT.ENTRY<AC.STE.PROCESSING.DATE>   = TODAY
    R.DR.STMT.ENTRY<AC.STE.BOOKING.DATE>      = TODAY

    CHANGE @FM TO @SM IN R.DR.STMT.ENTRY
    CHANGE @SM TO @VM IN R.DR.STMT.ENTRY

    R.STMT.ENTRY<-1> = R.DR.STMT.ENTRY

    R.CR.STMT.ENTRY<AC.STE.ACCOUNT.NUMBER>   = Y.INTERNAL.ACC
    R.CR.STMT.ENTRY<AC.STE.COMPANY.CODE>     = R.INT.ACC<AC.CO.CODE>
    R.CR.STMT.ENTRY<AC.STE.AMOUNT.LCY>       = Y.NAB.AMT
    R.CR.STMT.ENTRY<AC.STE.TRANSACTION.CODE> = '51'
    R.CR.STMT.ENTRY<AC.STE.PRODUCT.CATEGORY> = R.INT.ACC<AC.CATEGORY>
    R.CR.STMT.ENTRY<AC.STE.VALUE.DATE>       = Y.NAB.DATE
    R.CR.STMT.ENTRY<AC.STE.CURRENCY>         = R.INT.ACC<AC.CURRENCY>
    R.CR.STMT.ENTRY<AC.STE.OUR.REFERENCE>    = R.INT.ACC<AC.CO.CODE>
    R.CR.STMT.ENTRY<AC.STE.EXPOSURE.DATE>    = TODAY
    R.CR.STMT.ENTRY<AC.STE.CURRENCY.MARKET>  = '1'
    R.CR.STMT.ENTRY<AC.STE.TRANS.REFERENCE>  = Y.NEW.AC
    R.CR.STMT.ENTRY<AC.STE.SYSTEM.ID>        = 'AC'
    R.CR.STMT.ENTRY<AC.STE.PROCESSING.DATE>  = TODAY
    R.CR.STMT.ENTRY<AC.STE.BOOKING.DATE>     = TODAY

    CHANGE @FM TO @SM IN R.CR.STMT.ENTRY
    CHANGE @SM TO @VM IN R.CR.STMT.ENTRY

    R.STMT.ENTRY<-1> = R.CR.STMT.ENTRY
    IF Y.LOAN.COMP THEN
        CALL LOAD.COMPANY(Y.LOAN.COMP)
    END
    ACC.PRODUCT = 'AC'
    ACC.TYPE = 'SAO'  ;*Automatically overridden when an override conditions

    CALL EB.ACCOUNTING(ACC.PRODUCT,ACC.TYPE,R.STMT.ENTRY,'')  ;* Raise accounting for Consolidated

    CALL OCOMO('Processed the Arrangement: ':ARR.ID)

RETURN
*------------------------------------------------
END1:
END
