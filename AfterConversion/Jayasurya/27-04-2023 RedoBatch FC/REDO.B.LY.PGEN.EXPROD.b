* @ValidationCode : Mjo1NDY3NjAwMTE6Q3AxMjUyOjE2ODI1ODEwNTE0ODc6SVRTU0JORzotMTotMTowOjA6ZmFsc2U6Ti9BOkRFVl8yMDIxMDguMDotMTotMQ==
* @ValidationInfo : Timestamp         : 27 Apr 2023 13:07:31
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSSBNG
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : DEV_202108.0
$PACKAGE APAP.REDOBATCH
SUBROUTINE REDO.B.LY.PGEN.EXPROD(CUS.ID)
*-------------------------------------------------------------------------------------------------
*DESCRIPTION:
*  This routine is attached to the batch record BNK/REDO.B.LY.PGEN.EXPROD
*  This routine selects the necesary records from various files and generate the points for
*  existent active products
* ------------------------------------------------------------------------------------------------
* Input/Output:
*--------------
* IN  : -NA-
* OUT : -NA-
*
* Dependencies:
*---------------
* CALLS     : -NA-
* CALLED BY : -NA-
*
* Revision History:
*------------------
*   Date               who           Reference            Description
* 17-JUN-2013   RMONDRAGON        ODR-2011-06-0243      Initial Creation
* Date                   who                   Reference
* 12-04-2023         CONVERSTION TOOL     R22 AUTO CONVERSTION - FM TO @FM AND VM TO @VM AND ++ TO += 1 AND TNO TO C$T24.SESSION.NO
* 12-04-2023          ANIL KUMAR B        R22 MANUAL CONVERSTION -CALL RTN METHOD
*----------------------------------------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.CUSTOMER
    $INSERT I_F.ACCOUNT

    $INSERT I_F.REDO.LY.POINTS
    $INSERT I_F.REDO.LY.POINTS.TOT
    $INSERT I_F.REDO.LY.MASTERPRGDR
    $INSERT I_REDO.B.LY.PGEN.EXPROD.COMMON ;*Tus Start
    $INSERT I_F.EB.CONTRACT.BALANCES ;*Tus End
    $USING APAP.TAM

    GOSUB OPEN.FILE
    GOSUB PROCESS

RETURN

*---------
OPEN.FILE:
*---------

    FN.TEMP.LY.PGEN.EXPROD = 'F.TEMP.LY.PGEN.EXPROD'
    F.TEMP.LY.PGEN.EXPROD = ''
    OPEN FN.TEMP.LY.PGEN.EXPROD TO F.TEMP.LY.PGEN.EXPROD ELSE

        TEXT = 'Error in opening : ':FN.TEMP.LY.PGEN.EXPROD
        CALL FATAL.ERROR('REDO.B.LY.PGEN.EXPROD')
    END

RETURN

*-------
PROCESS:
*-------

    CRT 'PROCESSING CUSTOMER NO. ':CUS.ID

    Y.MOD.TOT = DCOUNT(PRG.MOD.LST,@FM)

    R.CUSTOMER = '' ; CUS.ERR = ''
    CALL F.READ(FN.CUSTOMER,CUS.ID,R.CUSTOMER,F.CUSTOMER,CUS.ERR)
    IF R.CUSTOMER THEN
        CUS.LG = R.CUSTOMER<EB.CUS.LOCAL.REF,POS.L.CU.G.LEALTAD>
    END

    MOD.CNT = 1
    LOOP
    WHILE MOD.CNT LE Y.MOD.TOT
        Y.PRG.TOT = DCOUNT(PRG.PER.MOD<MOD.CNT>,@VM)
        PRG.CNT = 1
        LOOP
        WHILE PRG.CNT LE Y.PRG.TOT
            PRG.ID = PRG.LST<MOD.CNT,PRG.CNT>
            Y.PRG.LG = PRG.CUS.GRP.LST<MOD.CNT,PRG.CNT>
            GOSUB CHECK.PRG.PARAMS
            IF Y.PROCESS EQ 'Y' THEN
                IF Y.PRG.LG NE 'ALLCG' AND Y.PRG.LG EQ CUS.LG THEN
                    GOSUB EXIST.PROD
                END
                IF Y.PRG.LG EQ 'ALLCG' AND CUS.LG NE '' THEN
                    GOSUB EXIST.PROD
                END
            END
            PRG.CNT += 1
        REPEAT
        MOD.CNT += 1
    REPEAT

RETURN

*----------------
CHECK.PRG.PARAMS:
*----------------

    Y.PROCESS = 'Y'

    IF PRG.END.DATE.LST<MOD.CNT,PRG.CNT> THEN
        IF TODAY LE PRG.END.DATE.LST<MOD.CNT,PRG.CNT> THEN
            GOSUB UPD.EXP.DATE
        END ELSE
            Y.PROCESS = 'N'
        END
    END ELSE
        GOSUB UPD.EXP.DATE
    END

RETURN

*------------
UPD.EXP.DATE:
*------------

    IF PRG.EXP.DATE.LST<MOD.CNT,PRG.CNT> EQ '' THEN
        DAYS.EXP = PRG.DAYS.EXP.LST<MOD.CNT,PRG.CNT>
        EXP.DATE = TODAY
        TEMP.DAYS.EXP = '+':DAYS.EXP:'C'
        CALL CDT('',EXP.DATE,TEMP.DAYS.EXP)
    END ELSE
        EXP.DATE = PRG.EXP.DATE.LST<MOD.CNT,PRG.CNT>
    END

RETURN

*----------
EXIST.PROD:
*----------

    EX.PROD.AS = PRG.EX.PROD.IN.MOD<MOD.CNT,PRG.CNT>
    CNT.EX.PROD = DCOUNT(EX.PROD.AS,'*')
    COUNT.EX.PROD = 1
    Y.WRITE.ACTION = 'N'
    LOOP
    WHILE COUNT.EX.PROD LE CNT.EX.PROD
        VAR.EX.PROD.AS = FIELD(EX.PROD.AS,'*',COUNT.EX.PROD)
        PR = FIELD(VAR.EX.PROD.AS,",",1)
        NO = FIELD(VAR.EX.PROD.AS,",",2)
        AM = FIELD(VAR.EX.PROD.AS,",",3)
        Y.NO.PROC = 'Y'

*    READ Y.CUS.ACCTS FROM F.CUSTOMER.ACCOUNT,CUS.ID ELSE ;*Tus Start
        CALL F.READ(FN.CUSTOMER.ACCOUNT,CUS.ID,Y.CUS.ACCTS,F.CUSTOMER.ACCOUNT,Y.CUS.ACCTS.ERR)
        IF Y.CUS.ACCTS.ERR THEN  ;* Tus End
            Y.NO.PROC = 'N'
        END
        IF Y.NO.PROC EQ 'Y' THEN
            NOR.ACC = DCOUNT(Y.CUS.ACCTS,@FM)
            GOSUB GET.ACCT
            GOSUB CHK.ACCT
            IF POINTGEN EQ 'N' THEN
                COUNT.EX.PROD = CNT.EX.PROD
            END
        END
        COUNT.EX.PROD += 1
        NO = '' ; AM = '' ; Y.CUS.ACCTS = '' ; NOR.ACC = ''
    REPEAT

    GOSUB WRITE.ACT.FOR.EX.PROD

RETURN

*--------
GET.ACCT:
*--------

    CNT.ACC = 1
    CUS.ACC.CNT = ''
    NO.OF.ACC = '' ; CUS.ACC = '' ; WORKING.BAL = ''
    LOOP
    WHILE CNT.ACC LE NOR.ACC
        VAR.ACC.ID = FIELD(Y.CUS.ACCTS,@FM,CNT.ACC)
        R.ACCOUNT = '' ; ACC.ERR = '' ;
        CALL F.READ(FN.ACCOUNT,VAR.ACC.ID,R.ACCOUNT,F.ACCOUNT,ACC.ERR);*Tus Start
        R.ECB='' ; ECB.ERR=''
        CALL EB.READ.HVT("EB.CONTRACT.BALANCES",VAR.ACC.ID,R.ECB,ECB.ERR);*Tus End
        VAR.CATEGORY = R.ACCOUNT<AC.CATEGORY>
        VAR.CCY = R.ACCOUNT<AC.CURRENCY>
        IF VAR.CATEGORY EQ PR AND VAR.CCY EQ 'DOP' THEN
            GEN = 'G'
            GOSUB VAL.ACC.IECOND
            IF GEN EQ 'NG' THEN
                CONTINUE
            END
            ARR.ID = ''
            ARR.ID = R.ACCOUNT<AC.ARRANGEMENT.ID>
            IF ARR.ID NE '' THEN
*CALL APAP.TAM.REDO.GET.TOTAL.OUTSTANDING.SIN.UNC.UND(ARR.ID,Y.PROP.AMT,Y.TOTAL.AMT) ;*MANUAL R22 CODE CONVERSION
                CALL APAP.TAM.redoGetTotalOutstandingSinUncUnd(ARR.ID,Y.PROP.AMT,Y.TOTAL.AMT) ;*MANUAL R22 CODE CONVERSION
                VAR.WORKING.BAL = FIELD(Y.PROP.AMT,@FM,1)
            END ELSE
* VAR.WORKING.BAL = R.ACCOUNT<AC.WORKING.BALANCE> ;*Tus Start
                VAR.WORKING.BAL = R.ECB<ECB.WORKING.BALANCE> ;*Tus End
            END
            IF VAR.WORKING.BAL EQ '' THEN
                VAR.WORKING.BAL = 0
            END
            NO.OF.ACC+=1
            CUS.ACC<-1> = VAR.ACC.ID
            WORKING.BAL<-1> = VAR.WORKING.BAL
        END
        CNT.ACC += 1
        VAR.ACC.ID = ''; VAR.CATEGORY = ''; VAR.CCY = ''; VAR.WORKING.BAL = ''
    REPEAT

RETURN

*--------
CHK.ACCT:
*--------

    POINTGEN = ''
    IF NO.OF.ACC EQ NO THEN
        Y.ACC.CNT = DCOUNT(CUS.ACC,@FM)
        Y.ACC.COUNT = 1
        LOOP
        WHILE Y.ACC.COUNT LE Y.ACC.CNT
            Y.WORKING.BAL = WORKING.BAL<Y.ACC.COUNT>
            GOSUB CHK.WORKING.BAL
            IF POINTGEN EQ 'N' THEN
                Y.ACC.COUNT = Y.ACC.CNT
            END
            Y.ACC.COUNT += 1
        REPEAT
        Y.WORKING.BAL = '' ; Y.ACC.STATUS = ''
    END ELSE
        POINTGEN = 'N'
    END
    Y.ACC.ID = '' ; Y.ACC.CNT = '' ;
    CUS.ACC = '' ; WORKING.BAL = '' ; NO.OF.ACC = ''

RETURN

*---------------
CHK.WORKING.BAL:
*---------------

    BEGIN CASE
        CASE AM NE '0' AND Y.WORKING.BAL GE AM
            POINTGEN = 'Y'
        CASE AM NE '0' AND Y.WORKING.BAL LT AM
            POINTGEN = 'N'
        CASE AM EQ '0'
            POINTGEN = 'Y'
    END CASE

RETURN

*---------------------
WRITE.ACT.FOR.EX.PROD:
*---------------------

    IF POINTGEN EQ 'Y' THEN
        CRT '-> GENERATING POINTS FOR PROGRAM ID ':PRG.ID:'...'
        R.REDO.LY.POINTS = '' ; PTS.CHG = 0 ; ACCT.ID = ''
        CALL F.READU(FN.REDO.LY.POINTS,CUS.ID,R.REDO.LY.POINTS,F.REDO.LY.POINTS,RLP.ERR,'')
        GOSUB ASSIGN.AUDIT
        PRO.LST = R.REDO.LY.POINTS<REDO.PT.PRODUCT>
        ACCT.ID = ''
        PT.QTY = PRG.PTS.IN.MOD<MOD.CNT,PRG.CNT>
        QTY.VALUE = PT.QTY * PRG.POINT.VALUE.LST<MOD.CNT,PRG.CNT>
        PRO.ID = PR
        GOSUB ASSIGN.LY.PTS
        IF PTS.CHG THEN
            CALL F.WRITE(FN.REDO.LY.POINTS,CUS.ID,R.REDO.LY.POINTS)
        END
        GOSUB ASSIGN.LY.PTS.TOT
    END

RETURN

*--------------
VAL.ACC.IECOND:
*--------------

    IPRG.COND.TYPE.EXINC = PRG.COND.TYPE.EXINC<MOD.CNT,PRG.CNT>
    IPRG.APP.EXC.COND = PRG.APP.EXC.COND<MOD.CNT,PRG.CNT>
    IPRG.EXC.EST.ACCT = PRG.EXC.EST.ACCT<MOD.CNT,PRG.CNT>
    CHANGE '*' TO @FM IN IPRG.EXC.EST.ACCT
    IPRG.APP.INC.COND = PRG.APP.INC.COND<MOD.CNT,PRG.CNT>
    IPRG.INC.EST.ACCT = PRG.INC.EST.ACCT<MOD.CNT,PRG.CNT>
    CHANGE '*' TO @FM IN IPRG.INC.EST.ACCT

    Y.AC.STATUS1 = R.ACCOUNT<AC.LOCAL.REF,POS.L.AC.STATUS1>
    Y.AC.STATUS2 = R.ACCOUNT<AC.LOCAL.REF,POS.L.AC.STATUS2>

    IF IPRG.COND.TYPE.EXINC EQ '' THEN
        RETURN
    END

    IF IPRG.COND.TYPE.EXINC EQ 'ESTADO.CUENTA' AND IPRG.APP.EXC.COND EQ 'ESPECIFICA' THEN
        GOSUB CHECK.STATUS.FOR.EXC
    END ELSE
        Y.PROC.INC.COND = 1
    END

    IF Y.PROC.INC.COND EQ '1' THEN
        IF IPRG.COND.TYPE.EXINC EQ 'ESTADO.CUENTA' AND IPRG.APP.INC.COND EQ 'ESPECIFICA' THEN
            GOSUB CHECK.STATUS.FOR.INC
        END
    END

RETURN

*--------------------
CHECK.STATUS.FOR.EXC:
*--------------------

    LOCATE Y.AC.STATUS1 IN IPRG.EXC.EST.ACCT SETTING EXC.EST.ACCT.POS THEN
        GEN = 'NG'
    END ELSE
        LOCATE Y.AC.STATUS2 IN IPRG.EXC.EST.ACCT SETTING EXC.EST.ACCT.POS THEN
            GEN = 'NG'
        END
    END

RETURN

*--------------------
CHECK.STATUS.FOR.INC:
*--------------------

    LOCATE Y.AC.STATUS1 IN IPRG.INC.EST.ACCT SETTING INC.EST.ACCT.POS ELSE
        LOCATE Y.AC.STATUS2 IN IPRG.INC.EST.ACCT SETTING INC.EST.ACCT.POS ELSE
            GEN = 'NG'
        END
    END

RETURN

*------------
ASSIGN.AUDIT:
*------------

    CURR.NO = ''
    CUR.TIME = OCONV(TIME(), "MT")
    CHANGE ':' TO '' IN CUR.TIME
    CURR.NO = R.REDO.LY.POINTS<REDO.PT.CURR.NO>
    IF CURR.NO EQ '' THEN
        CURR.NO = 1
    END ELSE
        CURR.NO += 1
    END
    R.REDO.LY.POINTS<REDO.PT.RECORD.STATUS> = ''
    R.REDO.LY.POINTS<REDO.PT.CURR.NO> = CURR.NO
    R.REDO.LY.POINTS<REDO.PT.INPUTTER> = C$T24.SESSION.NO:'_':OPERATOR ;*R22 AUTO CONVERSTION TNO TO C$T24.SESSION.NO
    R.REDO.LY.POINTS<REDO.PT.DATE.TIME> = G.DATE[3,6]:CUR.TIME
    R.REDO.LY.POINTS<REDO.PT.AUTHORISER> = C$T24.SESSION.NO:'_':OPERATOR  ;*R22 AUTO CONVERSTION TNO TO C$T24.SESSION.NO
    R.REDO.LY.POINTS<REDO.PT.CO.CODE> = ID.COMPANY
    R.REDO.LY.POINTS<REDO.PT.DEPT.CODE> = 1

RETURN

*-------------
ASSIGN.LY.PTS:
*-------------

    PTS.CHG = 1
    CHANGE @VM TO @FM IN PRO.LST
    LOCATE PRO.ID IN PRO.LST SETTING PRO.INS.POS ELSE
        R.REDO.LY.POINTS<REDO.PT.PRODUCT,PRO.INS.POS> = PRO.ID
    END
    R.REDO.LY.POINTS<REDO.PT.PROGRAM,PRO.INS.POS,-1> = PRG.ID
    R.REDO.LY.POINTS<REDO.PT.TXN.ID,PRO.INS.POS,-1> = ''
    R.REDO.LY.POINTS<REDO.PT.QUANTITY,PRO.INS.POS,-1> = PT.QTY
    R.REDO.LY.POINTS<REDO.PT.QTY.VALUE,PRO.INS.POS,-1> = QTY.VALUE
    IF PRG.AIR.LST<MOD.CNT,PRG.CNT> EQ 'SI' THEN
        R.REDO.LY.POINTS<REDO.PT.STATUS,PRO.INS.POS,-1> = 'Pendiente.Someter'
    END ELSE
        R.REDO.LY.POINTS<REDO.PT.STATUS,PRO.INS.POS,-1> = 'Liberada'
    END
    R.REDO.LY.POINTS<REDO.PT.GEN.DATE,PRO.INS.POS,-1> = TODAY
    R.REDO.LY.POINTS<REDO.PT.AVAIL.DATE,PRO.INS.POS,-1> = TODAY
    R.REDO.LY.POINTS<REDO.PT.EXP.DATE,PRO.INS.POS,-1> = EXP.DATE
    R.REDO.LY.POINTS<REDO.PT.MAN.DATE,PRO.INS.POS,-1> = ''
    R.REDO.LY.POINTS<REDO.PT.MAN.QTY,PRO.INS.POS,-1> = ''
    R.REDO.LY.POINTS<REDO.PT.MAN.DESC,PRO.INS.POS,-1> = ''
    R.REDO.LY.POINTS<REDO.PT.MAN.USER,PRO.INS.POS,-1> = ''

RETURN

*-----------------
ASSIGN.LY.PTS.TOT:
*-----------------

    GOSUB UPD.PTS.MMYY
    GOSUB UPD.PTS.PGM.YY
    GOSUB UPD.PTS.YYYY
    GOSUB UPD.TOTALS
    IF PRG.POINT.USE.LST<MOD.CNT,PRG.CNT> EQ 4 THEN
        GOSUB UPD.PTS.CUS
    END
    IF PRG.POINT.USE.LST<MOD.CNT,PRG.CNT> EQ 3 THEN
        GOSUB UPD.PTS.BUS
    END

    Y.UPD.ONLINE = 0
    GOSUB CHECK.MASTER.PRG
    IF Y.UPD.ONLINE EQ 1  THEN
        GOSUB UPD.PTS.FOR.DEB
        IF PRG.ID.OLD NE '' THEN
            PRG.ID = PRG.ID.OLD
        END
    END

RETURN

*----------------
CHECK.MASTER.PRG:
*----------------

    Y.MASTER.PRG = ''
    Y.SLAVES.PRG = ''
    R.REDO.LY.MASTERPRGDR = '' ; MAS.ERR = ''

*  CALL F.READ(FN.REDO.LY.MASTERPRGDR,'SYSTEM',R.REDO.LY.MASTERPRGDR,F.REDO.LY.MASTERPRGDR,MAS.ERR) ;*Tus Start
    CALL CACHE.READ(FN.REDO.LY.MASTERPRGDR,'SYSTEM',R.REDO.LY.MASTERPRGDR,MAS.ERR) ; * Tus End
    IF R.REDO.LY.MASTERPRGDR THEN
        Y.MASTER.PRG = R.REDO.LY.MASTERPRGDR<REDO.MASPRG.MASTER.PRG>
        Y.SLAVES.PRG = R.REDO.LY.MASTERPRGDR<REDO.MASPRG.SLAVE.PRG>
    END

    Y.SLAVES.PRG.CNT = DCOUNT(Y.SLAVES.PRG,@VM)

    IF Y.SLAVES.PRG.CNT EQ 0 AND Y.MASTER.PRG NE '' THEN
        IF PRG.ID EQ Y.MASTER.PRG THEN
            PRG.ID = Y.MASTER.PRG
            Y.UPD.ONLINE = 1
            RETURN
        END
    END

    Y.SLAVE.CNT = 1
    LOOP
    WHILE Y.SLAVE.CNT LE Y.SLAVES.PRG.CNT
        Y.SLAVE.PRG = FIELD(Y.SLAVES.PRG,@VM,Y.SLAVE.CNT)
        IF PRG.ID EQ Y.MASTER.PRG OR PRG.ID EQ Y.SLAVE.PRG THEN
            PRG.ID.OLD = PRG.ID
            PRG.ID = Y.MASTER.PRG
            Y.UPD.ONLINE = 1
            Y.SLAVE.CNT = Y.SLAVES.PRG.CNT
        END
        Y.SLAVE.CNT += 1
    REPEAT

RETURN

*------------
UPD.PTS.MMYY:
*------------

    TOT.POINTS.ID = CUS.ID:PRG.ID:CUR.MONTH:CUR.YEAR
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*--------------
UPD.PTS.PGM.YY:
*--------------

    TOT.POINTS.ID = CUS.ID:PRG.ID:'ALL':CUR.YEAR
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*------------
UPD.PTS.YYYY:
*------------

    TOT.POINTS.ID = CUS.ID:'ALL':CUR.YEAR
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*-----------
UPD.PTS.CUS:
*-----------

    TOT.POINTS.ID = CUS.ID:'C'
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*-----------
UPD.PTS.BUS:
*-----------

    TOT.POINTS.ID = CUS.ID:'B'
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*---------------
UPD.PTS.FOR.DEB:
*---------------

    TOT.POINTS.ID = CUS.ID:'ONLINEDEB'
    R.REDO.LY.POINTS.TOT =''
    CALL F.READU(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT,F.REDO.LY.POINTS.TOT,TOT.ERR,'')
    GOSUB UPD.PROCESS.DEB
    GOSUB ASSIGN.AUDIT.TOT
    CALL F.WRITE(FN.REDO.LY.POINTS.TOT,TOT.POINTS.ID,R.REDO.LY.POINTS.TOT)

RETURN

*-----------
UPD.PROCESS:
*-----------

    VAR.AVAIL = 0 ; VAR.AVAIL.VALUE = 0 ; VAR.NAVAIL = 0 ; VAR.NAVAIL.VALUE = 0
    VAR.TOT.GEN = 0 ; VAR.TOT.GEN.VALUE = 0
    IF R.REDO.LY.POINTS.TOT EQ '' THEN
        VAR.NAVAIL = 0
        VAR.NAVAIL.VALUE = 0
        VAR.TOT.GEN = 0
        VAR.TOT.GEN.VALUE = 0
        VAR.AVAIL = 0
        VAR.AVAIL.VALUE = 0
    END ELSE
        VAR.TOT.GEN = R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.GEN.POINTS>
        VAR.TOT.GEN.VALUE = R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.GEN.VALUE>
        VAR.AVAIL   =  R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.POINTS>
        VAR.AVAIL.VALUE =  R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.VALUE>
        VAR.NAVAIL   =  R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.NAVAIL.POINTS>
        VAR.NAVAIL.VALUE =  R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.NAVAIL.VALUE>
    END
    IF PT.QTY GT 0 THEN
        VAR.TOT.GEN += PT.QTY
        VAR.TOT.GEN.VALUE += QTY.VALUE
    END
    VAR.AVAIL += PT.QTY
    VAR.AVAIL.VALUE += QTY.VALUE
    IF PT.QTY LT 0 THEN
        VAR.NAVAIL = VAR.NAVAIL + NEG(PT.QTY)
        VAR.NAVAIL.VALUE = VAR.NAVAIL.VALUE + NEG(QTY.VALUE)
    END
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.POINTS> = VAR.AVAIL
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.VALUE> = VAR.AVAIL.VALUE
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.GEN.POINTS> = VAR.TOT.GEN
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.GEN.VALUE> = VAR.TOT.GEN.VALUE
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.NAVAIL.POINTS> = VAR.NAVAIL
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.NAVAIL.VALUE> = VAR.NAVAIL.VALUE

RETURN

*---------------
UPD.PROCESS.DEB:
*---------------

    VAR.AVAIL = 0 ; VAR.AVAIL.VALUE = 0

    IF R.REDO.LY.POINTS.TOT EQ '' THEN
        VAR.AVAL = 0
        VAR.AVAIL.VALUE = 0
    END ELSE
        VAR.AVAIL = R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.POINTS>
        VAR.AVAIL.VALUE =  R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.VALUE>
    END

    VAR.AVAIL += PT.QTY
    VAR.AVAIL.VALUE += QTY.VALUE

    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.POINTS> = VAR.AVAIL
    R.REDO.LY.POINTS.TOT<REDO.PT.T.TOT.AVAIL.VALUE> = VAR.AVAIL.VALUE

RETURN

*----------
UPD.TOTALS:
*----------

    READU VAR.T.GEN FROM F.TEMP.LY.PGEN.EXPROD,'VAR.T.GEN' ELSE

        VAR.T.GEN<MOD.CNT,PRG.CNT> = 0
    END

    READU VAR.T.GEN.VALUE FROM F.TEMP.LY.PGEN.EXPROD,'VAR.T.GEN.VALUE' ELSE

        VAR.T.GEN.VALUE<MOD.CNT,PRG.CNT> = 0
    END

    READU VAR.T.AVAIL FROM F.TEMP.LY.PGEN.EXPROD,'VAR.T.AVAIL' ELSE

        VAR.T.AVAIL<MOD.CNT,PRG.CNT> = 0
    END

    READU VAR.T.AVAIL.VALUE FROM F.TEMP.LY.PGEN.EXPROD,'VAR.T.AVAIL.VALUE' ELSE

        VAR.T.AVAIL.VALUE<MOD.CNT,PRG.CNT> = 0
    END

    READU VAR.T.NAVAIL FROM F.TEMP.LY.PGEN.EXPROD,'VAR.T.NAVAIL' ELSE

        VAR.T.NAVAIL<MOD.CNT,PRG.CNT> = 0
    END

    READU VAR.T.NAVAIL.VALUE FROM F.TEMP.LY.PGEN.EXPROD,'VAR.T.NAVAIL.VALUE' ELSE

        VAR.T.NAVAIL.VALUE<MOD.CNT,PRG.CNT> = 0
    END

    IF PT.QTY GT 0 THEN
        VAR.T.GEN<MOD.CNT,PRG.CNT> += PT.QTY
        VAR.T.GEN.VALUE<MOD.CNT,PRG.CNT> += QTY.VALUE
    END
    VAR.T.AVAIL<MOD.CNT,PRG.CNT> += PT.QTY
    VAR.T.AVAIL.VALUE<MOD.CNT,PRG.CNT> += QTY.VALUE
    IF PT.QTY LT 0 THEN
        VAR.T.NAVAIL<MOD.CNT,PRG.CNT> = VAR.T.NAVAIL + NEG(PT.QTY)
        VAR.T.NAVAIL.VALUE<MOD.CNT,PRG.CNT> = VAR.T.NAVAIL.VALUE + NEG(QTY.VALUE)
    END

    WRITEU VAR.T.GEN TO F.TEMP.LY.PGEN.EXPROD,'VAR.T.GEN'
    WRITEU VAR.T.GEN.VALUE TO F.TEMP.LY.PGEN.EXPROD,'VAR.T.GEN.VALUE'
    WRITEU VAR.T.AVAIL TO F.TEMP.LY.PGEN.EXPROD,'VAR.T.AVAIL'
    WRITEU VAR.T.AVAIL.VALUE TO F.TEMP.LY.PGEN.EXPROD,'VAR.T.AVAIL.VALUE'
    WRITEU VAR.T.NAVAIL TO F.TEMP.LY.PGEN.EXPROD,'VAR.T.NAVAIL'
    WRITEU VAR.T.NAVAIL.VALUE TO F.TEMP.LY.PGEN.EXPROD,'VAR.T.NAVAIL.VALUE'

RETURN

*----------------
ASSIGN.AUDIT.TOT:
*----------------

    CURR.NO = ''
    CUR.TIME = OCONV(TIME(), "MT")
    CHANGE ':' TO '' IN CUR.TIME
    CURR.NO = R.REDO.LY.POINTS.TOT<REDO.PT.T.CURR.NO>
    IF CURR.NO EQ '' THEN
        CURR.NO = 1
    END ELSE
        CURR.NO += 1
    END
    R.REDO.LY.POINTS.TOT<REDO.PT.T.RECORD.STATUS> = ''
    R.REDO.LY.POINTS.TOT<REDO.PT.T.CURR.NO> = CURR.NO
    R.REDO.LY.POINTS.TOT<REDO.PT.T.INPUTTER> = C$T24.SESSION.NO:'_':OPERATOR  ;*R22 AUTO CONVERSTION TNO TO C$T24.SESSION.NO
    R.REDO.LY.POINTS.TOT<REDO.PT.T.DATE.TIME> = G.DATE[3,6]:CUR.TIME
    R.REDO.LY.POINTS.TOT<REDO.PT.T.AUTHORISER> = C$T24.SESSION.NO:'_':OPERATOR  ;*R22 AUTO CONVERSTION TNO TO C$T24.SESSION.NO
    R.REDO.LY.POINTS.TOT<REDO.PT.T.CO.CODE> = ID.COMPANY
    R.REDO.LY.POINTS.TOT<REDO.PT.T.DEPT.CODE> = 1

RETURN

END
