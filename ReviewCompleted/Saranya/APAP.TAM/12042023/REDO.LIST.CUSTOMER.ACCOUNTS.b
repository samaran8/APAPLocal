* @ValidationCode : MjoxMDUwNTE1NDA3OkNwMTI1MjoxNjgxMjk1MjE3MzIzOklUU1M6LTE6LTE6MDoxOmZhbHNlOk4vQTpSMjFfQU1SLjA6LTE6LTE=
* @ValidationInfo : Timestamp         : 12 Apr 2023 15:56:57
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : ITSS
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : true
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.TAM
SUBROUTINE REDO.LIST.CUSTOMER.ACCOUNTS(AC.LIST)
*-----------------------------------------------------------------------------
* This is the nofile enquiry routine attached to STANDARD.SELECTION record
* NOFILE.CUSTOMER.AC.LIST for the enquiry CUST.ACCT.FULL. This subroutine will
* fetch all accounts that belong to the customer as well as the accounts
* where the customer is the joint holder Read CUSTOMER.ACCOUNT and
* JOINT.CONTRACTS.XREF. One additional functionality is to either show all
* accounts within the set of books or only in the current book based on the
* setting in the enquiry
*------------------------------------------------------------------------------
* Modification History
* DATE ODR BY DESCRIPTION
* 14-04-2011
* 03-07-2011 PACS00056280 MARIMUTHU S
* 16-AUG-2011 PACS00102786 JEEVA T
* 15-MAY-2012 PACS00185460 RIYAS
* 08-NOV-2012 PACS00232596 Marimuthu S
*
* Date             Who                   Reference      Description
* 12.04.2023       Conversion Tool       R22            Auto Conversion     - FM TO @FM, VM TO @VM, = TO EQ
* 12.04.2023       Shanmugapriya M       R22            Manual Conversion   - No changes
*
*------------------------------------------------------------------------------
*
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_ENQUIRY.COMMON
    $INSERT I_F.ENQUIRY
    $INSERT I_F.ACCOUNT
    $INSERT I_F.CUSTOMER
    $INSERT I_F.RELATION
    $INSERT I_F.AI.REDO.ARCIB.PARAMETER
    $INSERT I_F.ALTERNATE.ACCOUNT
    $INSERT I_F.EB.CONTRACT.BALANCES        ;*TUS S/E
*

    GOSUB INITIALISE
*
RETURN
*
***********
INITIALISE:
***********
*
* Get the Customer Id from the enquiry selection. Return if no Customer Id to process
* If the Customer have some joint accounts, then read JOINT.CONTRACTS,XREF and get the joint accounts for the customer
*

    Y.SEL.FLAG = ''
    FN.REDO.EMPLOYEE.ACCOUNTS = 'F.REDO.EMPLOYEE.ACCOUNTS'
    F.REDO.EMPLOYEE.ACCOUNTS = ''
    CALL OPF(FN.REDO.EMPLOYEE.ACCOUNTS,F.REDO.EMPLOYEE.ACCOUNTS)
    L.AC.AV.BAL.POS = ''
    CALL GET.LOC.REF('ACCOUNT','L.AC.AV.BAL',L.AC.AV.BAL.POS)

    AC.LIST = ''
    PRIME.AC=''
    FN.ACCOUNT='F.ACCOUNT'
    F.ACCOUNT=''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)

    IF R.ENQ<ENQ.COMPANY.SELECT> THEN
        ALL.COMPANIES=1
    END ELSE
        ALL.COMPANIES=''
    END
*
    FN.CUSTOMER.ACCOUNT='F.CUSTOMER.ACCOUNT'
    F.CUSTOMER.ACCOUNT=''
    CALL OPF(FN.CUSTOMER.ACCOUNT,F.CUSTOMER.ACCOUNT)

** PACS00056280 -S
    FN.CUSTOMER = 'F.CUSTOMER'
    F.CUSTOMER = ''
    CALL OPF(FN.CUSTOMER,F.CUSTOMER)

    FN.RELATION = 'F.RELATION'
    F.RELATION = ''
    CALL OPF(FN.RELATION,F.RELATION)
** PACS00056280 -E

    FN.JOINT.CONTRACTS.XREF='F.JOINT.CONTRACTS.XREF'
    F.JOINT.CONTRACTS.XREF=''
    CALL OPF(FN.JOINT.CONTRACTS.XREF,F.JOINT.CONTRACTS.XREF)
*
* CALL F.READ(FN.JOINT.CONTRACTS.XREF,CUSTOMER.ID,R.JOINT.AC,F.JOINT.CONTRACTS.XREF,JOINT.ERR)

    FN.AI.REDO.ARCIB.PARAMETER = 'F.AI.REDO.ARCIB.PARAMETER'
    F.AI.REDO.ARCIB.PARAMETER = ''
    CALL OPF(FN.AI.REDO.ARCIB.PARAMETER,F.AI.REDO.ARCIB.PARAMETER)

    FN.ALTERNATE.ACCOUNT = 'F.ALTERNATE.ACCOUNT'
    F.ALTERNATE.ACCOUNT = ''
    CALL OPF(FN.ALTERNATE.ACCOUNT,F.ALTERNATE.ACCOUNT)


    LOCATE 'MB.CUSTOMER.ID' IN D.FIELDS<1> SETTING CUSTOMER.ID.POS THEN
        CUSTOMER.ID=D.RANGE.AND.VALUE<CUSTOMER.ID.POS>
    END ELSE
        CUSTOMER.ID = ''
    END
    LOCATE '@ID' IN D.FIELDS<1> SETTING Y.ACCOUNT.POS THEN
        Y.ACCT.VAL=D.RANGE.AND.VALUE<Y.ACCOUNT.POS>
    END ELSE
        Y.ACCT.VAL = ''
    END


    IF NOT(CUSTOMER.ID) AND NOT(Y.ACCT.VAL) THEN
        SEL.CUS.ACC = 'SELECT ':FN.CUSTOMER
        CALL EB.READLIST(SEL.CUS.ACC,SEL.LIST.CUS,'',NO.OF.REC.CUS,SEL.CUS.HIS)
        LOOP
            REMOVE CUS.ID FROM SEL.LIST.CUS SETTING CUS.POS
        WHILE CUS.ID:CUS.POS
            CALL F.READ(FN.CUSTOMER.ACCOUNT,CUS.ID,R.PRIME.AC,F.CUSTOMER.ACCOUNT,PRIME.ERR)
            IF R.PRIME.AC THEN
                GOSUB CHK.PRIME.ACC
            END
            CALL F.READ(FN.JOINT.CONTRACTS.XREF,CUS.ID,R.JOINT.AC,F.JOINT.CONTRACTS.XREF,JOINT.ERR)
            IF R.JOINT.AC THEN
                GOSUB CHK.JOINT.ACC
            END
        REPEAT
        Y.SEL.FLAG = 1
    END
    IF NOT(Y.SEL.FLAG) THEN
        GOSUB PROCESS
    END

RETURN

********
PROCESS:
********

    R.ACC.VAL = ''
* Check for the primary and joint account
    IF NOT(Y.ACCT.VAL) AND CUSTOMER.ID THEN
        CALL F.READ(FN.CUSTOMER.ACCOUNT,CUSTOMER.ID,R.PRIME.AC,F.CUSTOMER.ACCOUNT,PRIME.ERR)
        IF R.PRIME.AC THEN

            GOSUB CHK.PRIME.ACC
        END
        CALL F.READ(FN.JOINT.CONTRACTS.XREF,CUSTOMER.ID,R.JOINT.AC,F.JOINT.CONTRACTS.XREF,JOINT.ERR)
        IF R.JOINT.AC THEN

            GOSUB CHK.JOINT.ACC
        END
    END
    ELSE
        Y.ERR.FLAG = '' ; R.ACC.VAL = ''
        CALL F.READ(FN.ACCOUNT,Y.ACCT.VAL,R.ACC.VAL,F.ACCOUNT,ERR)
        IF NOT(R.ACC.VAL) THEN
            CALL F.READ(FN.ALTERNATE.ACCOUNT,Y.ACCT.VAL,R.ALT.ACCT,F.ALTERNATE.ACCOUNT,ALT.AC.ERR)
            IF NOT(R.ALT.ACCT) THEN
                Y.ERR.FLAG = '1'
            END ELSE
                Y.ACCT.VAL = R.ALT.ACCT<AAC.GLOBUS.ACCT.NUMBER>
                R.ACC.VAL = ''
                CALL F.READ(FN.ACCOUNT,Y.ACCT.VAL,R.ACC.VAL,F.ACCOUNT,ERR)
                CUSTOMER.ID = R.ACC.VAL<AC.CUSTOMER>
            END
        END
        CUSTOMER.ID=R.ACC.VAL<AC.CUSTOMER>
        Y.ACC.JN.HLDR=R.ACC.VAL<AC.JOINT.HOLDER>
        R.PRIME.AC=Y.ACCT.VAL
        GOSUB CHK.PRIME.ACC
    END
RETURN
*
*************
FILL.THE.REC:
*************

* For each of the accounts in the CUSTOMER.ACCOUNT and JOINT.CONTRACTS.XREF, get the accounts details from the ACCOUNT file

** PACS00056280 - S
    CALL F.READ(FN.ACCOUNT,AC.ID,R.ACCOUNT,F.ACCOUNT,ACC.ERR)
    Y.CATEGORY = R.ACCOUNT<AC.CATEGORY>
*PACS00329413 - S
    IF (Y.CATEGORY GE 1000 AND Y.CATEGORY LE 1999) OR (Y.CATEGORY GE 6000 AND Y.CATEGORY LE 6599) THEN
        IF Y.CATEGORY GE 6011 AND Y.CATEGORY LE 6020 THEN
            RETURN
        END
    END ELSE
        RETURN
    END
*PACS00329413 - E
    IF R.ACCOUNT<AC.ARRANGEMENT.ID> THEN ;* This enquiry should not list the Loans
        RETURN
    END

*PACS00185460 -S
    CALL CACHE.READ(FN.AI.REDO.ARCIB.PARAMETER,'SYSTEM',R.AI.REDO.ARCIB.PARAMETER,RAP.ERR)
    Y.ACCOUNT.TYPE = R.AI.REDO.ARCIB.PARAMETER<AI.PARAM.ACCOUNT.TYPE>
    CHANGE @VM TO @FM IN Y.ACCOUNT.TYPE
    LOCATE 'DEPOSIT' IN Y.ACCOUNT.TYPE SETTING Y.TYPE.POS THEN
        Y.CATEG.START = R.AI.REDO.ARCIB.PARAMETER<AI.PARAM.CATEG.START,Y.TYPE.POS>
        Y.CATEG.END = R.AI.REDO.ARCIB.PARAMETER<AI.PARAM.CATEG.END,Y.TYPE.POS>
    END ELSE
        LOCATE 'DEPOSITOS' IN Y.ACCOUNT.TYPE SETTING Y.TYPE.POS THEN
            Y.CATEG.START = R.AI.REDO.ARCIB.PARAMETER<AI.PARAM.CATEG.START,Y.TYPE.POS>
            Y.CATEG.END = R.AI.REDO.ARCIB.PARAMETER<AI.PARAM.CATEG.END,Y.TYPE.POS>
        END
    END

    IF Y.CATEGORY GE Y.CATEG.START AND Y.CATEGORY LE Y.CATEG.END THEN
        RETURN
    END


    IF (Y.CATEGORY GE 6013 AND Y.CATEGORY LE 6020) OR (Y.CATEGORY GE 6600 AND Y.CATEGORY LE 6699) THEN

        RETURN

    END
*PACS00185460 -E

    Y.REL.CODES = R.ACCOUNT<AC.RELATION.CODE>
    Y.JNT.HOLDER = R.ACCOUNT<AC.JOINT.HOLDER>
    Y.CNT.VMM = DCOUNT(Y.JNT.HOLDER,@VM)
    Y.REL.DESC = ''
    Y.SHRT.NAME = ''
    Y.JNT.CUS = ''
    FLG = 0
    LOOP
    WHILE Y.CNT.VMM GT 0 DO
        FLG += 1
        Y.JNT.REL = Y.REL.CODES<1,FLG>
        IF Y.JNT.REL GE '500' AND Y.JNT.REL LE '699' THEN
            CALL F.READ(FN.RELATION,Y.JNT.REL,R.RELATION,F.RELATION,REL.ERR)
            Y.REL.DESC.ES = R.RELATION<EB.REL.DESCRIPTION,2>
            IF Y.REL.DESC.ES EQ '' THEN
                Y.REL.DESC<1,-1> = R.RELATION<EB.REL.DESCRIPTION,1>
            END ELSE
                Y.REL.DESC<1,-1> = R.RELATION<EB.REL.DESCRIPTION,2>
            END
            Y.JNT.CUS.DUP = Y.JNT.HOLDER<1,FLG>
            Y.JNT.CUS<1,-1> = Y.JNT.CUS.DUP
            CALL F.READ(FN.CUSTOMER,Y.JNT.CUS.DUP,R.CUSTOMER,F.CUSTOMER,CUS.ERR)
            Y.SHRT.NAME.DUP = R.CUSTOMER<EB.CUS.SHORT.NAME,1>
            IF Y.SHRT.NAME.DUP EQ '' THEN
                Y.SHRT.NAME<1,-1> = R.CUSTOMER<EB.CUS.SHORT.NAME,2>
            END ELSE
                Y.SHRT.NAME<1,-1> = R.CUSTOMER<EB.CUS.SHORT.NAME,1>
            END
        END
        Y.CNT.VMM -= 1
    REPEAT
** PACS00056280 -E
    IF NOT(Y.ERR.FLAG) THEN
        OUTREC=''
* 1 2 3 4 5 6 7 8 9 10
        IF CHK.JOINT.ACC.FLAG EQ 1 THEN ;*Tus Start               ;** R22 Auto conversion - = TO EQ
*OUTREC=AC.ID:'*':FILL.VALUE:'*':Y.JNT.CUS:'*':Y.SHRT.NAME:'*':Y.REL.DESC:'*':R.AC.REC<AC.ACCOUNT.TITLE.1>:'*':R.AC.REC<AC.CATEGORY>:'*':R.AC.REC<AC.CURRENCY>:'*':R.AC.REC<AC.LIMIT.REF>:'*':R.AC.REC<AC.WORKING.BALANCE>
            OUTREC=AC.ID:'*':FILL.VALUE:'*':Y.JNT.CUS:'*':Y.SHRT.NAME:'*':Y.REL.DESC:'*':R.AC.REC<AC.ACCOUNT.TITLE.1>:'*':R.AC.REC<AC.CATEGORY>:'*':R.AC.REC<AC.CURRENCY>:'*':R.AC.REC<AC.LIMIT.REF>:'*':R.ECB1<ECB.WORKING.BALANCE>
        END ELSE
            OUTREC=AC.ID:'*':FILL.VALUE:'*':Y.JNT.CUS:'*':Y.SHRT.NAME:'*':Y.REL.DESC:'*':R.AC.REC<AC.ACCOUNT.TITLE.1>:'*':R.AC.REC<AC.CATEGORY>:'*':R.AC.REC<AC.CURRENCY>:'*':R.AC.REC<AC.LIMIT.REF>:'*':R.ECB<ECB.WORKING.BALANCE>
        END ;*Tus End
* 11 12 13 14 15
*PACS00102786 - Starts
* added 14th FIELDS
*PACS00102786- Ends
        IF CHK.JOINT.ACC.FLAG EQ 1 THEN ;*Tus Start         ;** R22 Auto conversion - = TO EQ
*OUTREC:='*':R.AC.REC<AC.ONLINE.ACTUAL.BAL>:'*':R.AC.REC<AC.ONLINE.CLEARED.BAL>:'*':R.AC.REC<AC.LOCKED.AMOUNT>:'*':R.AC.REC<AC.LOCAL.REF,L.AC.AV.BAL.POS>:'*':R.AC.REC<AC.ACCOUNT.OFFICER>
            OUTREC:='*':R.ECB1<ECB.ONLINE.ACTUAL.BAL>:'*':R.ECB1<ECB.ONLINE.CLEARED.BAL>:'*':R.AC.REC<AC.LOCKED.AMOUNT>:'*':R.AC.REC<AC.LOCAL.REF,L.AC.AV.BAL.POS>:'*':R.AC.REC<AC.ACCOUNT.OFFICER>
        END ELSE
            OUTREC:='*':R.ECB<ECB.ONLINE.ACTUAL.BAL>:'*':R.ECB<ECB.ONLINE.CLEARED.BAL>:'*':R.AC.REC<AC.LOCKED.AMOUNT>:'*':R.AC.REC<AC.LOCAL.REF,L.AC.AV.BAL.POS>:'*':R.AC.REC<AC.ACCOUNT.OFFICER>
        END ;*Tus End
        AC.LIST<-1>=OUTREC
    END
RETURN
**************
CHK.PRIME.ACC:
**************
* Check for primary account record
    LOOP
        AC.ID = ''
        R.AC.REC = ''
        REMOVE AC.ID FROM R.PRIME.AC SETTING POS1
    WHILE AC.ID:POS1
        CALL F.READ(FN.ACCOUNT,AC.ID,R.AC.REC,F.ACCOUNT,AC.ERR)
*TUS START
        R.ECB = ''
        ECB.ERR = ''
        CALL EB.READ.HVT ('EB.CONTRACT.BALANCES', AC.ID, R.ECB, ECB.ERR)
*TUS END
        FILL.VALUE='PRIME'
        IF ALL.COMPANIES THEN
            GOSUB FILL.THE.REC
        END ELSE
            IF R.AC.REC<AC.CO.CODE> EQ ID.COMPANY THEN                    ;** R22 Auto conversion - = TO EQ
                GOSUB FILL.THE.REC
            END
        END
    REPEAT
RETURN
**************
CHK.JOINT.ACC:
**************
* Check for joint account records
    CHK.JOINT.ACC.FLAG=1
    SEL.CMD='SELECT ':FN.REDO.EMPLOYEE.ACCOUNTS
    CALL EB.READLIST(SEL.CMD,SEL.LIST,'',SEL.NOR,SEL.RET)
    LOOP
        AC.ID = ''
        REMOVE AC.ID FROM R.JOINT.AC SETTING POS2
    WHILE AC.ID:POS2
        FILL.VALUE='JOINT'
        CALL F.READ(FN.ACCOUNT,AC.ID,R.AC.REC,F.ACCOUNT,AC.ERR)
*TUS START
        R.ECB1 = ''
        ECB.ERR1 = ''
        CALL EB.READ.HVT ('EB.CONTRACT.BALANCES', AC.ID, R.ECB1, ECB.ERR1)
*TUS END
        Y.JN.CUS.ID=R.AC.REC<AC.CUSTOMER>
        LOCATE Y.JN.CUS.ID IN SEL.LIST SETTING Y.AC.JN.POS ELSE
            IF ALL.COMPANIES THEN
                GOSUB FILL.THE.REC
            END ELSE
                IF R.AC.REC<AC.CO.CODE> EQ ID.COMPANY THEN                 ;** R22 Auto conversion - = TO EQ
                    GOSUB FILL.THE.REC
                END
            END
        END
    REPEAT
RETURN
END
