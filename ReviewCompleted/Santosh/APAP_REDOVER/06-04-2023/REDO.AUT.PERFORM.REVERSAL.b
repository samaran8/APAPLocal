* @ValidationCode : MjotMTA3ODUzMDc3NzpDcDEyNTI6MTY4MDcxODYwNzkyNTptdXRodTotMTotMTowOjA6ZmFsc2U6Ti9BOlIyMV9BTVIuMDotMTotMQ==
* @ValidationInfo : Timestamp         : 05 Apr 2023 23:46:47
* @ValidationInfo : Encoding          : Cp1252
* @ValidationInfo : User Name         : muthu
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOVER
SUBROUTINE REDO.AUT.PERFORM.REVERSAL
****************************************************************
*-------------------------------------------------------------------------
* Company Name  : ASOCIACION POPULAR DE AHORROS Y PRESTAMOS
* Developed By  : Ganesh R
* Program Name  : REDO.AUT.PERFORM.REVERSAL
*-------------------------------------------------------------------------
* Description: This routine is a Authorisation routine
*
*----------------------------------------------------------
* Linked with:  Enquiry REDO.RETURN.OUT.CHQ
* In parameter :
* out parameter : None
*------------------------------------------------------------------------
* MODIFICATION HISTORY
*--------------------------------------------
*   DATE              ODR                             DESCRIPTION
* 21-09-10          ODR-2010-09-0251              Initial Creation
* 25-08-11          PACS00093693                  Changed the B.10 logic
* 17-10-11          PACS00146454                  MARIMUTHU - CHANGES MADE
* 03 11 2011        PACS00055620                  PACS00055620 fix
* 16-01-2012        PACS00170057                  Select statment removed from the table REDO.LOAN.FT.TT.TXN
* 13-04-2012        PACS00188869                  use universal clearing account instead of return account for return
* 05-04-2023        CONVERSION TOOL               AUTO R22 CODE CONVERSION          FM to @FM, VM to @VM, ++ to += 1
* 05-04-2023        MUTHUKUMAR M                  MANUAL R22 CODE CONVERSION        NO CHANGE
*------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.CUSTOMER
    $INSERT I_F.FT.COMMISSION.TYPE
    $INSERT I_F.FT.CHARGE.TYPE
    $INSERT I_F.AC.LOCKED.EVENTS
    $INSERT I_F.REDO.LOAN.FT.TT.TXN
    $INSERT I_F.REDO.CLEARING.OUTWARD
    $INSERT I_F.REDO.APAP.CLEAR.PARAM
    $INSERT I_F.REDO.OUTWARD.RETURN
    $INSERT I_F.REDO.H.AA.DIS.CHG
    $INSERT I_F.REDO.GAR.LOCK.ALE
    $INSERT I_F.REDO.INTRANSIT.CHQ
    $INSERT I_F.REDO.INTRANSIT.LOCK
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.AA.ARRANGEMENT.ACTIVITY

    GOSUB OPEN.FILE
    GOSUB PROCESS
RETURN

OPEN.FILE:
*Opening Files

    FN.ACCOUNT = 'F.ACCOUNT'
    F.ACCOUNT = ''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)

    FN.CUSTOMER = 'F.CUSTOMER'
    F.CUSTOMER = ''
    CALL OPF(FN.CUSTOMER,F.CUSTOMER)

    FN.REDO.CLEARING.OUTWARD = 'F.REDO.CLEARING.OUTWARD'
    F.REDO.CLEARING.OUTWARD = ''
    CALL OPF(FN.REDO.CLEARING.OUTWARD,F.REDO.CLEARING.OUTWARD)

    FN.REDO.LOAN.FT.TT.TXN = 'F.REDO.LOAN.FT.TT.TXN'
    F.REDO.LOAN.FT.TT.TXN  = ''
    CALL OPF(FN.REDO.LOAN.FT.TT.TXN,F.REDO.LOAN.FT.TT.TXN)

    FN.REDO.APAP.CLEAR.PARAM = 'F.REDO.APAP.CLEAR.PARAM'
    F.REDO.APAP.CLEAR.PARAM =''
    CALL OPF(FN.REDO.APAP.CLEAR.PARAM,F.REDO.APAP.CLEAR.PARAM)

    FN.REDO.OUTWARD.RETURN = 'F.REDO.OUTWARD.RETURN'
    F.REDO.OUTWARD.RETURN = ''
    CALL OPF(FN.REDO.OUTWARD.RETURN,F.REDO.OUTWARD.RETURN)

    FN.FUNDS.TRANSFER = 'F.FUNDS.TRANSFER'
    F.FUNDS.TRANSFER  = ''
    CALL OPF(FN.FUNDS.TRANSFER,F.FUNDS.TRANSFER)

    FN.REDO.H.AA.DIS.CHG = 'F.REDO.H.AA.DIS.CHG'
    F.REDO.H.AA.DIS.CHG = ''

    FN.AA.ARRANGEMENT = 'F.AA.ARRANGEMENT'
    F.AA.ARRANGEMENT = ''
    CALL OPF(FN.AA.ARRANGEMENT,F.AA.ARRANGEMENT)

    FN.REDO.GAR.LOCK.ALE='F.REDO.GAR.LOCK.ALE'
    F.REDO.GAR.LOCK.ALE=''
    CALL OPF(FN.REDO.GAR.LOCK.ALE,F.REDO.GAR.LOCK.ALE)

    FN.REDO.TEMP.WORK = 'F.REDO.TEMP.WORK'
    F.REDO.TEMP.WORK = ''
    CALL OPF(FN.REDO.TEMP.WORK,F.REDO.TEMP.WORK)

    FN.REDO.INTRANSIT.CHQ = 'F.REDO.INTRANSIT.CHQ'
    F.REDO.INTRANSIT.CHQ = ''
    CALL OPF(FN.REDO.INTRANSIT.CHQ,F.REDO.INTRANSIT.CHQ)

    FN.REDO.INTRANSIT.LOCK = 'F.REDO.INTRANSIT.LOCK'
    F.REDO.INTRANSIT.LOCK =  ''
    CALL OPF(FN.REDO.INTRANSIT.LOCK,F.REDO.INTRANSIT.LOCK)

    FN.ALE = 'F.AC.LOCKED.EVENTS'
    F.ALE  = ''
    CALL OPF(FN.ALE,F.ALE)

    R.FT.RECORD = ''
RETURN
*-------------------------

PROCESS:

*Get the Count of Transaction Field
    LOC.APPLICATION = 'CUSTOMER':@FM:'ACCOUNT'
    LOC.FIELDS = 'L.CU.SEGMENTO':@FM:'L.AC.TRAN.AVAIL':@VM:'L.AC.NOTIFY.1':@VM:'L.AC.AV.BAL'
    LOC.POS = ''
    CALL MULTI.GET.LOC.REF(LOC.APPLICATION,LOC.FIELDS,LOC.POS)

    CUS.LOC.POS     = LOC.POS<1,1>
    TRAN.LOC.POS    = LOC.POS<2,1>
    NOTIFY.LOC.POS  = LOC.POS<2,2>
    Y.AC.AV.BAL.POS = LOC.POS<2,3>


    CALL CACHE.READ(FN.REDO.APAP.CLEAR.PARAM,'SYSTEM',R.REDO.APAP.CLEAR.PARAM,PARAM.ERR)

    VAR.TXN.REF = R.NEW(CLEAR.OUT.TFS.REFERENCE)

    IF VAR.TXN.REF EQ 'PAYMENT' THEN      ;* Reference will not be there for Payment Cheques.
        R.NEW(CLEAR.OUT.NARRATIVE)  = 'RETURN'
        R.NEW(CLEAR.OUT.CHQ.STATUS) = 'RETURNED'
        GOSUB RAISE.PAYMENT.ENTRY
        RETURN
    END
    VAL.REFERENCE = VAR.TXN.REF[1,3]
    R.NEW(CLEAR.OUT.NARRATIVE) = 'RETURN'
    ACCT.ID = R.NEW(CLEAR.OUT.ACCOUNT)

    CALL F.READ(FN.ACCOUNT,ACCT.ID,R.ACCOUNT.CL,F.ACCOUNT,ACCT.ERR)
    IF R.ACCOUNT.CL THEN
        CUS.ID = R.ACCOUNT.CL<AC.CUSTOMER>
        Y.AC.AVAIL.BALANCE  = R.ACCOUNT.CL<AC.LOCAL.REF,Y.AC.AV.BAL.POS>
        GOSUB CHECK.ALE
        Y.AC.AVAIL.BALANCE += Y.LCK.AMT
    END

    CALL F.READ(FN.CUSTOMER,CUS.ID,R.CUSTOMER,F.CUSTOMER,CUST.ERR)
    IF R.CUSTOMER THEN
        VAR.SEG = R.CUSTOMER<EB.CUS.LOCAL.REF><1,CUS.LOC.POS>
    END


    IF R.REDO.APAP.CLEAR.PARAM THEN
        VAR.CUS.TYPES = R.REDO.APAP.CLEAR.PARAM<CLEAR.PARAM.CUSTOMER.TYPE>
    END

    IF VAR.SEG THEN
        LOCATE VAR.SEG IN VAR.CUS.TYPES<1,1> SETTING SEG.POS THEN
            VAR.CHG.AMT = R.REDO.APAP.CLEAR.PARAM<CLEAR.PARAM.FT.REF.CHG,SEG.POS>
        END
    END ELSE
        VAR.CHG.AMT = ''
    END

    IF VAL.REFERENCE EQ 'T24' THEN

        VAR.PAY.DETAILS = ID.NEW
        R.NEW(CLEAR.OUT.CHQ.STATUS) = 'RETURNED'

        R.FT.RECORD<FT.DEBIT.ACCT.NO>     = R.NEW(CLEAR.OUT.ACCOUNT)
        R.FT.RECORD<FT.DEBIT.AMOUNT>      = R.NEW(CLEAR.OUT.AMOUNT)
        R.FT.RECORD<FT.DEBIT.CURRENCY>    = 'DOP'
* PACS00188869 - S
*  R.FT.RECORD<FT.CREDIT.ACCT.NO>    = R.REDO.APAP.CLEAR.PARAM<CLEAR.PARAM.UNIV.CLEAR.ACCT>
        R.FT.RECORD<FT.CREDIT.ACCT.NO>    = R.REDO.APAP.CLEAR.PARAM<CLEAR.PARAM.CAT.ACH.ACCT>
* PACS00188869 - E
*        R.FT.RECORD<FT.CHEQUE.NUMBER>     = R.NEW(CLEAR.OUT.CHEQUE.NO)
        IF VAR.CHG.AMT THEN
            R.FT.RECORD<FT.CHARGES.ACCT.NO> = R.NEW(CLEAR.OUT.ACCOUNT)
            R.FT.RECORD<FT.COMMISSION.TYPE> = VAR.CHG.AMT
        END
        R.FT.RECORD<FT.PAYMENT.DETAILS>   = ID.NEW


        Y.RS.OFS.FLAG = 'SUCCESS'

        IF NOT(Y.AC.AVAIL.BALANCE GE R.NEW(CLEAR.OUT.AMOUNT)) THEN
            Y.RS.OFS.FLAG = 'FAIL'
            R.NEW(CLEAR.OUT.RETURN.STATUS) = "INSUFFICIENT_BALANCE"
        END

        IF (R.ACCOUNT.CL<AC.POSTING.RESTRICT>) THEN
            Y.RS.OFS.FLAG = 'FAIL'
            R.NEW(CLEAR.OUT.RETURN.STATUS) = 'POSTING_RESTRICTION'
        END

        GOSUB CHECK.NOTIFICATION

    END
*------------------------------*
*PACS00192050 - Changes - start
*------------------------------*
    CALL F.READ(FN.REDO.INTRANSIT.LOCK,ACCT.ID,R.REDO.INTRANSIT.LOCK,F.REDO.INTRANSIT.LOCK,TRANSIT.LOCK.ERR)
    Y.ALE.LIST = R.REDO.INTRANSIT.LOCK
    Y.ALE.INIT = 1
    Y.CNT = DCOUNT(Y.ALE.LIST,@FM)
    Y.RETURN.AMT = R.NEW(CLEAR.OUT.AMOUNT)
*Y.STOP.FLAG = ''
    LOOP
        REMOVE Y.ALE.ID FROM Y.ALE.LIST SETTING Y.ALE.POS
    WHILE Y.ALE.INIT LE Y.CNT
        CALL F.READ(FN.ALE,Y.ALE.ID,R.ALE,F.ALE,ALE.ERR)
        IF R.ALE THEN
            Y.ALE.AMT  = R.ALE<AC.LCK.LOCKED.AMOUNT>
            Y.ALE.ACCT = R.ALE<AC.LCK.ACCOUNT.NUMBER>
            Y.DESCRIP  = R.ALE<AC.LCK.DESCRIPTION>
*IF Y.RETURN.AMT EQ Y.ALE.AMT AND Y.ALE.ACCT EQ ACCT.ID AND NOT(Y.STOP.FLAG) THEN
            IF Y.DESCRIP EQ ID.NEW OR R.NEW(CLEAR.OUT.TFS.REFERENCE) EQ Y.DESCRIP THEN
*Y.STOP.FLAG = 1
                GOSUB REVERSE.ALE
                GOSUB CREATE.OFS
            END
        END
        Y.ALE.INIT += 1
    REPEAT

*PACS00192050 - End
*----------------------*

    Y.CUSTOMER=R.ACCOUNT.CL<AC.CUSTOMER>
    CALL F.READ(FN.REDO.GAR.LOCK.ALE,Y.CUSTOMER,R.REDO.GAR.LOCK.ALE,F.REDO.GAR.LOCK.ALE,ERR)
    IF R.REDO.GAR.LOCK.ALE THEN
        Y.RGO.ID.LIST=R.REDO.GAR.LOCK.ALE<TT.ALE.OUT.CLEAR.ID>
    END
    Y.CUSTOMER.LIST=R.ACCOUNT.CL<AC.JOINT.HOLDER>
    Y.CUSTOMER.TOT=DCOUNT(Y.CUSTOMER.LIST,@VM)
    Y.CUSTOMER.CNT=1
    LOOP
    WHILE Y.CUSTOMER.CNT LE Y.CUSTOMER.TOT
        Y.CUSTOMER=Y.CUSTOMER.LIST<Y.CUSTOMER.CNT>
        CALL F.READ(FN.REDO.GAR.LOCK.ALE,Y.CUSTOMER,R.REDO.GAR.LOCK.ALE,F.REDO.GAR.LOCK.ALE,ERR)
        IF R.REDO.GAR.LOCK.ALE THEN
            Y.RGO.ID.LIST<-1>=R.REDO.GAR.LOCK.ALE<TT.ALE.OUT.CLEAR.ID>
        END
        Y.CUSTOMER.CNT += 1
    REPEAT
    CHANGE @VM TO @FM IN Y.RGO.ID.LIST
*LOCATE ID.NEW IN Y.RGO.ID.LIST SETTING Y.CLEAR.OUT.POS ELSE
*PACS00055620 -s
*R.ACCOUNT.CL<AC.LOCAL.REF,TRAN.LOC.POS> = R.ACCOUNT.CL<AC.LOCAL.REF,TRAN.LOC.POS> - R.NEW(CLEAR.OUT.AMOUNT)
*END

    Y.CHK.AC.NOTIFY.LIST = R.ACCOUNT.CL<AC.LOCAL.REF, NOTIFY.LOC.POS>

    LOCATE 'RETURNED.CHEQUE' IN Y.CHK.AC.NOTIFY.LIST<1,1,1> SETTING Y.CHK.AC.NOT.POS ELSE
        R.ACCOUNT.CL<AC.LOCAL.REF,NOTIFY.LOC.POS, Y.CHK.AC.NOT.POS> = 'RETURNED.CHEQUE'
    END

    CALL F.WRITE(FN.ACCOUNT,ACCT.ID,R.ACCOUNT.CL)
*PACS00055620 -E


    GOSUB REMOVE.CHQ.DETAILS


RETURN
*--------------------------------------------
CHECK.NOTIFICATION:
*-----------------

    IF (R.ACCOUNT.CL<AC.LOCAL.REF, NOTIFY.LOC.POS>) THEN

        Y.NOTIF.LIST = R.ACCOUNT.CL<AC.LOCAL.REF, NOTIFY.LOC.POS>
        CALL REDO.S.CHK.AC.NOTIF.OVR(Y.NOTIF.LIST, Y.NOTIF.FLAG)

        IF Y.NOTIF.FLAG EQ 'YES' THEN
            Y.RS.OFS.FLAG = 'FAIL'
            R.NEW(CLEAR.OUT.RETURN.STATUS) = 'NOTIFICATION'
        END
    END

    IF Y.RS.OFS.FLAG EQ 'SUCCESS' THEN
        GOSUB CREATE.FT
        TEMP.COMP  = ID.COMPANY
        ID.COMPANY = R.ACCOUNT.CL<AC.CO.CODE>
        GOSUB CREATE.OFS
        ID.COMPANY = TEMP.COMP

    END
    ELSE
        AMOUNT.VAL = R.NEW(CLEAR.OUT.AMOUNT)
        IF AMOUNT.VAL THEN
            VAR.CURRENCY = R.NEW(CLEAR.OUT.CURRENCY)
            REDO.OUTWARD.RETURN.ID = ID.NEW
            CALL REDO.APAP.INF.SUFF.ACCT.ENT(AMOUNT.VAL,VAR.CURRENCY,REDO.OUTWARD.RETURN.ID)
        END
    END

RETURN
*-------------------------------------
CREATE.FT:
    APP.NAME = 'FUNDS.TRANSFER'
    OFSFUNCT = 'I'
    PROCESS  = 'PROCESS'
    OFSVERSION = 'FUNDS.TRANSFER,CH.RTN'
    GTSMODE = ''
    NO.OF.AUTH = '0'
    TRANSACTION.ID = ''
    OFSRECORD = ''

RETURN
*--------------------------------------
REVERSE.ALE:
    APP.NAME       = ''
    R.FT.RECORD    = ''
    APP.NAME       = 'AC.LOCKED.EVENTS'
    OFSFUNCT       = 'R'
    PROCESS        = 'PROCESS'
    OFSVERSION     = 'AC.LOCKED.EVENTS,REDO'
    GTSMODE        = ''
    NO.OF.AUTH     = '0'
    TRANSACTION.ID = Y.ALE.ID
    OFSRECORD      = ''

RETURN
*------------------------------------
CREATE.OFS:

    OFS.MSG.ID =''
    OFS.SOURCE.ID = 'REDO.CHQ.ISSUE'
    OFS.ERR = ''

    CALL OFS.BUILD.RECORD(APP.NAME,OFSFUNCT,PROCESS,OFSVERSION,GTSMODE,NO.OF.AUTH,TRANSACTION.ID,R.FT.RECORD,OFSRECORD)
    CALL OFS.POST.MESSAGE(OFSRECORD,OFS.MSG.ID,OFS.SOURCE.ID,OFS.ERR)

RETURN
*-----------------
REMOVE.CHQ.DETAILS:

    CALL F.READ(FN.REDO.INTRANSIT.CHQ,ACCT.ID,R.REDO.INTRANSIT.CHQ,F.REDO.INTRANSIT.CHQ,CHQ.ERR)
    IF R.REDO.INTRANSIT.CHQ THEN
        GET.CLEAR.IDS = R.REDO.INTRANSIT.CHQ<TRAN.CHQ.CLEAR.OUT.ID>
    END

    CHANGE @VM TO @FM IN GET.CLEAR.IDS

    LOCATE ID.NEW IN GET.CLEAR.IDS SETTING LOC.POS THEN
        DEL R.REDO.INTRANSIT.CHQ<TRAN.CHQ.CLEAR.OUT.ID,LOC.POS>
        DEL R.REDO.INTRANSIT.CHQ<TRAN.CHQ.TFS.REFERENCE,LOC.POS>
        DEL R.REDO.INTRANSIT.CHQ<TRAN.CHQ.CHQ.NUMBER,LOC.POS>
        DEL R.REDO.INTRANSIT.CHQ<TRAN.CHQ.CHQ.AMOUNT,LOC.POS>
        DEL R.REDO.INTRANSIT.CHQ<TRAN.CHQ.EXPOSURE.DATE,LOC.POS>
    END

    CALL F.WRITE(FN.REDO.INTRANSIT.CHQ,ACCT.ID,R.REDO.INTRANSIT.CHQ)

RETURN
*-----------------
CHECK.ALE:
*-----------------
* Here we will sumup all the ALE Amount raised for this cheque and add it to L.AC.AVL.BAL
* So that Correct Balance of the account will be calculated and compared against the cheque amount
* and respective SUFFICIENT or INSUFFICIENT case can be executed.

    VAR.ALE.ID.LIST = R.NEW(CLEAR.OUT.AC.LOCK.ID)
    ALE.ID.CNT = DCOUNT(VAR.ALE.ID.LIST,@VM)
    Y.LCK.AMT = 0
    Y.VAR1 = 1

    LOOP
    WHILE Y.VAR1 LE ALE.ID.CNT
        CALL F.READ(FN.ALE,VAR.ALE.ID.LIST<1,Y.VAR1>,R.ACL,F.ALE,ALE.ERR)
        IF R.ACL<AC.LCK.FROM.DATE> LE TODAY THEN      ;* Future dated ALE should not summed up for today's available balance. This case is for float ext.
            Y.LCK.AMT+ = R.ACL<AC.LCK.LOCKED.AMOUNT>
        END
        Y.VAR1 += 1
    REPEAT

RETURN
*---------------------------------------------------
RAISE.PAYMENT.ENTRY:
*---------------------------------------------------
* Here we raise accounting entries for the Payment Cheques return.
    R.REDO.OUTWARD.RETURN = ''
    CALL F.READ(FN.REDO.OUTWARD.RETURN,ID.NEW,R.REDO.OUTWARD.RETURN,F.REDO.OUTWARD.RETURN,RET.ERR)
    IF R.REDO.OUTWARD.RETURN ELSE         ;* We cant raise accounting entries here.
        RETURN
    END
    R.FT.RECORD<FT.DEBIT.ACCT.NO>     = FMT(R.REDO.OUTWARD.RETURN<CLEAR.RETURN.ACCOUNT>,'11"0"R')
    R.FT.RECORD<FT.DEBIT.AMOUNT>      = R.NEW(CLEAR.OUT.AMOUNT)
    R.FT.RECORD<FT.DEBIT.CURRENCY>    = R.NEW(CLEAR.OUT.CURRENCY)
    R.FT.RECORD<FT.CREDIT.ACCT.NO>    = R.REDO.APAP.CLEAR.PARAM<CLEAR.PARAM.CAT.ACH.ACCT>
*R.FT.RECORD<FT.CHEQUE.NUMBER>     = R.NEW(CLEAR.OUT.CHEQUE.NO)
    R.FT.RECORD<FT.PAYMENT.DETAILS>   = ID.NEW
    R.FT.RECORD<FT.ORDERING.CUST>     = 'OUTRETURN'
    R.FT.RECORD<FT.CHARGE.CODE>       = 'WAIVE'
    GOSUB CREATE.FT
    GOSUB CREATE.OFS
RETURN
END
