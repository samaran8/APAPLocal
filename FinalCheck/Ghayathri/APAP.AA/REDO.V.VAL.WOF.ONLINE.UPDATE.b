$PACKAGE APAP.AA ;*MANUAL R22 CODE CONVERSION  
SUBROUTINE REDO.V.VAL.WOF.ONLINE.UPDATE
     
*-----------------------------------------------------------------------------------
* Modification History: 
* DATE                 WHO                  REFERENCE                    DESCRIPTION
* 29/03/2023         SURESH      MANUAL R22 CODE CONVERSION        Package Name added APAP.AA
* 29/03/2023         Conversion Tool      AUTO R22 CODE CONVERSION       FM TO @FM,SM TO@SM,VM TO @VM, Y.VAR1++ TO  Y.VAR1 += 1,  Y.PRINCIPAL.BAL = Y.PRINCIPAL.BAL - Y.PRINCIPLE.UNC TO Y.PRINCIPAL.BAL -= Y.PRINCIPLE.UNC,Y.TOT.ACC.AMT = Y.TOT.ACC.AMT - Y.TOT.ACC.AMT.SP TO Y.TOT.ACC.AMT.SP,
*-----------------------------------------------------------------------------------
*-----------------------------------------------------------------------------
* Company Name  : APAP DEV2
* Developed By  : Marimuthu S
* Program Name  : REDO.V.VAL.WOF.ONLINE.UPDATE.
*-----------------------------------------------------------------
* Description : This routine is attached as post routine to the activity LENDING-APAP-OVERDUE
*-----------------------------------------------------------------
* Linked With   : -NA-
* In Parameter  : -NA-
* Out Parameter : -NA-
*-----------------------------------------------------------------
* Modification History :
*-----------------------
* Reference              Date                Description
* ODR-2011-12-0017      21-Nov-2011          Initial draft
* NAB AND WOF           29-10-2012           PACS00202156
*-----------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.REDO.ACCT.MRKWOF.HIST
    $INSERT I_F.AA.OVERDUE
    $INSERT I_AA.LOCAL.COMMON
    $INSERT I_AA.APP.COMMON
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.AA.ACCOUNT.DETAILS
    $INSERT I_F.ACCOUNT
    $INSERT I_F.AA.ACCOUNT
*   $INSERT I_AA.LOCAL.COMMON
    $INSERT I_F.REDO.AA.NAB.HISTORY
    $INSERT I_F.AA.SCHEDULED.ACTIVITY

MAIN:

    IF c_aalocActivityStatus EQ 'UNAUTH' THEN
        GOSUB OPENFILES
        GOSUB PROCESS
    END
    GOSUB PGM.END
RETURN
OPENFILES:

    FN.REDO.ACCT.MRKWOF.HIST = 'F.REDO.ACCT.MRKWOF.HIST'
    F.REDO.ACCT.MRKWOF.HIST = ''
    CALL OPF(FN.REDO.ACCT.MRKWOF.HIST,F.REDO.ACCT.MRKWOF.HIST)

    FN.ACCOUNT = 'F.ACCOUNT'
    F.ACCOUNT = ''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)

    FN.REDO.AA.NAB.HISTORY = 'F.REDO.AA.NAB.HISTORY'
    F.REDO.AA.NAB.HISTORY = ''
    CALL OPF(FN.REDO.AA.NAB.HISTORY,F.REDO.AA.NAB.HISTORY)

    FN.CUSTOMER = 'F.CUSTOMER'
    F.CUSTOMER = ''
    CALL OPF(FN.CUSTOMER,F.CUSTOMER)

    FN.AA.SCH.ACT = 'F.AA.SCHEDULED.ACTIVITY'
    F.AA.SCH.ACT = ''
    CALL OPF(FN.AA.SCH.ACT,F.AA.SCH.ACT)

    APPL = 'AA.PRD.DES.OVERDUE':@FM:'ACCOUNT':@FM:'AA.PRD.DES.ACCOUNT' ;*AUTO R22 CODE CONVERSION
    L.FIELDS = 'L.LOAN.STATUS.1':@FM:'L.OD.STATUS':@FM:'L.LOAN.STATUS' ;*AUTO R22 CODE CONVERSION
    CALL MULTI.GET.LOC.REF(APPL,L.FIELDS,POS.PL)
    Y.POS.STATUS = POS.PL<1,1>
    Y.OD.ST.POS = POS.PL<2,1>
    POS.L.LOAN.STATUS = POS.PL<3,1>

RETURN

PROCESS:


    Y.AA.ID = c_aalocArrId
    IF R.NEW(AA.OD.LOCAL.REF)<1,Y.POS.STATUS> EQ 'Write-off' THEN
        CALL F.READ(FN.REDO.ACCT.MRKWOF.HIST,Y.AA.ID,R.REDO.ACCT.MRKWOF.HIST,F.REDO.ACCT.MRKWOF.HIST,WOF.ERR)
        IF NOT(R.REDO.ACCT.MRKWOF.HIST) THEN
            GOSUB GET.LOAN.STATUS
            R.REDO.ACCT.MRKWOF.HIST<REDO.WH.WOF.CHANGE.DATE> = c_aalocActivityEffDate
            R.REDO.ACCT.MRKWOF.HIST<REDO.WH.CURRENCY> = c_aalocArrangementRec<AA.ARR.CURRENCY>
            Y.AC.ID = c_aalocArrangementRec<AA.ARR.LINKED.APPL.ID>

            CALL F.READ(FN.ACCOUNT,Y.AC.ID,R.ACCC,F.ACCOUNT,ACC.ERR)
            R.REDO.ACCT.MRKWOF.HIST<REDO.WH.ARR.AGE.STATUS> = R.ACCC<AC.LOCAL.REF,Y.OD.ST.POS>

            R.REDO.ACCT.MRKWOF.HIST<REDO.WH.L.LOAN.STATUS> = Y.L.LOAN.STATUS          ;* To capture previous loan status based on that accounting will be raised
            R.REDO.ACCT.MRKWOF.HIST<REDO.WH.PRODUCT> = c_aalocArrangementRec<AA.ARR.PRODUCT>

            Y.AC.ID = c_aalocArrangementRec<AA.ARR.LINKED.APPL.ID>
            CALL F.READ(FN.ACCOUNT,Y.AC.ID,R.ACC,F.ACCOUNT,ACC.ERR)
            Y.CATEG = R.ACC<AC.CATEGORY>
            R.REDO.ACCT.MRKWOF.HIST<REDO.WH.CATEGORY> = Y.CATEG

            R.REDO.ACCT.MRKWOF.HIST<REDO.WH.ACC.INT.YN> = 'YES'
            R.REDO.ACCT.MRKWOF.HIST<REDO.WH.STATUS> = 'INITIATED'
            CALL F.READ(FN.REDO.AA.NAB.HISTORY,Y.AA.ID,R.REDO.AA.NAB.HISTORY,F.REDO.AA.NAB.HISTORY,HIS.NAB.ERR)
            IF NOT(R.REDO.AA.NAB.HISTORY) THEN
                GOSUB GET.ACCRUED.INTEREST
            END ELSE
                GOSUB PROC.NAB.WOF
                R.REDO.ACCT.MRKWOF.HIST<REDO.WH.ACC.INT.AMT> = R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.ACC.AMT>
                R.REDO.ACCT.MRKWOF.HIST<REDO.WH.ACC.INT.DATE> = R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.NXT.BILL.DATE>
            END
            GOSUB GET.OUTS.PRIN

            CALL F.WRITE(FN.REDO.ACCT.MRKWOF.HIST,Y.AA.ID,R.REDO.ACCT.MRKWOF.HIST)
        END
        CALL F.READ(FN.REDO.AA.NAB.HISTORY,Y.AA.ID,R.REDO.AA.NAB.HISTORY,F.REDO.AA.NAB.HISTORY,HIS.NAB.ERR)
        IF R.REDO.AA.NAB.HISTORY THEN
            R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.WOF.DATE> = c_aalocActivityEffDate
            CALL F.WRITE(FN.REDO.AA.NAB.HISTORY,Y.AA.ID,R.REDO.AA.NAB.HISTORY)
        END
    END ELSE
        IF (R.NEW(AA.OD.LOCAL.REF)<1,Y.POS.STATUS>) THEN
            CALL F.READ(FN.REDO.ACCT.MRKWOF.HIST,Y.AA.ID,R.REDO.ACCT.MRKWOF.HIST,F.REDO.ACCT.MRKWOF.HIST,WOF.ERR)
            IF R.REDO.ACCT.MRKWOF.HIST THEN
                CALL F.DELETE(FN.REDO.ACCT.MRKWOF.HIST,Y.AA.ID)
            END
        END
    END
RETURN

PROC.NAB.WOF:

    Y.BISL = R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.BILL.ID>
    Y.CN.BL = DCOUNT(Y.BISL,@VM); FLG.S = '' ;*AUTO R22 CODE CONVERSION
    LOOP
    WHILE Y.CN.BL GT 0 DO
        FLG.S += 1
        R.REDO.ACCT.MRKWOF.HIST<REDO.WH.BILL.ID,FLG.S> = FIELD(R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.BILL.ID,FLG.S>,'-',1)
        R.REDO.ACCT.MRKWOF.HIST<REDO.WH.INT.AMT,FLG.S> = R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.INT.AMT,FLG.S>
        R.REDO.ACCT.MRKWOF.HIST<REDO.WH.INT.PAID,FLG.S> = R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.INT.PAID,FLG.S>
        R.REDO.ACCT.MRKWOF.HIST<REDO.WH.INT.BALANCE,FLG.S> = R.REDO.AA.NAB.HISTORY<REDO.NAB.HIST.INT.BALANCE,FLG.S>
        Y.CN.BL -= 1
    REPEAT

RETURN

GET.ACCRUED.INTEREST:

    BAL.TYPES = 'ACCPRINCIPALINT'
    ACCOUNT.ID = c_aalocLinkedAccount
    START.DATE = c_aalocActivityEffDate ; END.DATE = '' ; SYSTEM.DATE = ''
    REQUEST.TYPE    = ''
    REQUEST.TYPE<4>  = 'ECB'
    BAL.DETAILS = ''
    CALL AA.GET.PERIOD.BALANCES(ACCOUNT.ID, BAL.TYPES, REQUEST.TYPE, START.DATE, END.DATE, SYSTEM.DATE, BAL.DETAILS, ERROR.MESSAGE)

    Y.TOT.ACC.AMT = ABS(BAL.DETAILS<4>)

    BAL.TYPES = 'ACCPRINCIPALINTSP'
    ACCOUNT.ID = c_aalocLinkedAccount
    START.DATE = c_aalocActivityEffDate ; END.DATE = '' ; SYSTEM.DATE = ''
    REQUEST.TYPE    = ''
    REQUEST.TYPE<4>  = 'ECB'
    BAL.DETAILS = ''
    CALL AA.GET.PERIOD.BALANCES(ACCOUNT.ID, BAL.TYPES, REQUEST.TYPE, START.DATE, END.DATE, SYSTEM.DATE, BAL.DETAILS, ERROR.MESSAGE)

    Y.TOT.ACC.AMT.SP = ABS(BAL.DETAILS<4>)

    Y.TOT.ACC.AMT -= Y.TOT.ACC.AMT.SP ;*AUTO R22 CODE CONVERSION

    CALL F.READ(FN.AA.SCH.ACT,ARR.ID,R.AA.SCH.ACT,F.AA.SCH.ACT,SCH.ERR)

    FINDSTR 'LENDING-MAKEDUE-REPAYMENT.SCHEDULE' IN R.AA.SCH.ACT<AA.SCH.ACTIVITY.NAME,1> SETTING POS.NEX THEN
        Y.NEX.BL.DATE = R.AA.SCH.ACT<AA.SCH.NEXT.DATE,POS.NEX>
    END ELSE
        Y.NEX.BL.DATE = BAL.DETAILS<1>
    END
    R.REDO.ACCT.MRKWOF.HIST<REDO.WH.ACC.INT.AMT> = Y.TOT.ACC.AMT
    R.REDO.ACCT.MRKWOF.HIST<REDO.WH.ACC.INT.DATE> = Y.NEX.BL.DATE

RETURN

GET.OUTS.PRIN:

    GOSUB GET.OVERDUE.STATUS

    Y.ACCOUNT.PROPERTY = ''
    OUT.ERR = ''
    CALL REDO.GET.PROPERTY.NAME(Y.AA.ID,'ACCOUNT',R.OUT.AA.RECORD,Y.ACCOUNT.PROPERTY,OUT.ERR)

    BALANCE.TYPE = Y.OVERDUE.STATUS:@FM:'DUE':@FM:'CUR' ;*AUTO R22 CODE CONVERSION
    Y.BAL.PROPERTY = Y.ACCOUNT.PROPERTY

    GOSUB GET.OUTSTANDING

    Y.PRINCIPAL.BAL = Y.BALANCE.AMOUNT

    BALANCE.TYPE = 'UNC'
    Y.BAL.PROPERTY = Y.ACCOUNT.PROPERTY
    GOSUB GET.OUTSTANDING
    Y.PRINCIPLE.UNC = Y.BALANCE.AMOUNT
    Y.PRINCIPAL.BAL -= Y.PRINCIPLE.UNC ;*AUTO R22 CODE CONVERSION

    R.REDO.ACCT.MRKWOF.HIST<REDO.WH.OUTSTANDING.AMT> = Y.PRINCIPAL.BAL
    R.REDO.ACCT.MRKWOF.HIST<REDO.WH.OUT.AMT.REP> = Y.PRINCIPAL.BAL

RETURN

GET.OVERDUE.STATUS:

    EFF.DATE = ''
    PROP.CLASS='OVERDUE'
    PROPERTY = ''
    R.CONDITION.OVERDUE = ''
    ERR.MSG = ''
    CALL REDO.CRR.GET.CONDITIONS(Y.AA.ID,EFF.DATE,PROP.CLASS,PROPERTY,R.CONDITION.OVERDUE,ERR.MSG)
    Y.BILL.TYPE = R.CONDITION.OVERDUE<AA.OD.BILL.TYPE>
    LOCATE 'PAYMENT' IN Y.BILL.TYPE<1,1> SETTING YPOSN THEN
        Y.OVERDUE.STATUS = R.CONDITION.OVERDUE<AA.OD.OVERDUE.STATUS,YPOSN>
    END
*  CHANGE VM TO FM IN Y.OVERDUE.STATUS
    CHANGE @SM TO @FM IN Y.OVERDUE.STATUS ;*AUTO R22 CODE CONVERSION
RETURN

GET.OUTSTANDING:

    Y.BALANCE.AMOUNT = 0
    Y.BALANCE.CNT = DCOUNT(BALANCE.TYPE,@FM) ;*AUTO R22 CODE CONVERSION
    Y.VAR1 = 1
    LOOP
    WHILE Y.VAR1 LE Y.BALANCE.CNT

        BALANCE.TO.CHECK = BALANCE.TYPE<Y.VAR1>:Y.BAL.PROPERTY
        EFFECTIVE.DATE   = TODAY
        DATE.OPTIONS     = ''
* Start--Changed on 29/09/2016 for upgrade
        DATE.OPTIONS<4>='ECB'
*    DATE.OPTIONS<2>  = 'ALL'
* End--Changed on 29/09/2016 for upgrade
        BALANCE.AMOUNT   = ""
        CALL AA.GET.PERIOD.BALANCES(Y.AC.ID, BALANCE.TO.CHECK, DATE.OPTIONS, EFFECTIVE.DATE, "", "", BAL.DETAILS, "")
        Y.BALANCE.AMOUNT += BAL.DETAILS<4>
        Y.VAR1 += 1 ;*AUTO R22 CODE CONVERSION
    REPEAT
    Y.BALANCE.AMOUNT = ABS(Y.BALANCE.AMOUNT)

RETURN
*--------------------------------------------
GET.LOAN.STATUS:
*--------------------------------------------

    EFF.DATE    = ''
    PROP.CLASS  ='ACCOUNT'
    PROPERTY    = ''
    R.CONDITION = ''
    ERR.MSG     = ''
    CALL REDO.CRR.GET.CONDITIONS(Y.AA.ID,EFF.DATE,PROP.CLASS,PROPERTY,R.CONDITION,ERR.MSG)
    Y.L.LOAN.STATUS = R.CONDITION<AA.AC.LOCAL.REF,POS.L.LOAN.STATUS>

RETURN
PGM.END:

END
