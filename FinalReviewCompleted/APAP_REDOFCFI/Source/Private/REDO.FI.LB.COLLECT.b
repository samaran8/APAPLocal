* @ValidationCode : MjotMTE1MzQzODIwOTpVVEYtODoxNjgyNTczODA3MjI2OkFkbWluOi0xOi0xOjA6MDpmYWxzZTpOL0E6UjIxX0FNUi4wOi0xOi0x
* @ValidationInfo : Timestamp         : 27 Apr 2023 11:06:47
* @ValidationInfo : Encoding          : UTF-8
* @ValidationInfo : User Name         : Admin
* @ValidationInfo : Nb tests success  : N/A
* @ValidationInfo : Nb tests failure  : N/A
* @ValidationInfo : Rating            : N/A
* @ValidationInfo : Coverage          : N/A
* @ValidationInfo : Strict flag       : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version  : R21_AMR.0
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.
$PACKAGE APAP.REDOFCFI
SUBROUTINE REDO.FI.LB.COLLECT(PARAM.ANS.ID)
* ====================================================================================
*    - Gets the information related to the AA specified in input parameter
*
*    - Generates BULK OFS MESSAGES to apply payments to corresponding AA
*
* ====================================================================================
*
* Subroutine Type : Multithreaded ROUTINE - PROCESS
* Attached to     : REDO.FI.COLLECT service
* Attached as     : Service
* Primary Purpose : Apply PAYMENTS reported in APAP-Planillas
*
*
* Incoming:
* ---------
*
*        AA.PAY.SCH.ID  -  Contains ID of record detail to be processed
*
*
* Outgoing:
* ---------
*
*-----------------------------------------------------------------------------------
* Modification History:
*
* Development for : Asociacion Popular de Ahorros y Prestamos ODR-2010-03-0025
* Development by  : Adriana Velasco - TAM Latin America
* Date            : Nov. 26, 2010
* Modification History:
* Date                 Who                              Reference                            DESCRIPTION
*04-04-2023            CONVERSION TOOL                AUTO R22 CODE CONVERSION           VM TO @VM ,FM TO @FM SM TO @SM and I++ to I=+1
*04-04-2023          jayasurya H                       MANUAL R22 CODE CONVERSION            CALL RTN METHOD ADDED
*=======================================================================

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_TSA.COMMON
    $INSERT I_F.ACCOUNT
    $INSERT I_F.TELLER
    $INSERT I_F.FT.TXN.TYPE.CONDITION
    $INSERT I_F.FT.COMMISSION.TYPE
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.TELLER.TRANSACTION
*
    $INSERT I_REDO.FI.VAR.LOAN.BILL.COMMON
    $INSERT I_REDO.FI.LB.GENERATE.DATA.COMMON
    $INSERT I_F.REDO.FI.LB.BPROC.DET
    $INSERT I_F.REDO.FI.LB.BPROC
    $INSERT I_F.REDO.INTERFACE.PARAM
    $INSERT I_F.REDO.NCF.ISSUED
    $INSERT I_F.REDO.L.NCF.UNMAPPED
    $INSERT I_F.REDO.L.NCF.STATUS
    $INSERT I_F.REDO.L.NCF.CANCELLED
* Tus Start
    $INSERT I_F.EB.CONTRACT.BALANCES
* Tus End
    $INSERT I_BATCH.FILES
    $USING APAP.REDOENQ
    $USING APAP.TAM
*
*
*************************************************************************
*GOSUB PROCESS
*

    YACTION = CONTROL.LIST<1,1>

    PARAM.TXN.ID = FIELD(PARAM.ANS.ID,'.',1):'.': FIELD(PARAM.ANS.ID,'.',2)

    BEGIN CASE
        CASE YACTION EQ 'BATCH.PROCESS'
            GOSUB PROCESS

        CASE YACTION EQ 'PROCESS.DET'
            PARAM.ID =  FIELD(PARAM.TXN.ID,'.',1)

            GOSUB GET.PARAM.VALUES
            GOSUB FT.CR.PROCESS.DET
            PMT.REF.ID = PARAM.ANS.ID
            CALL APAP.REDOFCFI.redoFiLbCollTxnProcess(DATA.IN,PMT.REF.ID) ;*MANUAL R22 CODE CONVERSION

        CASE YACTION EQ 'BALANCE.ADJUST'
            GOSUB BALANCE.ADJUSTMENT

    END CASE

RETURN
*
* ======
PROCESS:
* ======

*PARAM.TXN.ID = FIELD(PARAM.ANS.ID,'.',1):'.': FIELD(PARAM.ANS.ID,'.',2)

    CALL F.READ(FN.REDO.FI.LB.BATCH.PROCESS,PARAM.TXN.ID,R.REDO.FI.LB.BATCH.PROCESS,F.REDO.FI.LB.BATCH.PROCESS,RFIB.ERR)
    WTOTAL.DEBITS   =  R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.MONTO.TOTAL>
    WTOTAL.PROC.AMT =  R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.MONTO.TOTAL.PROC>
    WSTATUS.MSG     =  R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.ESTADO>
    FI.PAYMENT.REF  =  R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.TRANSACTION.ID>

    IF WSTATUS.MSG NE 'APROBADO' THEN
        RETURN
    END

    COMM.TOT.AMOUNT = ABS(WTOTAL.DEBITS)
    PARAM.ID = FIELD(PARAM.TXN.ID,'.',1)
    GOSUB B140.READ.PLANILLA.PARAM
    IN.ACCT.TYPE = 'DEBIT'
    IN.ACCT.ID   =  COMM.DEBIT.ACCT
* CALL APAP.REDOENQ.REDO.NOMINA.ACCT.STATUS.CHECK(IN.ACCT.ID,IN.ACCT.TYPE,OUT.ACCT.STATUS)
    CALL APAP.REDOENQ.redoNominaAcctStatusCheck(IN.ACCT.ID,IN.ACCT.TYPE,OUT.ACCT.STATUS) ;*MANUAL R22 CODE CONVERSION


    IF NOT(WERROR.MSG) AND NOT(OUT.ACCT.STATUS) THEN
        GOSUB FT.DR.PROCESS.DET

        CALL APAP.TAM.redoFiLbApplyPymt(DATA.IN,DATA.OUT) ;*MANUAL R22 CODE CONVERSION
        IF DATA.OUT<1> EQ 'SUCCESS' THEN
            Y.PARENT.FT.REF = DATA.OUT<2>
            R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.PAYMENT.REF> = Y.PARENT.FT.REF
            R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.ESTADO> = 'APLICADO'
            R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.FECHA.APLICADO> = TODAY
            R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.ERROR.MSG> = ''
            CALL F.WRITE(FN.REDO.FI.LB.BATCH.PROCESS,PARAM.TXN.ID,R.REDO.FI.LB.BATCH.PROCESS)
        END ELSE
            R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.ESTADO> = 'DESESTIMADO'
            R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.ERROR.MSG> = DATA.OUT<2>
            R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.FECHA.APLICADO> = TODAY
            CALL F.WRITE(FN.REDO.FI.LB.BATCH.PROCESS,PARAM.TXN.ID,R.REDO.FI.LB.BATCH.PROCESS)
            X.CMD = "DELETE ":FI.QUEUE.PATH:" ":PARAM.ANS.ID
            GOSUB EXECUTE.COMAND
            RETURN
        END
    END ELSE

        IF WERROR.MSG THEN
            CALL TXT(WERROR.MSG)
            R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.ERROR.MSG> = WERROR.MSG
        END ELSE
            R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.ERROR.MSG> = OUT.ACCT.STATUS
        END
        R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.ESTADO> = 'DESESTIMADO'
        R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.FECHA.APLICADO> = TODAY
        CALL F.WRITE(FN.REDO.FI.LB.BATCH.PROCESS,PARAM.TXN.ID,R.REDO.FI.LB.BATCH.PROCESS)
        X.CMD = "DELETE ":FI.QUEUE.PATH:" ":PARAM.ANS.ID
        GOSUB EXECUTE.COMAND
        RETURN
    END


* X.CMD = "DELETE ":FI.QUEUE.PATH:" ":PARAM.ANS.ID
*GOSUB EXECUTE.COMAND
RETURN

* ================
FT.DR.PROCESS.DET:
* ================
    IF COMM.TOT.AMOUNT GT WTOTAL.PROC.AMT THEN
        COMM.TOT.AMOUNT -= WTOTAL.PROC.AMT
    END
    DATA.IN<1> = RIP.DR.TXN.CODE
    DATA.IN<2> = COMM.DEBIT.ACCT
    DATA.IN<3> = COMM.SUSP.ACCT
    DATA.IN<4> = COMM.CURRENCY
    DATA.IN<5> = COMM.TOT.AMOUNT
    DATA.IN<6> = COMM.VERSION.SAP

RETURN
* ================
FT.CR.PROCESS.DET:
* ================
    DATA.IN<1> = RIP.CR.TXN.CODE
    DATA.IN<2> = COMM.SUSP.ACCT
    DATA.IN<4> = COMM.CURRENCY
    DATA.IN<6> = COMM.VERSION.PMT

RETURN
* ================
FT.NEW.TAX.PROCESS.DET:
* ================
    Y.SUCCESS.TAX.AMT = TOA.AMT.PROCESS * (Y.PAY.COM.PERCENT/100)
    CALL EB.ROUND.AMOUNT("DOP",Y.SUCCESS.TAX.AMT,"","")
    DATA.IN<1> = ""
    DATA.IN<2> = COMM.DEBIT.ACCT
    DATA.IN<3> = Y.PAY.CATEG.ACCOUNT
    DATA.IN<4> = COMM.CURRENCY
    DATA.IN<5> = Y.SUCCESS.TAX.AMT
    DATA.IN<6> = "REDO.FILE.TAX.GENERATION"
    DATA.IN<7> = 'REVERSADO-':Y.PARENT.REF

RETURN
* ====================
FT.RET.TAX.PROCESS.DET:
* ====================

    DATA.IN<1> = RIP.RET.TAX.CODE
    DATA.IN<2> = Y.PAY.CATEG.ACCOUNT
    DATA.IN<3> = COMM.DEBIT.ACCT
    DATA.IN<4> = COMM.CURRENCY
    DATA.IN<5> = Y.PARENT.TAX.AMT
    DATA.IN<6> = COMM.VERSION.RET
    DATA.IN<7> = 'REVERSADO-':Y.PARENT.REF
RETURN
* ====================
FT.RET.AMT.PROCESS.DET:
* ====================

    DATA.IN<1> = RIP.RET.TXN.CODE
    DATA.IN<2> = COMM.SUSP.ACCT
    DATA.IN<3> = COMM.DEBIT.ACCT
    DATA.IN<4> = COMM.CURRENCY
    DATA.IN<5> = TOT.AMT.FAILURE
    DATA.IN<6> = COMM.VERSION.RET
    DATA.IN<7> = 'REVERSADO-':Y.PARENT.REF
RETURN
* =================
BALANCE.ADJUSTMENT:
* =================

    CALL F.READ(FN.REDO.FI.LB.BATCH.PROCESS,PARAM.TXN.ID,R.REDO.FI.LB.BATCH.PROCESS,F.REDO.FI.LB.BATCH.PROCESS,RFIB.ERR)
*   R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.PAYMENT.REF> = Y.PARENT.FT.REF
    FI.PAYMENT.REF = R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.TRANSACTION.ID>
    Y.PARENT.FT.REF = R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.PAYMENT.REF>
    TOA.AMT.PROCESS = R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.MONTO.TOTAL.PROC>
    COMM.TOT.AMOUNT = R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.MONTO.TOTAL>
    COMM.TOT.AMOUNT = ABS(COMM.TOT.AMOUNT)
    TOT.AMT.FAILURE = COMM.TOT.AMOUNT - TOA.AMT.PROCESS
    IF TOT.AMT.FAILURE GT 0 THEN

        IF FI.PAYMENT.REF THEN
            Y.PARENT.REF = FI.PAYMENT.REF
            CALL F.READ(FN.TELLER,FI.PAYMENT.REF,R.TELLER.SETTLE,F.TELLER,TT.ERR)
            Y.PARENT.TAX.AMT = R.TELLER.SETTLE<TT.TE.LOCAL.REF,Y.L.TT.TAX.AMT.POS>
            Y.TT.CODE    = R.TELLER.SETTLE<TT.TE.TRANSACTION.CODE>
        END ELSE
            Y.PARENT.REF = Y.PARENT.FT.REF
            CALL F.READ(FN.FUNDS.TRANSFER,Y.PARENT.FT.REF,R.FUNDS.TRANSFER.SETTLE,F.FUNDS.TRANSFER,FT.ERR)
            Y.PARENT.TAX.AMT =  R.FUNDS.TRANSFER.SETTLE<FT.LOCAL.REF,Y.L.FT.TAX.AMT.POS>
        END

* Settle Back the Failed Transaction Amount from Internal Account to Customer Account
        GOSUB GET.PARAM.VALUES
        GOSUB FT.RET.AMT.PROCESS.DET
        CALL APAP.TAM.redoFiLbApplyPymt(DATA.IN,DATA.OUT) ;*MANUAL R22 CODE CONVERSION
        R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.RET.TXN.REF> = DATA.OUT<2>

* Settle Back the Complete Tax Amount from Tax Account to Customer Account

        GOSUB FT.RET.TAX.PROCESS.DET
        IF PARAM.TAX.ID THEN
            CALL APAP.TAM.redoFiLbApplyPymt(DATA.IN,DATA.OUT) ;*MANUAL R22 CODE CONVERSION
            R.REDO.FI.LB.BATCH.PROCESS<REDO.FI.LB.BPROC.RET.TAX.REF> = DATA.OUT<2>
        END


* Generate the New Transaction so settle the Tax Amount for Successful Transactions

        IF Y.SUCCESS.TAX.AMT GT 0 AND PARAM.TAX.ID AND Y.PARENT.TAX.AMT THEN
            GOSUB FT.NEW.TAX.PROCESS.DET
            CALL APAP.TAM.redoFiLbApplyPymt(DATA.IN,DATA.OUT) ;*MANUAL R22 CODE CONVERSION
        END


        IF Y.PARENT.TAX.AMT THEN
            GOSUB NCF.UPDATE.PARA
        END
        CALL F.WRITE(FN.REDO.FI.LB.BATCH.PROCESS,PARAM.TXN.ID,R.REDO.FI.LB.BATCH.PROCESS)
    END


    X.CMD = "DELETE ":FI.QUEUE.PATH:" ":PARAM.ANS.ID
    GOSUB EXECUTE.COMAND

RETURN

*----------------
NCF.UPDATE.PARA:
*----------------

    IF FI.PAYMENT.REF THEN
*        R.TELLER.SETTLE<TT.TE.LOCAL.REF,Y.L.TT.TAX.AMT.POS> = Y.SUCCESS.TAX.AMT
*        CALL F.WRITE(FN.TELLER,FI.PAYMENT.REF,R.TELLER.SETTLE)
        SEL.CMD = "SELECT ":FN.REDO.NCF.ISSUED:" WITH @ID LIKE ...":FI.PAYMENT.REF
    END ELSE
*        R.FUNDS.TRANSFER.SETTLE<FT.LOCAL.REF,Y.L.FT.TAX.AMT.POS> = Y.SUCCESS.TAX.AMT
*        CALL F.WRITE(FN.FUNDS.TRANSFER,Y.PARENT.FT.REF,R.FUNDS.TRANSFER.SETTLE)
        SEL.CMD = "SELECT ":FN.REDO.NCF.ISSUED:" WITH @ID LIKE ...":Y.PARENT.FT.REF
    END

    CALL EB.READLIST(SEL.CMD,SEL.LIST,'',NOR,ERR.SEL)
    REC.ID = SEL.LIST<1>
    IF REC.ID ELSE
        RETURN
    END

* Delete the Existing NCF Record

    CALL F.READ(FN.REDO.NCF.ISSUED,REC.ID,R.REDO.NCF.ISSUED,F.REDO.NCF.ISSUED,NCF.ISS.ERR)
    IF R.REDO.NCF.ISSUED THEN
        CALL F.DELETE(FN.REDO.NCF.ISSUED,REC.ID)
    END ELSE
        CALL F.READ(FN.REDO.L.NCF.UNMAPPED,REC.ID,R.REDO.L.NCF.UNMAPPED,F.REDO.L.NCF.UNMAPPED,NCF.UNMAP.ERR)
        CALL F.DELETE(FN.REDO.L.NCF.UNMAPPED,REC.ID)
    END

* Moved to NCF Cancellation Table

    CALL F.READ(FN.REDO.L.NCF.CANCELLED,REC.ID,R.REDO.L.NCF.CANCELLED,F.REDO.L.NCF.CANCELLED,ERR.CANCEL)
    R.REDO.L.NCF.CANCELLED<NCF.CAN.TXN.ID> = R.REDO.NCF.ISSUED<ST.IS.TXN.ID>
    R.REDO.L.NCF.CANCELLED<NCF.CAN.TXN.TYPE> = R.REDO.NCF.ISSUED<ST.IS.TXN.TYPE>
    R.REDO.L.NCF.CANCELLED<NCF.CAN.DATE> = R.REDO.NCF.ISSUED<ST.IS.DATE>
    R.REDO.L.NCF.CANCELLED<NCF.CAN.CHARGE.AMOUNT> = R.REDO.NCF.ISSUED<ST.IS.CHARGE.AMOUNT>
    R.REDO.L.NCF.CANCELLED<NCF.CAN.TAX.AMOUNT> = R.REDO.NCF.ISSUED<ST.IS.TAX.AMOUNT>
    R.REDO.L.NCF.CANCELLED<NCF.CAN.NCF> = R.REDO.NCF.ISSUED<ST.IS.NCF>
    R.REDO.L.NCF.CANCELLED<NCF.CAN.MODIFIED.NCF> = R.REDO.NCF.ISSUED<ST.IS.MODIFIED.NCF>
    R.REDO.L.NCF.CANCELLED<NCF.CAN.ACCOUNT> = R.REDO.NCF.ISSUED<ST.IS.ACCOUNT>
    R.REDO.L.NCF.CANCELLED<NCF.CAN.CAN.TYPE>= '05'
    CALL F.WRITE(FN.REDO.L.NCF.CANCELLED,REC.ID,R.REDO.L.NCF.CANCELLED)


* Updating NCF status

    CALL F.READ(FN.REDO.L.NCF.STATUS,REC.ID,R.REDO.L.NCF.STATUS,F.REDO.L.NCF.STATUS,ERR.STATUS)
    IF R.REDO.L.NCF.STATUS THEN
        R.REDO.L.NCF.STATUS<NCF.ST.STATUS>='CANCELLED'
        CALL F.WRITE(FN.REDO.L.NCF.STATUS,REC.ID,R.REDO.L.NCF.STATUS)
    END

RETURN
* =======================
B140.READ.PLANILLA.PARAM:
* =======================
*
    METODO.PAGO               = "METODO.PAGO"
    YWORK.CTA.INT             = "CTA.INTER"
    YWORK.CTA.SUSP            = "CTA.SUSPENSO"

    YWORK.VERSION.SAP = "VERSION.USED.SAP"
    YWORK.VERSION.PMT = "VERSION.USED.PMT"
    YWORK.VERSION.RET = "VERSION.USED.RET"
*
    CALL CACHE.READ(FN.REDO.INTERFACE.PARAM, PARAM.ID, R.REDO.INTERFACE.PARAM, Y.ERR)
    RIP.PARAM = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.PARAM.TYPE>
    RIP.VALUE = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.PARAM.VALUE>

    WPARAM.POS = 1
    LOCATE YWORK.CTA.INT IN RIP.PARAM<1,WPARAM.POS> SETTING PARAM.POS THEN
        COMM.DEBIT.ACCT = RIP.VALUE<1,PARAM.POS>

        CALL F.READ(FN.ACCOUNT,COMM.DEBIT.ACCT,R.ACCOUNT,F.ACCOUNT,YER.CTA)
        IF YER.CTA THEN
            WERROR.MSG = "AC-AC.REC.MISS":@FM:COMM.DEBIT.ACCT
            PROCESS.GOAHEAD = 0
        END ELSE
            COMM.CURRENCY = R.ACCOUNT<AC.CURRENCY>
            COMM.CUSTOMER = R.ACCOUNT<AC.CUSTOMER>

            YWORK.BALANCE = R.ACCOUNT<AC.LOCAL.REF,L.AC.AV.BAL.POS>
        END
    END ELSE
        WERROR.MSG = "EB-Parameter.&.not.defined.in.&":@FM:YWORK.CTA.INT:@VM:PARAM.ID
        PROCESS.GOAHEAD = 0
    END

    IF FI.PAYMENT.REF THEN
        GOSUB VALIDATE.AMOUNT.TRX
    END ELSE
        GOSUB B160.VALIDATE.BALANCE
    END
    PARAM.COMM.ID  = ""
    PARAM.TAX.ID = ""

    Y.YAX.COMP.LIST = FIELD(COMM.EXT.TAX.COMP,'*',2)
    LOCATE PARAM.ID IN Y.YAX.COMP.LIST SETTING EXT.TAX.POS THEN
        PARAM.COMM.ID = FIELD(COMM.EXT.TAX.COMP,'*',1)
        PARAM.TAX.ID = PARAM.COMM.ID

    END
    Y.NOTAX.COMP.LIST = FIELD(COMM.EXT.NOTAX.COMP,'*',2)
    LOCATE PARAM.ID IN Y.NOTAX.COMP.LIST SETTING EXT.NOTAX.POS THEN
        PARAM.COMM.ID  = FIELD(COMM.EXT.NOTAX.COMP,'*',1)
    END
    IF PARAM.COMM.ID THEN
        CALL CACHE.READ(FN.REDO.INTERFACE.PARAM, PARAM.COMM.ID ,R.REDO.INTERFACE.PARAM, Y.ERR)
        RIP.PARAM = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.PARAM.TYPE>
        RIP.VALUE = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.PARAM.VALUE>

    END
    RIP.DR.TXN.CODE  = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.DR.TXN.CODE>
    RIP.CR.TXN.CODE  = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.CR.TXN.CODE>
    RIP.RET.TXN.CODE = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.RET.TXN.CODE>
    RIP.RET.TAX.CODE = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.RET.TAX.CODE>

    CALL F.READ(FN.FT.TXN.TYPE.CONDITION,RIP.RET.TAX.CODE,R.FT.TXN.TYPE.CONDITION,F.FT.TXN.TYPE.CONDITION,FT.TXN.TYPE.CONDITION.ERR)
    Y.PAYROLL.COMM.TYPE = R.FT.TXN.TYPE.CONDITION<FT6.COMM.TYPES>
    Y.PAYROLL.CHG.TYPE  = R.FT.TXN.TYPE.CONDITION<FT6.CHARGE.TYPES>

    IF Y.TT.CODE THEN
        CALL F.READ(FN.TELLER.TRANSACTION,Y.TT.CODE,R.TELLER.TRANSACTION,F.TELLER.TRANSACTION,TELLER.TRANSACTION.ERR)
        Y.PAYROLL.COMM.TYPE = R.TELLER.TRANSACTION<TT.TR.CHARGE.CODE>
    END

    IF Y.PAYROLL.COMM.TYPE THEN
        CALL F.READ(FN.FT.COMMISSION.TYPE,Y.PAYROLL.COMM.TYPE,R.FT.COMMISSION.TYPE,F.FT.COMMISSION.TYPE,FT.COMMISSION.TYPE.ERR)
        Y.PAY.COM.FLAT.AMT = R.FT.COMMISSION.TYPE<FT4.FLAT.AMT,1>
        Y.PAY.COM.PERCENT = R.FT.COMMISSION.TYPE<FT4.PERCENTAGE,1,1>
        Y.PAY.CATEG.ACCOUNT = R.FT.COMMISSION.TYPE<FT4.CATEGORY.ACCOUNT>
    END



    WPARAM.POS = 1

    LOCATE YWORK.CTA.SUSP IN RIP.PARAM<1,WPARAM.POS> SETTING PARAM.POS THEN
        COMM.SUSP.ACCT = RIP.VALUE<1,PARAM.POS>

        CALL F.READ(FN.ACCOUNT,COMM.SUSP.ACCT,R.ACCOUNT,F.ACCOUNT,YER.SUSP.CTA)
*    Tus Start
        R.ECB = ''
        ECB.ERR = ''
        CALL EB.READ.HVT("EB.CONTRACT.BALANCES",COMM.SUSP.ACCT,R.ECB,ECB.ERR)   ;* Tus End
        IF YER.SUSP.CTA THEN
            WERROR.MSG = "AC-AC.REC.MISS":@FM:COMM.SUSP.ACCT
            PROCESS.GOAHEAD = 0
        END ELSE
            COMM.CURRENCY = R.ACCOUNT<AC.CURRENCY>
*      YWORK.BALANCE = R.ACCOUNT<AC.WORKING.BALANCE>
*      Tus Start
            YWORK.BALANCE = R.ECB<ECB.WORKING.BALANCE>
*      Tus End
        END
    END ELSE
        WERROR.MSG = "EB-Parameter.&.not.defined.in.&":@FM:YWORK.CTA.SUSP:@VM:PARAM.ID
        PROCESS.GOAHEAD = 0
    END
    WPARAM.POS = 1
    LOCATE YWORK.VERSION.SAP IN RIP.PARAM<1,WPARAM.POS> SETTING PARAM.POS THEN
        COMM.VERSION.SAP   = RIP.VALUE<1,PARAM.POS>

    END ELSE
        WERROR.MSG = "EB-Parameter.&.not.defined.in.&":@FM:YWORK.VERSION.SAP:@VM:PARAM.ID
    END

    WPARAM.POS = 1
    LOCATE YWORK.VERSION.PMT IN RIP.PARAM<1,WPARAM.POS> SETTING PARAM.POS THEN
        COMM.VERSION.PMT   = RIP.VALUE<1,PARAM.POS>

    END ELSE
        WERROR.MSG = "EB-Parameter.&.not.defined.in.&":@FM:YWORK.VERSION.PMT:@VM:PARAM.ID
    END
    WPARAM.POS = 1
    LOCATE YWORK.VERSION.RET IN RIP.PARAM<1,WPARAM.POS> SETTING PARAM.POS THEN
        COMM.VERSION.RET   = RIP.VALUE<1,PARAM.POS>
    END ELSE
        WERROR.MSG = "EB-Parameter.&.not.defined.in.&":@FM:YWORK.VERSION.RET:@VM:PARAM.ID
    END


RETURN

GET.PARAM.VALUES:
*================

    PARAM.ID = FIELD(PARAM.TXN.ID,'.',1)

    METODO.PAGO               = "METODO.PAGO"
    YWORK.CTA.INT             = "CTA.INTER"
    YWORK.CTA.SUSP            = "CTA.SUSPENSO"

    YWORK.VERSION.SAP = "VERSION.USED.SAP"
    YWORK.VERSION.PMT = "VERSION.USED.PMT"
    YWORK.VERSION.RET = "VERSION.USED.RET"
*
    CALL CACHE.READ(FN.REDO.INTERFACE.PARAM, PARAM.ID, R.REDO.INTERFACE.PARAM, Y.ERR)
    RIP.PARAM = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.PARAM.TYPE>
    RIP.VALUE = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.PARAM.VALUE>

    WPARAM.POS = 1

    LOCATE YWORK.CTA.INT IN RIP.PARAM<1,WPARAM.POS> SETTING PARAM.POS THEN
        COMM.DEBIT.ACCT = RIP.VALUE<1,PARAM.POS>

        CALL F.READ(FN.ACCOUNT,COMM.DEBIT.ACCT,R.ACCOUNT,F.ACCOUNT,YER.CTA)
        IF YER.CTA THEN
            WERROR.MSG = "AC-AC.REC.MISS":@FM:COMM.DEBIT.ACCT
            PROCESS.GOAHEAD = 0
        END ELSE
            COMM.CURRENCY = R.ACCOUNT<AC.CURRENCY>
            COMM.CUSTOMER = R.ACCOUNT<AC.CUSTOMER>

        END


    END

    PARAM.COMM.ID  = ""
    PARAM.TAX.ID = ""

    Y.YAX.COMP.LIST = FIELD(COMM.EXT.TAX.COMP,'*',2)
    LOCATE PARAM.ID IN Y.YAX.COMP.LIST SETTING EXT.TAX.POS THEN
        PARAM.COMM.ID = FIELD(COMM.EXT.TAX.COMP,'*',1)
        PARAM.TAX.ID = PARAM.COMM.ID

    END
    Y.NOTAX.COMP.LIST = FIELD(COMM.EXT.NOTAX.COMP,'*',2)
    LOCATE PARAM.ID IN Y.NOTAX.COMP.LIST SETTING EXT.NOTAX.POS THEN
        PARAM.COMM.ID  = FIELD(COMM.EXT.NOTAX.COMP,'*',1)
    END
    IF PARAM.COMM.ID THEN
        CALL CACHE.READ(FN.REDO.INTERFACE.PARAM, PARAM.COMM.ID ,R.REDO.INTERFACE.PARAM, Y.ERR)
        RIP.PARAM = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.PARAM.TYPE>
        RIP.VALUE = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.PARAM.VALUE>

    END
    RIP.DR.TXN.CODE  = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.DR.TXN.CODE>
    RIP.CR.TXN.CODE  = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.CR.TXN.CODE>
    RIP.RET.TXN.CODE = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.RET.TXN.CODE>
    RIP.RET.TAX.CODE = R.REDO.INTERFACE.PARAM<REDO.INT.PARAM.RET.TAX.CODE>

    CALL F.READ(FN.FT.TXN.TYPE.CONDITION,RIP.RET.TAX.CODE,R.FT.TXN.TYPE.CONDITION,F.FT.TXN.TYPE.CONDITION,FT.TXN.TYPE.CONDITION.ERR)
    Y.PAYROLL.COMM.TYPE = R.FT.TXN.TYPE.CONDITION<FT6.COMM.TYPES>
    Y.PAYROLL.CHG.TYPE  = R.FT.TXN.TYPE.CONDITION<FT6.CHARGE.TYPES>

    IF Y.TT.CODE THEN
        CALL F.READ(FN.TELLER.TRANSACTION,Y.TT.CODE,R.TELLER.TRANSACTION,F.TELLER.TRANSACTION,TELLER.TRANSACTION.ERR)
        Y.PAYROLL.COMM.TYPE = R.TELLER.TRANSACTION<TT.TR.CHARGE.CODE>
    END

    IF Y.PAYROLL.COMM.TYPE THEN
        CALL F.READ(FN.FT.COMMISSION.TYPE,Y.PAYROLL.COMM.TYPE,R.FT.COMMISSION.TYPE,F.FT.COMMISSION.TYPE,FT.COMMISSION.TYPE.ERR)
        Y.PAY.COM.FLAT.AMT = R.FT.COMMISSION.TYPE<FT4.FLAT.AMT,1>
        Y.PAY.COM.PERCENT = R.FT.COMMISSION.TYPE<FT4.PERCENTAGE,1,1>
        Y.PAY.CATEG.ACCOUNT = R.FT.COMMISSION.TYPE<FT4.CATEGORY.ACCOUNT>
    END
    WPARAM.POS = 1

    LOCATE YWORK.CTA.SUSP IN RIP.PARAM<1,WPARAM.POS> SETTING PARAM.POS THEN
        COMM.SUSP.ACCT = RIP.VALUE<1,PARAM.POS>
    END

    WPARAM.POS = 1

    LOCATE YWORK.VERSION.RET IN RIP.PARAM<1,WPARAM.POS> SETTING PARAM.POS THEN
        COMM.VERSION.RET   = RIP.VALUE<1,PARAM.POS>
    END

    WPARAM.POS = 1
    LOCATE YWORK.VERSION.PMT IN RIP.PARAM<1,WPARAM.POS> SETTING PARAM.POS THEN
        COMM.VERSION.PMT   = RIP.VALUE<1,PARAM.POS>

    END

RETURN



* ====================
B160.VALIDATE.BALANCE:
* ====================
*
    IF COMM.CUSTOMER THEN
        IF COMM.TOT.AMOUNT GT YWORK.BALANCE THEN
            WERROR.MSG = "EB-Not.enough.BALANCE.in.&.account":@FM:COMM.DEBIT.ACCT
            PROCESS.GOAHEAD = 0
        END
    END
*
RETURN
* ==================
VALIDATE.AMOUNT.TRX:
* ==================
    Y.AMOUNT.DEPOSITED = ''
    Y.TRX.STATUS  = ''
    Y.TT.CODE    = ''
    CALL CACHE.READ(FN.TELLER, FI.PAYMENT.REF, R.TELLER, Y.ERR.MSG)
    IF Y.ERR.MSG NE "" THEN
        WERROR.MSG = 'TRANSACTION REFERENCE NOT VALID'
        PROCESS.GOAHEAD = 0
        RETURN
    END
*GET THE AMOUNT AND STATUS
    Y.AMOUNT.DEPOSITED = R.TELLER<TT.TE.NET.AMOUNT>
    Y.TRX.STATUS = R.TELLER<TT.TE.RECORD.STATUS>
    Y.TT.CODE    = R.TELLER<TT.TE.TRANSACTION.CODE>

* todo retirar el status

*VALIDATE THE AMOUNTS
    IF COMM.TOT.AMOUNT GT Y.AMOUNT.DEPOSITED THEN
*        WERROR.MSG = "EB-Not.enough.BALANCE.in.&.transaction":FM:WCONTROL.ID
        WERROR.MSG = 'INSUFFICIENT BALANCE'
        PROCESS.GOAHEAD = 0
        RETURN
    END

RETURN
*============
EXECUTE.COMAND:
*============

    EXECUTE X.CMD
RETURN
END
