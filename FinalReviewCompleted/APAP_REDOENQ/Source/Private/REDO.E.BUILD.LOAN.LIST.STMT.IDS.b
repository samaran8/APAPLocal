$PACKAGE APAP.REDOENQ
SUBROUTINE REDO.E.BUILD.LOAN.LIST.STMT.IDS(FINAL.ARRAY)
*-------------------------------------------------------------------------------------------------------
*Company   Name    : ASOCIACION POPULAR DE AHORROS Y PRESTAMOS
*Developed By      : Temenos Application Management
*Program   Name    : REDO.E.BUILD.LOAN.LIST.STMT.IDS
*-------------------------------------------------------------------------------------------------------
*Description  : This is a conversion routine used to display From.date and Until.date
*In Parameter : N/A
*Out Parameter: O.DATA
*Linked File  : REDO.E.BUILD.TRANS.PERIOD
*--------------------------------------------------------------------------------------------------------
* Modification History :
*-----------------------
*     Date            Who                              Reference               Description
*    ------          ------                            -----------             --------------
*  19-09-2011       PRABHUN             PACS00125978                MODIFICATION
* 10-APRIL-2023      Conversion Tool       R22 Auto Conversion  - VM to @VM , FM to @FM , ++ to += , F.READ to CACHE.READ and Added IF E EQ "EB-UNKNOWN.VARIABLE"
* 10-APRIL-2023      Harsha                R22 Manual Conversion - No changes 
*--------------------------------------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_ENQUIRY.COMMON
    $INSERT I_System
    $INSERT I_F.AA.REFERENCE.DETAILS
    $INSERT I_F.STMT.ENTRY
    $INSERT I_F.ACCOUNT
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.TELLER
    $INSERT I_F.AA.ARRANGEMENT.ACTIVITY
    $INSERT I_F.AA.ACTIVITY
    $INSERT I_F.FT.TXN.TYPE.CONDITION
    $INSERT I_F.TRANSACTION
    $INSERT I_F.AI.REDO.ARCIB.PARAMETER
*---------------------------------------------------------------------------------------------------------

    GOSUB INITIALISE.GET.VALUES
    GOSUB CHECK.MORE.THAN.180
    GOSUB PROCESS

RETURN

*----------------------------------------
INITIALISE.GET.VALUES:
*---------------------------------------
    FN.AA.REFERENCE.DETAILS = 'F.AA.REFERENCE.DETAILS'
    F.AA.REFERENCE.DETAILS  = ''
    CALL OPF(FN.AA.REFERENCE.DETAILS,F.AA.REFERENCE.DETAILS)

    FN.STMT.ENTRY = 'F.STMT.ENTRY'
    F.STMT.ENTRY  = ''
    CALL OPF(FN.STMT.ENTRY,F.STMT.ENTRY)

    FN.ACCOUNT = 'F.ACCOUNT'
    F.ACCOUNT  = ''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)

    FN.FUNDS.TRANSFER.EXCEP = "F.FUNDS.TRANSFER$HIS"
    F.FUNDS.TRANSFER.EXCEP  = ''
    CALL OPF(FN.FUNDS.TRANSFER.EXCEP,F.FUNDS.TRANSFER.EXCEP)

    FN.FUNDS.TRANSFER = 'F.FUNDS.TRANSFER'
    F.FUNDS.TRANSFER  = ''
    CALL OPF(FN.FUNDS.TRANSFER,F.FUNDS.TRANSFER)

    FN.TELLER = 'F.TELLER'
    F.TELLER  = ''
    CALL OPF(FN.TELLER,F.TELLER)

    FN.TELLER.EXCEP = 'F.TELLER$HIS'
    F.TELLER.EXCEP  = ''
    CALL OPF(FN.TELLER.EXCEP,F.TELLER.EXCEP)

    FN.AA.ARRANGEMENT.ACTIVITY = 'F.AA.ARRANGEMENT.ACTIVITY'
    F.AA.ARRANGEMENT.ACTIVITY  = ''
    CALL OPF(FN.AA.ARRANGEMENT.ACTIVITY,F.AA.ARRANGEMENT.ACTIVITY)

    FN.AA.ACTIVITY = 'F.AA.ACTIVITY'
    F.AA.ACTIVITY  = ''
    CALL OPF(FN.AA.ACTIVITY,F.AA.ACTIVITY)

    FN.FT.TXN.TYPE.CONDITION = 'F.FT.TXN.TYPE.CONDITION'
    F.FT.TXN.TYPE.CONDITION = ''
    CALL OPF(FN.FT.TXN.TYPE.CONDITION,F.FT.TXN.TYPE.CONDITION)

    FN.TRANSACTION = 'F.TRANSACTION'
    F.TRANSACTION  = ''
    CALL OPF(FN.TRANSACTION,F.TRANSACTION)

    FN.AI.REDO.ARCIB.PARAMETER = 'F.AI.REDO.ARCIB.PARAMETER'
    F.AI.REDO.ARCIB.PARAMETER = ''
*  CALL OPF(FN.AI.REDO.ARCIB.PARAMETER,F.AI.REDO.ARCIB.PARAMETER);*Tus (S/E)


    CALL CACHE.READ(FN.AI.REDO.ARCIB.PARAMETER,'SYSTEM',R.AI.REDO.ARCIB.PARAMETER,ARCIB.ERR)
    Y.MIG.PARAM.CODE = R.AI.REDO.ARCIB.PARAMETER<AI.PARAM.MIGRATION.CODE>
    CHANGE @VM TO @FM IN Y.MIG.PARAM.CODE

    DAYS = ''
    Y.BOOK.DATE.LEN = ''
    Y.FROM.DATE.VAL = ''
    Y.CURRENT.DAY = ''
    ST.RG.DATE=''
    END.RG.DATE=''
    END.TO.DATE=''
    Y.ID.LIST = ''
    START.FRM.DATE=''
    FLAG.ENQ = ''
    CR.DB.FLG=''
    CR.FLG=''
    DB.FLG=''
    FINAL.ARRAY=''
    Y.TRANS.REF.LIST = ''
    END.TO.DATE = TODAY

    ACCT.ID = System.getVariable("CURRENT.ACCT.NO")
    IF E EQ "EB-UNKNOWN.VARIABLE" THEN     ;*R22 Auto Conversion  - Added IF E EQ "EB-UNKNOWN.VARIABLE"
        ACCT.ID = ""
    END

    CALL F.READ(FN.ACCOUNT,ACCT.ID,R.ACCOUNT,F.ACCOUNT,ACCOUNT.ERR)
    Y.ARRANGEMENT.ID = R.ACCOUNT<AC.ARRANGEMENT.ID>

    LOCATE "START.DATE" IN ENQ.SELECTION<2,1> SETTING ST.DT.POS THEN
        ST.RG.DATE = ENQ.SELECTION<4,ST.DT.POS>
    END

    LOCATE "END.DATE" IN ENQ.SELECTION<2,1> SETTING END.DT.POS THEN
        END.RG.DATE = ENQ.SELECTION<4,END.DT.POS>
    END
    LOCATE "TRANS.PERIOD" IN ENQ.SELECTION<2,1> SETTING END.DT.POS THEN
        CR.DB.FLG = ENQ.SELECTION<4,END.DT.POS>
    END


    BEGIN CASE
        CASE CR.DB.FLG EQ 'Todos'
            CR.ALL.FLG =1
        CASE CR.DB.FLG EQ 'Debitos'
            DB.FLG = 1
        CASE CR.DB.FLG EQ 'Creditos'
            CR.FLG = 1
    END CASE


RETURN
*----------------------------------------

*---------------------------------------------------------------------------------------------------------
PROCESS:
*---------------------------------------------------------------------------------------------------------
*PACS00125978-S

    IF ST.RG.DATE AND END.RG.DATE AND CR.DB.FLG THEN
        D.FIELDS<1> = 'ACCOUNT'
        D.FIELDS<2> = 'BOOKING.DATE'
        D.LOGICAL.OPERANDS = 1:@FM:2
        D.RANGE.AND.VALUE<1> = ACCT.ID
        D.RANGE.AND.VALUE<2> = ST.RG.DATE:@VM:END.RG.DATE
        CALL E.STMT.ENQ.BY.CONCAT(Y.ID.LIST)
        Y.TRANS.ID = FIELD(Y.ID.LIST,'*',2)
    END
    GOSUB MIG.SORT.PARA
    IF NOT(Y.TRANS.ID) THEN
        Y.ID.LIST = ''
    END

    IF ST.RG.DATE GT END.RG.DATE THEN
        Y.ID.LIST = ''
    END
    Y.TXN.TRANS.LIST = ''
    LOOP

        REMOVE STMT.ARR.ID FROM Y.ID.LIST SETTING STMT.POS
    WHILE STMT.ARR.ID:STMT.POS
        AMT.TO.CHECK = FIELD(STMT.ARR.ID,'*',6)
        Y.SE.ID    = FIELD(STMT.ARR.ID,'*',2)
        IF AMT.TO.CHECK LT '0' AND DB.FLG EQ '1' THEN
            GOSUB GET.TXN.DETAILS
        END
        IF AMT.TO.CHECK GT '0' AND CR.FLG EQ '1' THEN
            GOSUB GET.TXN.DETAILS
        END
        IF NOT (CR.FLG) AND NOT(DB.FLG) AND CR.ALL.FLG EQ '1' THEN
            GOSUB GET.TXN.DETAILS
        END

    REPEAT

RETURN
**************
MIG.SORT.PARA:
**************
    Y.MIG.TOT.CNT = DCOUNT(Y.ID.LIST,@FM)

    Y.MIG.INT = 1
    LOOP
    WHILE Y.MIG.INT LE Y.MIG.TOT.CNT
        Y.MIG.STMT.ID = FIELD(Y.ID.LIST<Y.MIG.INT>,'*',2)
        CALL F.READ(FN.STMT.ENTRY,Y.MIG.STMT.ID,R.STMT.ENTRY,F.STMT.ENTRY,SE.ERR)
        Y.MIG.TXN.CODE = R.STMT.ENTRY<AC.STE.TRANSACTION.CODE>
        LOCATE  Y.MIG.TXN.CODE IN Y.MIG.PARAM.CODE SETTING Y.MIG.POS THEN
            DEL Y.ID.LIST<Y.MIG.INT>
        END
        Y.MIG.INT += 1
    REPEAT

RETURN
*******************
GET.TXN.DETAILS:
*******************

    CALL F.READ(FN.STMT.ENTRY,Y.SE.ID,R.STMT.ENTRY,F.STMT.ENTRY,STMT.ENTRY.ERR)
    Y.SE.TRANS.REFERENCE = R.STMT.ENTRY<AC.STE.TRANS.REFERENCE>

    CALL F.READ(FN.AA.REFERENCE.DETAILS,Y.ARRANGEMENT.ID,R.AA.REFERENCE.DETAILS,F.AA.REFERENCE.DETAILS,AA.REFERENCE.DETAILS.ERR)
    Y.AA.REF.TRANS.REF = R.AA.REFERENCE.DETAILS<AA.REF.TRANS.REF>
    Y.AA.REF.AAA.ID    = R.AA.REFERENCE.DETAILS<AA.REF.AAA.ID>
    CHANGE @VM TO @FM IN Y.AA.REF.AAA.ID

    CALL F.READ(FN.AA.ARRANGEMENT.ACTIVITY,Y.SE.TRANS.REFERENCE,R.AA.ARRANGEMENT.ACTIVITY,F.AA.ARRANGEMENT.ACTIVITY,AAA.ARR)
    Y.ACT.MASTER.AAA  = R.AA.ARRANGEMENT.ACTIVITY<AA.ARR.ACT.MASTER.AAA>

    Y.ACT.ACTIVITY = R.AA.ARRANGEMENT.ACTIVITY<AA.ARR.ACT.ACTIVITY>
    CALL CACHE.READ(FN.AA.ACTIVITY, Y.ACT.ACTIVITY, R.AA.ACTIVITY, AA.ACTIVITY.ERR)    ;*R22 Auto Conversion  - F.READ to CACHE.READ
    Y.DESCRIPTION = R.AA.ACTIVITY<AA.ACT.DESCRIPTION,LNGG>
    IF NOT(Y.DESCRIPTION) THEN
        Y.DESCRIPTION  =  R.AA.ACTIVITY<AA.ACT.DESCRIPTION,1>
    END

    LOCATE Y.SE.TRANS.REFERENCE IN Y.AA.REF.AAA.ID SETTING AA.REF.POS THEN
        Y.TRANS.REF = Y.AA.REF.TRANS.REF<1,AA.REF.POS>
    END ELSE
        LOCATE Y.ACT.MASTER.AAA IN Y.AA.REF.AAA.ID SETTING AA.REF.POS THEN
            Y.TRANS.REF = Y.AA.REF.TRANS.REF<1,AA.REF.POS>
        END ELSE
            RETURN
        END
    END
    IF Y.TRANS.REF[1,2] EQ 'FT' THEN
        GOSUB GET.FT.TXN.DETAILS
    END ELSE
        GOSUB GET.TT.TXN.DETAILS
    END


    LOCATE Y.SE.TRANS.REFERENCE IN Y.TRANS.REF.LIST SETTING SE.ID.POS THEN
        RETURN
    END ELSE
        LOCATE Y.TRANS.REF  IN Y.TXN.TRANS.LIST SETTING Y.TXN.POS THEN
            RETURN
        END ELSE
            Y.TXN.TRANS.LIST<-1> = Y.TRANS.REF
        END
        Y.TRANS.REF.LIST<-1> = Y.SE.TRANS.REFERENCE
        CHANGE '*' TO @FM IN STMT.ARR.ID
        DEL STMT.ARR.ID<6>
        INS Y.AMOUNT BEFORE STMT.ARR.ID<6>
        CHANGE @FM TO '*' IN STMT.ARR.ID
        FINAL.ARRAY<-1>  = STMT.ARR.ID:'*':Y.DESCRIPTION
    END
RETURN
*******************
GET.FT.TXN.DETAILS:
*******************

    CALL F.READ(FN.FUNDS.TRANSFER,Y.TRANS.REF,R.FUNDS.TRANSFER,F.FUNDS.TRANSFER,FT.ERR)
    Y.TRANSACTION.TYPE = R.FUNDS.TRANSFER<FT.TRANSACTION.TYPE>
    CALL CACHE.READ(FN.FT.TXN.TYPE.CONDITION, Y.TRANSACTION.TYPE, R.FT.TXN.TYPE.CONDITION, FTTC.ERR)    ;*R22 Auto Conversion  - F.READ to CACHE.READ
    IF NOT(FT.ERR) THEN
        Y.AMOUNT  = R.FUNDS.TRANSFER<FT.CREDIT.AMOUNT>
        IF NOT(Y.AMOUNT) THEN
            Y.AMOUNT = R.FUNDS.TRANSFER<FT.DEBIT.AMOUNT>
        END
        IF R.FUNDS.TRANSFER<FT.DEBIT.ACCT.NO> EQ ACCT.ID THEN
            Y.FTTC.TXN.CODE  = R.FT.TXN.TYPE.CONDITION<FT6.STO.TXN.CODE.CR>
            Y.AMOUNT = '-':Y.AMOUNT
        END ELSE
            Y.FTTC.TXN.CODE  = R.FT.TXN.TYPE.CONDITION<FT6.STO.TXN.CODE.DR>
        END
        CALL CACHE.READ(FN.TRANSACTION, Y.FTTC.TXN.CODE, R.TRANSACTION, TRANSACTION.ERR)     ;*R22 Auto Conversion  - F.READ to CACHE.READ
        Y.DESCRIPTION = R.TRANSACTION<AC.TRA.NARRATIVE,LNGG>
        IF NOT(Y.DESCRIPTION) THEN
            Y.DESCRIPTION  =  R.TRANSACTION<AC.TRA.NARRATIVE,1>
        END

    END ELSE
        CALL EB.READ.HISTORY.REC(F.FUNDS.TRANSFER.EXCEP,Y.TRANS.REF,R.FUNDS.TRANSFER.EXCEP,FT.HIS.ERR)
        Y.TRANSACTION.TYPE = R.FUNDS.TRANSFER.EXCEP<FT.TRANSACTION.TYPE>
        CALL CACHE.READ(FN.FT.TXN.TYPE.CONDITION, Y.TRANSACTION.TYPE, R.FT.TXN.TYPE.CONDITION, FTTC.ERR)     ;*R22 Auto Conversion  - F.READ to CACHE.READ
        IF NOT(FT.HIS.ERR) THEN
            Y.AMOUNT  = R.FUNDS.TRANSFER.EXCEP<FT.CREDIT.AMOUNT>
            IF NOT(Y.AMOUNT) THEN
                Y.AMOUNT = R.FUNDS.TRANSFER.EXCEP<FT.DEBIT.AMOUNT>
            END
            IF R.FUNDS.TRANSFER.EXCEP<FT.DEBIT.ACCT.NO> EQ ACCT.ID THEN
                Y.FTTC.TXN.CODE  = R.FT.TXN.TYPE.CONDITION<FT6.STO.TXN.CODE.CR>
                Y.AMOUNT = '-':Y.AMOUNT
            END ELSE
                Y.FTTC.TXN.CODE  = R.FT.TXN.TYPE.CONDITION<FT6.STO.TXN.CODE.DR>
            END
            CALL CACHE.READ(FN.TRANSACTION, Y.FTTC.TXN.CODE, R.TRANSACTION, TRANSACTION.ERR)     ;*R22 Auto Conversion  - F.READ to CACHE.READ
            Y.DESCRIPTION = R.TRANSACTION<AC.TRA.NARRATIVE,LNGG>
            IF NOT(Y.DESCRIPTION) THEN
                Y.DESCRIPTION  =  R.TRANSACTION<AC.TRA.NARRATIVE,1>
            END

        END
    END
RETURN
*******************
GET.TT.TXN.DETAILS:
*******************


    CALL F.READ(FN.TELLER,Y.TRANS.REF,R.TELLER,F.TELLER,TELLER.ERR)
    IF NOT(TELLER.ERR) THEN
        IF R.TELLER<TT.TE.DR.CR.MARKER> EQ 'DEBIT' THEN
            Y.AMOUNT = '-':R.TELLER<TT.TE.AMOUNT.LOCAL.1>
        END ELSE
            Y.AMOUNT = R.TELLER<TT.TE.AMOUNT.LOCAL.1>
        END
    END ELSE

        CALL EB.READ.HISTORY.REC(F.TELLER.EXCEP,Y.TRANS.REF,R.TELLER.EXCEP,TELLER.HIS.ERR)
        IF NOT(TELLER.HIS.ERR) THEN
            IF R.TELLER.EXCEP<TT.TE.DR.CR.MARKER> EQ 'DEBIT' THEN
                Y.AMOUNT = '-':R.TELLER.EXCEP<TT.TE.AMOUNT.LOCAL.1>
            END ELSE
                Y.AMOUNT = R.TELLER.EXCEP<TT.TE.AMOUNT.LOCAL.1>
            END
        END

    END
RETURN
**************
GET.CALL.DATE:
****************
    CALL CALENDAR.DAY(END.TO.DATE,SIGN,START.FRM.DATE)
RETURN

*PACS00125978-E
********************
CHECK.MORE.THAN.180:
*******************


    IF ST.RG.DATE AND END.RG.DATE THEN
        REGION=''
        START.DATE=ST.RG.DATE
        END.DATE=END.RG.DATE
        DAYS='C'
        CALL CDD(REGION,START.DATE,END.DATE,DAYS)
    END
    IF DAYS GT 180 THEN
        ENQ.ERROR = "EB-ENTER.MONTHS.PAERIOD"
    END

RETURN
END
