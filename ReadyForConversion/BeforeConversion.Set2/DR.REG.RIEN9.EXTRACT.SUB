*-----------------------------------------------------------------------------
* <Rating>48</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE DR.REG.RIEN9.EXTRACT.SUB(YREC.VAL.ID,YRTN.VALUE)
*----------------------------------------------------------------------------
* Company Name   : APAP
* Company Name   : APAP
* Program Name   : DR.REG.RIEN9.EXTRACT.SUB
* Date           : 3-May-2013
*----------------------------------------------------------------------------
* Description:
*------------
* This is a call routine to the multi threaded job.
*----------------------------------------------------------------------------
*
* Modification History :
* ----------------------
*   Date       Author              Modification Description
* 28-08-2014   V.P.Ashokkumar       PACS00313072- Created CALL routine to reduce 2900 rating
* 09-12-2014   V.P.Ashokkumar       PACS00313072- Fixed all the fields
* 27-03-2015   V.P.Ashokkumar       PACS00313072- Updated mapping and performance change
* 21-10-2016   V.P.Ashokkumar       R15 Upgrade
*----------------------------------------------------------------------------

    $INSERT T24.BP I_COMMON
    $INSERT T24.BP I_EQUATE
    $INSERT T24.BP I_F.DATES
    $INSERT T24.BP I_BATCH.FILES
    $INSERT T24.BP I_TSA.COMMON
    $INSERT T24.BP I_F.CUSTOMER
    $INSERT T24.BP I_F.INDUSTRY
    $INSERT T24.BP I_F.COLLATERAL
    $INSERT T24.BP I_F.EB.CONTRACT.BALANCES
    $INSERT T24.BP I_F.AA.ARRANGEMENT
    $INSERT T24.BP I_F.RE.STAT.LINE.CONT
    $INSERT T24.BP I_F.LIMIT
    $INSERT T24.BP I_F.AA.TERM.AMOUNT
    $INSERT T24.BP I_F.AA.INTEREST
    $INSERT T24.BP I_F.AA.PAYMENT.SCHEDULE
    $INSERT T24.BP I_F.AA.LIMIT
    $INSERT T24.BP I_F.AA.OVERDUE
    $INSERT T24.BP I_F.AA.ACCOUNT
    $INSERT T24.BP I_F.AA.ACCOUNT.DETAILS
    $INSERT T24.BP I_F.RE.STAT.REP.LINE
    $INSERT T24.BP I_F.RELATION
    $INSERT T24.BP I_F.ACCOUNT
    $INCLUDE TAM.BP I_F.REDO.CATEGORY.CIUU
    $INCLUDE TAM.BP I_F.REDO.H.CUSTOMER.PROVISIONING
    $INCLUDE TAM.BP I_F.REDO.H.PROVISION.PARAMETER
    $INCLUDE TAM.BP I_F.REDO.CREATE.ARRANGEMENT
    $INCLUDE TAM.BP I_F.REDO.AZACC.DESC
    $INCLUDE LAPAP.BP I_DR.REG.RIEN9.EXTRACT.COMMON
    $INCLUDE REGREP.BP I_F.DR.REG.RIEN9.PARAM
    $INCLUDE TAM.BP I_F.APAP.H.INSURANCE.DETAILS
*
    GOSUB PROCESS
    RETURN

PROCESS:
********
    R.AA.ARRANGEMENT = ''; AA.ARRANGEMENT.ERR = ''; YPRIN.LINE = ''; YACC.LINE = ''; Y.CUR.AMT = ''; YPAST.DUE = ''
    Y.COLL.ID = ''; REC.ID = ''; R.AA.PAY.SCH = ''; R.AA.ARR.TERM = ''; RY.AA.OVERDUE = ''; Y.CNT.O = 0
    RY.AA.ACCOUNT.DETAILS = ''; Y.ARR.YACC.STAT = ''
    REC.ID = FIELD(YREC.VAL.ID,"~*",1)
    Y.COLL.ID = FIELD(YREC.VAL.ID,"~*",2)
    R.AA.PAY.SCH = FIELD(YREC.VAL.ID,"~*",3)
    R.AA.ARR.TERM = FIELD(YREC.VAL.ID,"~*",4)
    RY.AA.OVERDUE = FIELD(YREC.VAL.ID,"~*",5)
    Y.TODAY = FIELD(YREC.VAL.ID,"~*",6)
    RY.AA.ACCOUNT.DETAILS = FIELD(YREC.VAL.ID,"~*",7)

    Y.BILL.TYPE = RY.AA.OVERDUE<AA.OD.BILL.TYPE>
    LOCATE 'PAYMENT' IN Y.BILL.TYPE<1,1> SETTING YPOSN THEN
        Y.OVR.STATUS = RY.AA.OVERDUE<AA.OD.OVERDUE.STATUS,YPOSN>
    END

    CALL F.READ(FN.AA.ARRANGEMENT,REC.ID,R.AA.ARRANGEMENT,F.AA.ARRANGEMENT,AA.ARRANGEMENT.ERR)
    CCY.VAL = R.AA.ARRANGEMENT<AA.ARR.CURRENCY,1>
    CUS.ID = R.AA.ARRANGEMENT<AA.ARR.CUSTOMER,1>
    STAR.DATE.VAL = R.AA.ARRANGEMENT<AA.ARR.START.DATE,1>
    APP.ID = 'ACCOUNT'; AC.ID = ''
    AC.ID = R.AA.ARRANGEMENT<AA.ARR.LINKED.APPL.ID,1>       ;* ACCOUNT is 1st multi-value.
    R.ACCOUNT = ''; ERR.ACCOUNT = ''; L.OD.STATUS.VAL = ''
    CALL F.READ(FN.ACCOUNT,AC.ID,R.ACCOUNT,F.ACCOUNT,ERR.ACCOUNT)
    L.OD.STATUS.VAL = R.ACCOUNT<AC.LOCAL.REF,L.OD.STATUS.POS>

    GOSUB GET.ECB.TYPE1
    GOSUB GET.ECB.TYPE2
    GOSUB GET.PAY.SCH
    GOSUB GET.COLL.TYPE
    GOSUB GET.FIN.COV.AMT
* Upgrade Start 21/10/2016
*                   1           2          3            4                5                 6              7           8              9             10
    YRTN.VALUE = CAP.TERM:FM:INT.TERM:FM:COLL.VAL:FM:OUT.STD.AMT1:FM:OUT.STD.AMT.32:FM:OUT.STD.AMT.33:FM:CUR.AMT:FM:INS.AMT.VAL:FM:YACC.LINE:FM:YPAST.DUE
* Upgrade End 21/10/2016
    RETURN

GET.PAY.SCH:
************
    MATUR.DATE = ''
    MATUR.DATE = INT.TERM
    PROP.POS = ''; CAP.TERM = ''; SM.POS = ''; VM.POS = ''; FRQ1 = ''; FRQ2 = ''; FRQ3 = ''; INT.TERM = ''
    FINDSTR 'ACCOUNT' IN R.AA.PAY.SCH<AA.PS.PROPERTY> SETTING PROP.POS,SM.POS,VM.POS THEN
        DUE.FRQ = R.AA.PAY.SCH<AA.PS.DUE.FREQ,PROP.POS,SM.POS>
        FRQ1 = DUE.FRQ[2,1]
        FRQ2 = DUE.FRQ[6,1]
        FRQ3 = DUE.FRQ[9,3]
        GOSUB FREQ.CHK.INT
        CAP.TERM = INT.TERM
    END

    INT.TERM = ''; PROP.POS = ''; DUE.FRQ = ''; SM.POS = ''; VM.POS = ''; FRQ1 = ''; FRQ2 = ''; FRQ3 = ''
    FINDSTR 'PRINCIPALINT' IN R.AA.PAY.SCH<AA.PS.PROPERTY> SETTING PROP.POS,SM.POS,VM.POS THEN
        DUE.FRQ = R.AA.PAY.SCH<AA.PS.DUE.FREQ,PROP.POS,SM.POS>
        FRQ1 = DUE.FRQ[2,1]
        FRQ2 = DUE.FRQ[6,1]
        FRQ3 = DUE.FRQ[9,3]
        GOSUB FREQ.CHK.INT
    END
    RETURN

FREQ.CHK.INT:
*************
    IF FRQ1 GT 0 THEN
        INT.TERM = '1'
    END
    IF FRQ2 EQ 6 THEN
        INT.TERM = '2'
    END
    IF FRQ2 EQ 4 THEN
        INT.TERM = '3'
    END
    IF FRQ2 EQ 3 THEN
        INT.TERM = '4'
    END
    IF FRQ2 EQ 2 THEN
        INT.TERM = '6'
    END
    IF FRQ2 EQ 1 THEN
        INT.TERM = '12'
    END
    IF FRQ3 EQ '' AND INT.TERM EQ '' THEN
        INT.TERM = '99'
    END
    RETURN

GET.COLL.TYPE:
**************
    COLL.TYPE = ''; COLL.CODE = ''; COLL.ID = ''
    COLL.ID = R.AA.ARR.TERM<AA.AMT.LOCAL.REF,L.AA.COL.POS,1>
    IF NOT(COLL.ID) THEN
        COLL.ID = Y.COLL.ID
    END
    CALL F.READ(FN.COLLATERAL,COLL.ID,R.COLLATERAL,F.COLLATERAL,COLLATERAL.ERR)
    COLL.TYPE = R.COLLATERAL<COLL.COLLATERAL.TYPE>
    COLL.CODE = R.COLLATERAL<COLL.COLLATERAL.CODE>
    BEGIN CASE
    CASE COLL.CODE EQ 100
        COLL.VAL = 'V1'
    CASE COLL.CODE EQ 150
        COLL.VAL = 'V2'
    CASE COLL.CODE EQ 200
        COLL.VAL = 'V3'
    CASE COLL.CODE EQ 250
        COLL.VAL = 'V3'
    CASE COLL.CODE EQ 300
        COLL.VAL = 'P1'
    CASE COLL.CODE EQ 350
        COLL.VAL = 'P2'
    CASE COLL.CODE EQ 450
        COLL.VAL = 'HI'
    CASE COLL.CODE EQ 500
        COLL.VAL = 'H2'
    CASE COLL.CODE EQ 550
        COLL.VAL = 'H3'
    CASE COLL.CODE EQ 600
        COLL.VAL = 'H4'
    CASE COLL.CODE EQ 650
        COLL.VAL = 'H5'
    CASE COLL.CODE EQ 700
        COLL.VAL = 'H6'
    CASE COLL.CODE EQ 750
        COLL.VAL = 'O1'
    CASE COLL.CODE EQ 800
        COLL.VAL = 'O2'
    CASE COLL.CODE EQ 850
        COLL.VAL = 'S1'
    CASE COLL.CODE EQ 900
        COLL.VAL = 'S2'
    CASE COLL.CODE EQ 950
        COLL.VAL = 'S3'
    CASE COLL.CODE EQ 970
        COLL.VAL = 'S4'
    CASE COLL.CODE EQ 995
        COLL.VAL = 'NA'
    END CASE
    IF NOT(COLL.VAL) THEN
        COLL.VAL = "NA"
    END
    RETURN

GET.ECB.TYPE1:
**************
    GOSUB PROCESS.INIT

    OUT.STD.AMT = ''; CUR.AMT = ''; TOTCOMMITMENT.POS = ''; CURCOMMITMENT.POS = ''
    CURACCOUNT.POS = ''; OUT.STD.AMT.32 = ''; OUT.STD.AMT1 = ''; OUT.STD.AMT2 = ''
    LINE.CONT = ''; TOTAL.DUE.AMT.32 = 0; YACCT.OVER = 'ACCOUNT'; R.AA.ACCT.DET = ''; AA.ACCT.DET.ERR = ''

    CALL F.READ(FN.AA.ACCOUNT.DETAILS,REC.ID,R.AA.ACCT.DET,F.AA.ACCOUNT.DETAILS,AA.ACCT.DET.ERR)
    YPRINCIP.GRP = 0; YACCT.GRP = 0; YNAB.STATUS = ''; DAT.BALANCES = ''; ACCT.SET.STAT = ''; ACCT.YINSTALL.CNT = ''
    YNAB.STATUS = R.ACCOUNT<AC.LOCAL.REF,L.OD.STATUS.POS>
    CALL F.READ(FN.EB.CONTRACT.BALANCES,AC.ID,R.EB.CONTRACT.BALANCES,F.EB.CONTRACT.BALANCES,EB.CONTRACT.BALANCES.ERR)
    IF R.EB.CONTRACT.BALANCES THEN
        Y.CONSOL.KEY = R.EB.CONTRACT.BALANCES<ECB.CONSOL.KEY>
        Y.CONSOL.PART = FIELD(Y.CONSOL.KEY,'.',1,16)
        Y.ASSET.TYPE = R.EB.CONTRACT.BALANCES<ECB.CURR.ASSET.TYPE>
        CTR.BAL.TYPE = 1
        CNT.BAL.TYPE = DCOUNT(Y.ASSET.TYPE,VM)
        LOOP
        WHILE CTR.BAL.TYPE LE CNT.BAL.TYPE
            ACC.POS = '';  RET.FLG = 0; Y.ASSET.TYPE.TP = ''
            BAL.TYPE1 = Y.ASSET.TYPE<1,CTR.BAL.TYPE>
            Y.ASSET.TYPE.TP = BAL.TYPE1
            IF BAL.TYPE1 EQ 'UNCACCOUNT' THEN
                CTR.BAL.TYPE +=1
                CONTINUE
            END

            GOSUB PROCESS.INIT.1
            IF BAL.TYPE1 EQ 'TOTCOMMITMENT' THEN
                BAL.DETAILS = 0
                CALL AA.GET.PERIOD.BALANCES(AC.ID, BAL.TYPE1,REQUEST.TYPE, START.DATE, END.DATE, '',BAL.DETAILS, ERROR.MESSAGE)
                TOTCOM = BAL.DETAILS<4>
                TOTCOM = ABS(TOTCOM)
                CTR.BAL.TYPE += 1
            END

            IF BAL.TYPE1 EQ 'CURCOMMITMENT' THEN
                BAL.DETAILS = 0
                CALL AA.GET.PERIOD.BALANCES(AC.ID, BAL.TYPE1,REQUEST.TYPE, START.DATE, END.DATE, '',BAL.DETAILS, ERROR.MESSAGE)
                CURCOM = BAL.DETAILS<4>
                CURCOM = ABS(CURCOM)
                CTR.BAL.TYPE += 1
            END
            Y.RPRTS = 'MBGL'
            LEN.TYPE = LEN(BAL.TYPE1)
            REQ.LEN = BAL.TYPE1[((LEN.TYPE-AC.LEN)+1),AC.LEN]
            REQ.INT.LEN = BAL.TYPE1[((LEN.TYPE-PRIN.INT.LEN)+1),PRIN.INT.LEN]
            IF (REQ.LEN EQ 'ACCOUNT') THEN
                Y.IN.CONSOL.KEY = Y.CONSOL.PART:'.':BAL.TYPE1
                Y.VARIABLE = ''; YACC.STAT = ''
                CALL RE.CALCUL.REP.AL.LINE(Y.IN.CONSOL.KEY,Y.RPRTS,Y.LINES,Y.VARIABLE)
                Y.LINE = Y.RPRTS:'.':Y.LINES
                CALL F.READ(FN.RE.STAT.REP.LINE,Y.LINE,R.LINE,F.RE.STAT.REP.LINE,REP.ERR)
                GOSUB REG.ACCOUNT.NO
            END
            CTR.BAL.TYPE += 1
        REPEAT
    END

    GOSUB RUN.PROCESS
    CUR.AMT = TOTCOM - CURCOM
    CUR.AMT = ABS(CUR.AMT)
    OUT.STD.AMT.32 = TOTAL.DUE.AMT.32
    OUT.STD.AMT.32 = ABS(OUT.STD.AMT.32)
    YACC.LINE = AC.ACCOUNT.PRINT
    RETURN

REG.ACCOUNT.NO:
***************
    IF R.LINE THEN
        Y.REGULATORY.ACC.NO = R.LINE<RE.SRL.DESC,1>         ;* get accounting account for the current balance type in analysis
        IF Y.REGULATORY.ACC.NO[1,1] EQ '8' THEN
            RETURN
        END
        IF Y.REGULATORY.ACC.NO[1,3] EQ '241' THEN
            RETURN
        END
        LOCATE Y.REGULATORY.ACC.NO IN SAVE.ACC.AC<1> SETTING ACC.POS THEN
            GOSUB CHECK.ASSET.TYPE
            RET.FLG = 1
        END ELSE
            GOSUB SAVE.UNIQUE.AC.ACC
        END
        IF BAL.TYPE1 EQ 'DE3ACCOUNT' OR BAL.TYPE1 EQ 'DELACCOUNT' OR BAL.TYPE1 EQ 'NABACCOUNT' THEN
            TOTAL.DUE.AMT.32+=DAT.BALANCES
        END
        YACC.STAT = BAL.TYPE1[1,3]
        GOSUB BILL.VALUE.CHK
        RET.FLG = 0
    END
    RETURN

SAVE.UNIQUE.AC.ACC:
*******************
    SAVE.ACC.AC<-1> = Y.REGULATORY.ACC.NO
    BAL.DETAILS = 0
    CALL AA.GET.PERIOD.BALANCES(AC.ID, BAL.TYPE1,REQUEST.TYPE, START.DATE, END.DATE, '',BAL.DETAILS, ERROR.MESSAGE)
    ASSET.TYPE.ARRAY<-1> = BAL.TYPE1
    DAT.BALANCES = BAL.DETAILS<4>
    BAL.AMT<-1> = DAT.BALANCES
    RETURN

SAVE.EXISTING.AC.ACC:
*********************
    BAL.DETAILS = 0
    CALL AA.GET.PERIOD.BALANCES(AC.ID, BAL.TYPE1,REQUEST.TYPE, START.DATE, END.DATE, '',BAL.DETAILS, ERROR.MESSAGE)
    DAT.BALANCES = BAL.DETAILS<4>
    NEW.AMT = DAT.BALANCES + BAL.AMT<ACC.POS>
    BAL.AMT<ACC.POS> = NEW.AMT
    RETURN

CHECK.ASSET.TYPE:
*****************
    LOCATE BAL.TYPE1 IN ASSET.TYPE.ARRAY<1> SETTING ASSET.POS THEN
        ASSET.POS = ''
    END ELSE
        ASSET.TYPE.ARRAY<-1> = BAL.TYPE1
        GOSUB SAVE.EXISTING.AC.ACC
    END
    RETURN

PROCESS.INIT.1:
***************
    REQUEST.TYPE = ''
    START.DATE = STAR.DATE.VAL
    END.DATE = Y.TODAY
    REQUEST.TYPE<4>='ECB'
    STRT.DATE.PRINT = ''
    ERROR.MESSAGE = ''
    BAL.DETAILS = ''
    DAT.BALANCES = 0
    RETURN

BILL.VALUE.CHK:
***************
    YAGING.STAT = ''; YSET.STAT = ''; Y.BIL.DATE = ''; FM.AGS = ''; SM.AGS = ''
    VM.AGS = ''; SET.STAT = 0; YINSTALL.CNT = 0; YBILL.STAT = ''; Y.SET.STAT = ''
    YCURR.ASS.VAL = ''; YFM.POSN = ''; Y.FM.POSN = ''
    LOCATE YACC.STAT IN Y.ARR.YACC.STAT<1> SETTING YFM.POSN THEN
        LOCATE Y.ASSET.TYPE.TP IN Y.ASSET.TYPE.ARR<1> SETTING Y.FM.POSN THEN
            RETURN
        END
    END

    IF YACC.STAT EQ 'DUE' THEN
        YTEM.SET.STAT = 0; YTEM.INST.NUM = 0
        YTEM.SET.STAT = Y.ARR.AGE.DAYS<ACC.POS>
        YTEM.INST.NUM = Y.ARR.INST.NUM<ACC.POS>
        Y.ARR.AGE.DAYS<ACC.POS> = YTEM.SET.STAT
        Y.ARR.INST.NUM<ACC.POS> = YTEM.INST.NUM
        RETURN
    END
    YSET.STAT = R.AA.ACCT.DET<AA.AD.SET.STATUS>
    YAGING.STAT = R.AA.ACCT.DET<AA.AD.AGING.STATUS>
    YBILL.STAT = R.AA.ACCT.DET<AA.AD.BILL.STATUS>

    FINDSTR YACC.STAT IN YAGING.STAT<1> SETTING FM.AGU,SM.AGU,VM.AGU THEN
        Y.SET.STAT = R.AA.ACCT.DET<AA.AD.SET.STATUS,SM.AGU,VM.AGU>
        IF Y.SET.STAT EQ 'UNPAID' THEN
            Y.BIL.DATE = R.AA.ACCT.DET<AA.AD.BILL.DATE,SM.AGU,VM.AGU>
            GOSUB LOOP.INSTAL.DET
        END
    END
    Y.TODAYLST = TODAY
    IF (Y.BIL.DATE LT Y.TODAYLST) AND (LEN(Y.BIL.DATE) EQ 8 AND LEN(Y.TODAYLST) EQ 8) THEN
        YDAYS = 'C'
        CALL CDD('',Y.BIL.DATE,Y.TODAY,YDAYS)
        SET.STAT = YDAYS + 1
    END

    IF RET.FLG EQ 1 THEN
        YTEM.SET.STAT = ''
        YTEM.SET.STAT = Y.ARR.AGE.DAYS<ACC.POS>
        IF SET.STAT GT YTEM.SET.STAT THEN
            Y.ARR.AGE.DAYS<ACC.POS> = SET.STAT
        END
    END ELSE
        Y.ARR.AGE.DAYS<-1> = SET.STAT
    END
    Y.ARR.YACC.STAT<-1> = YACC.STAT
    Y.ASSET.TYPE.ARR<-1> = Y.ASSET.TYPE.TP

    IF REQ.LEN EQ 'ACCOUNT' AND YACC.STAT EQ 'CUR' THEN
        ACCT.SET.STAT = SET.STAT
    END

    RETURN

LOOP.INSTAL.DET:
****************
    YAGING.STAT.CNT = ''; YPROCESS.CNT = 0; YGP.AGING.STAT = ''; YGP.SET.STAT = ''
    YAGING.STAT.CNT = DCOUNT(YAGING.STAT,VM)
    LOOP
    UNTIL YPROCESS.CNT EQ YAGING.STAT.CNT
        YPROCESS.CNT++
        YGP.AGING.STAT = R.AA.ACCT.DET<AA.AD.AGING.STATUS,YPROCESS.CNT,1>
        YGP.SET.STAT = R.AA.ACCT.DET<AA.AD.SET.STATUS,YPROCESS.CNT,1>
        IF YACC.STAT EQ YGP.AGING.STAT AND YGP.SET.STAT EQ 'UNPAID' THEN
            YINSTALL.CNT++
        END
    REPEAT
    RETURN

RUN.PROCESS:
*----------*
    CTR.LINE = 1
    CNT.LINE = DCOUNT(SAVE.ACC.AC,FM)
    LOOP
    WHILE CTR.LINE LE CNT.LINE
        ACC.NO.LINE = SAVE.ACC.AC<CTR.LINE>
        BAL.AMT.LINE = BAL.AMT<CTR.LINE>
        NOT.PRINT.INT.ACC = ACC.NO.LINE[1,1]
        IF BAL.AMT.LINE EQ '0' THEN
            CTR.LINE += 1
            CONTINUE
        END
        IF NOT.PRINT.INT.ACC NE '8' THEN
            IF AC.ACCOUNT.PRINT EQ '' AND ACC.NO.LINE THEN
                AC.ACCOUNT.PRINT = ACC.NO.LINE
            END
            OUT.STD.AMT1 += ABS(BAL.AMT.LINE)
        END
        YPAST.DUE = Y.ARR.AGE.DAYS<CTR.LINE>

        IF ACCT.SET.STAT THEN
            YPAST.DUE = ACCT.SET.STAT
        END
        IF YPAST.DUE.OLD GT YPAST.DUE THEN
            YPAST.DUE = YPAST.DUE.OLD
        END
        YPAST.DUE.OLD = YPAST.DUE
        CTR.LINE += 1
    REPEAT
    RETURN

GET.ECB.TYPE2:
**************
    OUT.STD.AMT.33 = ''; LINE.CONT = ''; YACCT.OVER = 'PRINCIPALINT'; Y.CNT.O = 0
    BALANCES.TO.CHECK = 'DE3PRINCIPALINT':FM:'DELPRINCIPALINT':FM:'DE3PRINCIPALINTSP':FM:'DELPRINCIPALINTSP'
    Y.CNT.O = DCOUNT(BALANCES.TO.CHECK,FM)
    GOSUB GET.SCHEDULES.1
    GOSUB ACC.NAB.PROCESS
    OUT.STD.AMT.33 = TOTAL.DUE.AMT
    OUT.STD.AMT.33 = ABS(OUT.STD.AMT.33)
    RETURN

GET.SCHEDULES.1:
****************
    ERROR.MESSAGE = ''; BAL.DETAILS = ''; TOTAL.DUE.AMT = ''; TOTAL.DUE.AMT.32 = ''; TOTAL.DUE.AMT.NAB = ''
    START.DATE = Y.TODAY; END.DATE = Y.TODAY; YNAB.FLAG = 0; TOTAL.DUE.AMT.A = ''; TOTAL.DUE.AMT.B = ''
    REQUEST.TYPE = ''; REQUEST.TYPE<4>='ECB'

    LOOP
    WHILE Y.CNT.O GT 0 DO
        FLG.T += 1
        BALANCE.TO.CHECK = BALANCES.TO.CHECK<FLG.T>
        DAT.BALANCES = ''; BAL.DETAILS = ''
        CALL AA.GET.PERIOD.BALANCES(AC.ID, BALANCE.TO.CHECK,REQUEST.TYPE, START.DATE, END.DATE, '',BAL.DETAILS, ERROR.MESSAGE)
        DAT.BALANCES = BAL.DETAILS<4>
        TOTAL.DUE.AMT+=DAT.BALANCES
        Y.CNT.O -= 1
    REPEAT
    RETURN

PROCESS.INIT:
*************
    AC.BAL.PRINT = ''
    AC.ACCOUNT.PRINT = ''
    AC.INTEREST.PRINT = ''
    LINK.POS = ''
    STRT.DATE = ''
    LEN.TERM = ''
    D.PART = ''
    TERM.PRINT = ''
    ASSET.TYPE.ARRAY = ''
    SAVE.ACC.AC = ''
    BAL.AMT = ''
    R.EB.CONTRACT.BALANCES = ''
    EB.CONTRACT.BALANCES.ERR = ''
    AC.LEN = 7      ;* This is length of word 'ACCOUNT'
    PRIN.INT.LEN = 12         ;* This is length of word 'PRINCIPALINT'
    RETURN

ACC.NAB.PROCESS:
****************
    SUSPEND.VAL = ''; SUSPEND.STAT = ''; SUSPEND.DTE = ''; NAB.ERR = ''; R.REDO.CONCAT.ACC.NAB = ''
    SUSPEND.VAL = RY.AA.ACCOUNT.DETAILS<AA.AD.SUSPENDED>
    SUSPEND.STAT = RY.AA.ACCOUNT.DETAILS<AA.AD.SUSP.STATUS,1>
    SUSPEND.DTE = RY.AA.ACCOUNT.DETAILS<AA.AD.SUSP.DATE,1>
    IF SUSPEND.STAT EQ 'SUSPEND' AND SUSPEND.DTE GT Y.TODAY THEN
        RETURN
    END
    CALL F.READ(FN.REDO.CONCAT.ACC.NAB,AC.ID,R.REDO.CONCAT.ACC.NAB,F.REDO.CONCAT.ACC.NAB,NAB.ERR)
    IF NOT(R.REDO.CONCAT.ACC.NAB) THEN
        RETURN
    END
    YCRF.TYPE = "OFFDB"; REQUEST.TYPE = ''; REQUEST.TYPE<4> = "ECB"
    START.DATE = Y.TODAY; END.DATE = Y.TODAY; BAL.DETAILS = 0; ERROR.MESSAGE = ''; DAT.BALANCES = ''
    CALL AA.GET.PERIOD.BALANCES(R.REDO.CONCAT.ACC.NAB, YCRF.TYPE,REQUEST.TYPE, START.DATE, END.DATE, '',BAL.DETAILS, ERROR.MESSAGE)
    DAT.BALANCES = BAL.DETAILS<4>
    TOTAL.DUE.AMT += ABS(DAT.BALANCES)
    RETURN

GET.FIN.COV.AMT:
***************
    ERR.AHIIC = ''; R.APAP.H.INSURANCE.ID.CONCAT = ''; CONCAT.INS.TYPE = ''; CONCAT.INS.AMT = ''; INS.AMT.A = 0; INS.AMT.B = 0
    CALL F.READ(FN.APAP.H.INSURANCE.ID.CONCAT,REC.ID,R.APAP.H.INSURANCE.ID.CONCAT,F.APAP.H.INSURANCE.ID.CONCAT,ERR.AHIIC)
    IF NOT(R.APAP.H.INSURANCE.ID.CONCAT) THEN
        RETURN
    END

    CONCAT.INS.TYPE = R.APAP.H.INSURANCE.ID.CONCAT<2>
    CONCAT.INS.AMT = R.APAP.H.INSURANCE.ID.CONCAT<3>
    FINDSTR 'VI' IN CONCAT.INS.TYPE<1> SETTING VI.POSN,VISM,VIVM THEN
        INS.AMT.A = CONCAT.INS.AMT<VI.POSN,VISM>
    END

    FINDSTR 'VI50' IN CONCAT.INS.TYPE<1> SETTING VI5.POSN,VI5SM,VI5VM THEN
        INS.AMT.A += CONCAT.INS.AMT<VI5.POSN,VI5SM>
    END

    FINDSTR 'PVC' IN CONCAT.INS.TYPE<1> SETTING PVC.POSN,PVCSM,PVCVM THEN
        INS.AMT.B += CONCAT.INS.AMT<PVC.POSN,PVCSM>
    END

    FINDSTR 'PVC50' IN CONCAT.INS.TYPE<1> SETTING PVC5.POSN,PVCSM,PVCVM THEN
        INS.AMT.B = CONCAT.INS.AMT<PVC5.POSN,PVCSM>
    END

    FINDSTR 'PVP' IN CONCAT.INS.TYPE<1> SETTING PVP.POSN,PVPSM,PVCVM THEN
        INS.AMT.B += CONCAT.INS.AMT<PVP.POSN,PVPSM>
    END

    FINDSTR 'PVP50' IN CONCAT.INS.TYPE<1> SETTING PVP5.POSN,PVP5SM,PVP5VM THEN
        INS.AMT.B += CONCAT.INS.AMT<PVP5.POSN,PVP5SM>
    END

    IF INS.AMT.A GT INS.AMT.B THEN
        INS.AMT.VAL = INS.AMT.A
    END ELSE
        INS.AMT.VAL = INS.AMT.B
    END
    RETURN
END
