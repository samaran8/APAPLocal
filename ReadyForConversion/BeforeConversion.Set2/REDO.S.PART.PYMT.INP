*-----------------------------------------------------------------------------
* <Rating>-93</Rating>
*-----------------------------------------------------------------------------
  SUBROUTINE REDO.S.PART.PYMT.INP
***********************************************************
*----------------------------------------------------------
* COMPANY NAME : APAP
* DEVELOPED BY : GANESH
* PROGRAM NAME : REDO.S.PART.PYMT.INP
*----------------------------------------------------------


* DESCRIPTION : This routine is a INPUT routine attached
* to ACCOUNT.2 of TELLER,AA.PART.PYMNT & CREDIT.ACCOUNT.NO of FUNDS.TRANSFER,AA.PART.PYMT
* model bank version to do overpayment validations
*------------------------------------------------------------

*    LINKED WITH : TELLER & CREDIT.ACCOUNT.NO AS VALIDATION ROUTINE
*    IN PARAMETER: NONE
*    OUT PARAMETER: NONE

*----------------------------------------------------------------------
* Modification History :
*-----------------------
*DATE             WHO                    REFERENCE         DESCRIPTION
*31.05.2010      GANESH            ODR-2010-08-0017       INITIAL CREATION
*----------------------------------------------------------------------


*-------------------------------------------------------------
$INSERT I_COMMON
$INSERT I_EQUATE
$INSERT I_F.AA.ACCOUNT.DETAILS
$INSERT I_F.TELLER
$INSERT I_F.ACCOUNT
$INSERT I_F.AA.TERM.AMOUNT
$INSERT I_F.AA.BILL.DETAILS
$INSERT I_F.FUNDS.TRANSFER
$INSERT I_F.ACCT.ACTIVITY

  GOSUB INIT
  GOSUB OPENFILES
  GOSUB PROCESS
  RETURN

*-------------------------------------------------------------
INIT:
*Initialising
*-------------------------------------------------------------
  LOC.REF.APPLICATION='AA.PRD.DES.TERM.AMOUNT':FM:'TELLER':FM:'FUNDS.TRANSFER'
  LOC.REF.FIELDS='L.AA.PART.ALLOW':VM:'L.AA.PART.PCNT':FM:'L.TT.PART.PCNT':VM:'L.TT.NUM.PYMT':VM:'L.TT.BIL.NUM':VM:'L.TT.TAX.TYPE':FM:'L.FT.PART.PCNT':VM:'L.FT.NUM.PYMT':VM:'L.FT.BILL.NUM':VM:'L.FT.TAX.TYPE'
  LOC.REF.POS=''
  EFF.DATE=TODAY
  PROP.CLASS='TERM.AMOUNT'
  PROPERTY=''
  R.Condition=''
  ERR.MSG=''
  VAL.LOC.BILL.NUM = ''
  VAR.PENALTY.AMT = 0
  RETURN

*-------------------------------------------------------------
OPENFILES:
*Opening File
  FN.AA.ACCOUNT.DETAILS = 'F.AA.ACCOUNT.DETAILS'
  F.AA.ACCOUNT.DETAILS = ''
  CALL OPF(FN.AA.ACCOUNT.DETAILS,F.AA.ACCOUNT.DETAILS)

  FN.AA.BILL.DETAILS = 'F.AA.BILL.DETAILS'
  F.AA.BILL.DETAILS = ''
  CALL OPF(FN.AA.BILL.DETAILS,F.AA.BILL.DETAILS)

  FN.ACCOUNT = 'F.ACCOUNT'
  F.ACCOUNT = ''
  CALL OPF(FN.ACCOUNT,F.ACCOUNT)

  RETURN
*-------------------------------------------------------------
PROCESS:
  CALL MULTI.GET.LOC.REF(LOC.REF.APPLICATION,LOC.REF.FIELDS,LOC.REF.POS)
  VAR.LOC.ALLOW.POS = LOC.REF.POS<1,1>
  VAR.LOC.PCNT.POS = LOC.REF.POS<1,2>
  VAR.TT.PART.PCNT = LOC.REF.POS<2,1>
  VAR.TT.NUM.PYMT = LOC.REF.POS<2,2>
  VAR.TT.BILL.NUM = LOC.REF.POS<2,3>
  VAR.TT.TAX.TYPE = LOC.REF.POS<2,4>
  VAR.FT.PART.PCNT = LOC.REF.POS<3,1>
  VAR.FT.NUM.PYMT = LOC.REF.POS<3,2>
  VAR.FT.BILL.NUM = LOC.REF.POS<3,3>
  VAR.FT.TAX.TYPE = LOC.REF.POS<3,4>
  IF APPLICATION EQ 'TELLER' THEN
    GOSUB TT.PROCESS
  END
  IF APPLICATION EQ 'FUNDS.TRANSFER' THEN

    GOSUB FT.PROCESS
  END
  RETURN
*--------------
TT.PROCESS:

*Teller Process for checking the bills

  ACCT.ID = R.NEW(TT.TE.ACCOUNT.2)
  CALL F.READ(FN.ACCOUNT,ACCT.ID,R.ACCOUNT,F.ACCOUNT,ACCT.ERR)
  VAR.ACCT.ID = R.ACCOUNT<AC.ARRANGEMENT.ID>
  CALL REDO.CRR.GET.CONDITIONS(VAR.ACCT.ID,EFF.DATE,PROP.CLASS,PROPERTY,R.Condition,ERR.MSG)

  VAL.PART.ALLOW = R.Condition<AA.AMT.LOCAL.REF><1,VAR.LOC.ALLOW.POS>
  VAL.PART.PCNT = R.Condition<AA.AMT.LOCAL.REF><1,VAR.LOC.PCNT.POS>

  IF VAL.PART.ALLOW EQ 'YES' THEN
    GOSUB TT.CHECK.BILL
  END
  ELSE
    TEXT = "AA.PART.NOT.ALLOW"
    CURR.NO = DCOUNT(R.NEW(FT.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  RETURN

*-------------
FT.PROCESS:
*FT process for Checking the bills
  ACCT.ID = R.NEW(FT.CREDIT.ACCT.NO)
  CALL F.READ(FN.ACCOUNT,ACCT.ID,R.ACCOUNT,F.ACCOUNT,ACCT.ERR)
  VAR.ACCT.ID = R.ACCOUNT<AC.ARRANGEMENT.ID>
  CALL REDO.CRR.GET.CONDITIONS(VAR.ACCT.ID,EFF.DATE,PROP.CLASS,PROPERTY,R.Condition,ERR.MSG)
  VAL.PART.ALLOW = R.Condition<AA.AMT.LOCAL.REF><1,VAR.LOC.ALLOW.POS>
  VAL.PART.PCNT = R.Condition<AA.AMT.LOCAL.REF><1,VAR.LOC.PCNT.POS>
  IF VAL.PART.ALLOW EQ 'YES' THEN
    GOSUB FT.CHECK.BILL
  END
  ELSE
    TEXT = "AA.PART.NOT.ALLOW"
    CURR.NO = DCOUNT(R.NEW(FT.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  RETURN
***********
TT.CHECK.BILL:

* Get the number of bills

  CALL F.READ(FN.AA.ACCOUNT.DETAILS,VAR.ACCT.ID,R.AA.ACCOUNT.DETAILS,F.AA.ACCOUNT.DETAILS,ACCT.DET.ERR)
  Y.NO.BILL = DCOUNT(R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID>,VM)
  VAR2 = 1
  VAR.BIL.COUNT = 0
  VAR.DUE.COUNT = 0
  AGE.COUNT = 0
  GRC.COUNT = 0
  VAR.COUNT = 1
  LOOP
  WHILE VAR2 LE Y.NO.BILL
    GOSUB TT.OVERRIDE
  REPEAT
  IF VAR.DUE.COUNT GT 1 THEN
    TEXT = "AA.PART.PAY.NOT.ALLOW"
    CURR.NO = DCOUNT(R.NEW(TT.TE.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  IF Y.NO.BILL EQ 0 THEN
    TEXT = "AA.PART.PAY.NO.DUE"
    CURR.NO = DCOUNT(R.NEW(TT.TE.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  IF VAR.AGE.COUNT GT 1 THEN
    TEXT = "AA.PART.NOT.ALLOW"
    CURR.NO = DCOUNT(R.NEW(TT.TE.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  VAR.CRED.AMT = R.NEW(TT.TE.AMOUNT.LOCAL.1)
  IF TOT.CALC.AMT LT VAR.CRED.AMT THEN
    TEXT = "REDO.LESS.PARTL.PYMT"
    CURR.NO = DCOUNT(R.NEW(TT.TE.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  IF VAR.CRED.AMT NE TOT.CALC.AMT THEN
    TEXT ="REDO.PARTL.PYMT.PENALTY"
    CURR.NO = DCOUNT(R.NEW(TT.TE.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  Y.CHECK = VAR.OUT.AMT + ABS(PRIN.BALANCE)


  IF NOT(VAR.OUT.AMT) OR VAR.OUT.AMT EQ 0 THEN
    TEXT = "AA.PART.NOT.ALLOW"
    CURR.NO = DCOUNT(R.NEW(TT.TE.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END

  IF TOT.CALC.AMT GT Y.CHECK THEN
    TEXT = "AA.PART.NOT.ALLOW"
    CURR.NO = DCOUNT(R.NEW(TT.TE.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  TEXT ="REDO.PARTL.PYMT.PENALTY"
  CURR.NO = DCOUNT(R.NEW(TT.TE.OVERRIDE),VM) + 1
  CALL STORE.OVERRIDE(CURR.NO)
  RETURN
*****************
TT.OVERRIDE:
*****************
  VAL.SETTLE.STATUS = ''
  VAR.BILL.ID = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID,VAR2,1>
  CALL F.READ(FN.AA.BILL.DETAILS,VAR.BILL.ID,R.AA.BILL.DETAILS,F.AA.BILL.DETAILS,BILL.DET.ERR)
  VAR.ST.CHG.DT = R.AA.BILL.DETAILS<AA.BD.BILL.ST.CHG.DT,1>
  VAL.LOC.BILL.NUM = R.NEW(TT.TE.LOCAL.REF)<1,VAR.TT.BILL.NUM>
  CALL F.READ(FN.AA.BILL.DETAILS,VAL.LOC.BILL.NUM,R.AA.BIL.DETAILS,F.AA.BILL.DETAILS,BILL.DET.ERR1)
  VAR.PROPERTY = R.AA.BIL.DETAILS<AA.BD.PROPERTY>
  VAL.SETTLE.STATUS = R.AA.BIL.DETAILS<AA.BD.SETTLE.STATUS,1>
  VAL.BILL.STATUS = R.AA.BIL.DETAILS<AA.BD.BILL.STATUS,1>
  CHANGE VM TO FM IN VAR.PROPERTY
  LOCATE "PENALTYINT" IN VAR.PROPERTY SETTING POS THEN
    VAR.PENALTY.AMT = R.AA.BIL.DETAILS<AA.BD.OR.PROP.AMOUNT><1,POS>
  END
  IF VAL.BILL.STATUS EQ 'DUE' THEN
    VAR.DUE.COUNT++
  END
  IF VAL.BILL.STATUS NE 'DUE' THEN
    VAR.AGE.COUNT++
  END
  VAR.TOT.AMT = R.AA.BIL.DETAILS<AA.BD.OR.TOTAL.AMOUNT>
  VAR.OUT.AMT = SUM(R.AA.BIL.DETAILS<AA.BD.OS.PROP.AMOUNT>)
  ACCOUNT.ID = ACCT.ID
  BALANCE.TO.CHECK = 'ACCPENALTYINT'
  DATE.OPTIONS = ''
  EFFECTIVE.DATE = TODAY
  DATE.OPTIONS<4>  = 'ECB'
  BALANCE.AMOUNT = ""

  CALL AA.GET.PERIOD.BALANCES(ACCOUNT.ID, BALANCE.TO.CHECK, DATE.OPTIONS, EFFECTIVE.DATE, "", "", BAL.DETAILS,"")
  PRIN.BALANCE = BAL.DETAILS<IC.ACT.BALANCE>
  Y.BASE.AMT = (VAR.TOT.AMT * (VAL.PART.PCNT/100)) + ABS(PRIN.BALANCE)
  IF Y.BASE.AMT GT VAR.OUT.AMT THEN
    Y.BASE.AMT = VAR.OUT.AMT + ABS(PRIN.BALANCE)
  END
  R.NEW(TT.TE.AMOUNT.LOCAL.1) = FMT(Y.BASE.AMT,"R2#10")
  TOT.CALC.AMT = FMT(Y.BASE.AMT,"R2#10")
  VAR2++
  RETURN
*---------------
FT.CHECK.BILL:

  CALL F.READ(FN.AA.ACCOUNT.DETAILS,VAR.ACCT.ID,R.AA.ACCOUNT.DETAILS,F.AA.ACCOUNT.DETAILS,ACCT.DET.ERR)
  Y.NO.BILL = DCOUNT(R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID>,VM)
  VAR2 = 1
  VAR.BIL.COUNT = 0
  VAR.DUE.COUNT = 0
  AGE.COUNT = 0
  LOOP
  WHILE VAR2 LE Y.NO.BILL
    GOSUB FT.OVERRIDE1
  REPEAT
  VAR.CRED.AMT = R.NEW(FT.CREDIT.AMOUNT)
  IF VAR.DUE.COUNT GT 1 THEN
    TEXT = "AA.PART.PAY.NOT.ALLOW"
    CURR.NO = DCOUNT(R.NEW(FT.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  IF Y.NO.BILL EQ 0 THEN
    TEXT = "AA.PART.PAY.NO.DUE"
    CURR.NO = DCOUNT(R.NEW(FT.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  IF TOT.CALC.AMT LT VAR.CRED.AMT THEN
    TEXT = "REDO.LESS.PARTL.PYMT"
    CURR.NO = DCOUNT(R.NEW(FT.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  IF VAR.CRED.AMT NE TOT.CALC.AMT THEN
    TEXT ="REDO.PARTL.PYMT.PENALTY"
    CURR.NO = DCOUNT(R.NEW(FT.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  IF VAR.AGE.COUNT GT 1 THEN
    TEXT = "AA.PART.NOT.ALLOW"
    CURR.NO = DCOUNT(R.NEW(FT.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END

  Y.CHECK = VAR.OUT.AMT + ABS(PRIN.BALANCE)

  IF NOT(VAR.OUT.AMT) OR VAR.OUT.AMT EQ 0 THEN
    TEXT = "AA.PART.NOT.ALLOW"
    CURR.NO = DCOUNT(R.NEW(FT.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END

  IF TOT.CALC.AMT GT Y.CHECK THEN
    TEXT = "AA.PART.NOT.ALLOW"
    CURR.NO = DCOUNT(R.NEW(FT.OVERRIDE),VM) + 1
    CALL STORE.OVERRIDE(CURR.NO)
  END
  TEXT ="REDO.PARTL.PYMT.PENALTY"
  CURR.NO = DCOUNT(R.NEW(FT.OVERRIDE),VM) + 1
  CALL STORE.OVERRIDE(CURR.NO)
  RETURN
**********
FT.OVERRIDE1:
***********
  VAL.SETTLE.STATUS = ''
  VAR.BILL.ID = R.AA.ACCOUNT.DETAILS<AA.AD.BILL.ID,VAR2,1>
  CALL F.READ(FN.AA.BILL.DETAILS,VAR.BILL.ID,R.AA.BILL.DETAILS,F.AA.BILL.DETAILS,BILL.DET.ERR)
  VAR.ST.CHG.DT = R.AA.BILL.DETAILS<AA.BD.BILL.ST.CHG.DT,1>
  VAL.LOC.BILL.NUM = R.NEW(FT.LOCAL.REF)<1,VAR.FT.BILL.NUM>

  CALL F.READ(FN.AA.BILL.DETAILS,VAL.LOC.BILL.NUM,R.AA.BIL.DETAILS,F.AA.BILL.DETAILS,BILL.DET.ERR1)
  VAR.PROPERTY = R.AA.BIL.DETAILS<AA.BD.PROPERTY>
  VAL.SETTLE.STATUS = R.AA.BIL.DETAILS<AA.BD.SETTLE.STATUS,1>
  VAL.BILL.STATUS = R.AA.BIL.DETAILS<AA.BD.BILL.STATUS,1>
  CHANGE VM TO FM IN VAR.PROPERTY
  LOCATE "PENALTYINT" IN VAR.PROPERTY SETTING POS THEN
    VAR.PENALTY.AMT = R.AA.BIL.DETAILS<AA.BD.OR.PROP.AMOUNT><1,POS>
  END
  IF VAL.BILL.STATUS EQ 'DUE' THEN
    VAR.DUE.COUNT++
  END
  IF VAL.BILL.STATUS NE 'DUE' THEN
    VAR.AGE.COUNT++
  END

  VAR.TOT.AMT = R.AA.BIL.DETAILS<AA.BD.OR.TOTAL.AMOUNT>
  VAR.OUT.AMT = SUM(R.AA.BIL.DETAILS<AA.BD.OS.PROP.AMOUNT>)
  ACCOUNT.ID = ACCT.ID
  BALANCE.TO.CHECK = 'ACCPENALTYINT'
  DATE.OPTIONS = ''
  EFFECTIVE.DATE = TODAY
  DATE.OPTIONS<4>  = 'ECB'
  BALANCE.AMOUNT = ""

  CALL AA.GET.PERIOD.BALANCES(ACCOUNT.ID, BALANCE.TO.CHECK, DATE.OPTIONS, EFFECTIVE.DATE, "", "", BAL.DETAILS,"")
  PRIN.BALANCE = BAL.DETAILS<IC.ACT.BALANCE>
  Y.BASE.AMT = (VAR.TOT.AMT * (VAL.PART.PCNT/100)) + ABS(PRIN.BALANCE)
  IF Y.BASE.AMT GT VAR.OUT.AMT THEN
    Y.BASE.AMT = VAR.OUT.AMT + ABS(PRIN.BALANCE)
  END
  R.NEW(FT.CREDIT.AMOUNT) = FMT(Y.BASE.AMT,"R2#10")
  TOT.CALC.AMT = FMT(Y.BASE.AMT,"R2#10")
  VAR2++
  RETURN
END
