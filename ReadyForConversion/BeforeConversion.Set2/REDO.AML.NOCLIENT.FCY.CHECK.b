*-----------------------------------------------------------------------------
* <Rating>-65</Rating>
*-----------------------------------------------------------------------------
SUBROUTINE REDO.AML.NOCLIENT.FCY.CHECK
*-----------------------------------------------------------
* Input  Arg: N/A
* Output Arg: N/A
* Deals With: TO Raise the AML override for the FCY transactions which are done by the No Client/Propects Client
*-----------------------------------------------------------
* Who           Date           Dev Ref              Modification
* APAP          26 Feb 2017    AML No Client FCY Check      Initial Draft
*-----------------------------------------------------------

$INSERT I_COMMON
$INSERT I_EQUATE
$INSERT I_F.CURRENCY
$INSERT I_F.TELLER
$INSERT I_DEAL.SLIP.COMMON
$INSERT I_GTS.COMMON
$INSERT I_RC.COMMON
$INSERT I_F.VERSION
$INSERT I_F.CUSTOMER
$INSERT I_F.REDO.H.FOREX.AML
$INSERT I_F.REDO.AML.TXN.UPDATE
$INSERT I_F.REDO.FXSN.TXN.VERSION
$INSERT I_REDO.ID.CARD.CHECK.COMMON
$INSERT JBC.h
$INSERT I_System

IF OFS$OPERATION NE 'PROCESS' THEN
RETURN
END
PROCESS.GOAHEAD = ''
GOSUB OPEN.FILES
GOSUB GET.LOCAL.REF.POSITIONS

GOSUB CHECK.PRELIM.CONDITIONS

IF PROCESS.GOAHEAD THEN
GOSUB PROCESS
END

RETURN

*********
PROCESS:
*********

CALL F.READ(FN.REDO.H.FOREX.AML, 'SYSTEM', R.REDO.H.FOREX.AML, F.REDO.H.FOREX.AML, READ.ERR)

IF NOT(READ.ERR) THEN
*        AML.LIMIT.AMOUNT = R.REDO.H.FOREX.AML<FX.AML.AMT.LIMIT.LCY>
AML.LIMIT.AMOUNT = R.REDO.H.FOREX.AML<FX.AML.AMT.LIMIT.FCY>
END

Y.AML.TXN.ID = Y.TT.LEGAL.ID['.',1,2]:'.':TODAY

CALL F.READ(FN.REDO.AML.TXN.UPDATE, Y.AML.TXN.ID, R.REDO.AML.TXN.UPDATE, F.REDO.AML.TXN.UPDATE, REDO.AML.TXN.UPDATE.ERR)

GOSUB GET.TXN.DETAILS

Y.RECORD.STATUS = R.NEW(TT.TE.RECORD.STATUS)
IF (V$FUNCTION EQ 'D' AND Y.RECORD.STATUS EQ 'INAU') OR (V$FUNCTION EQ 'D' AND Y.RECORD.STATUS EQ 'INAO') OR (V$FUNCTION EQ 'R' AND Y.RECORD.STATUS EQ '' AND R.VERSION(EB.VER.NO.OF.AUTH) EQ 0)  THEN
LOCATE ID.NEW IN R.REDO.AML.TXN.UPDATE<AML.TXN.ID,1> SETTING AML.TXN.POS THEN
R.REDO.AML.TXN.UPDATE<AML.TRANS.DATE, AML.TXN.POS> = TIMEDATE()
R.REDO.AML.TXN.UPDATE<AML.TXN.ACTION, AML.TXN.POS> = V$FUNCTION
R.REDO.AML.TXN.UPDATE<AML.LCY.AMOUNT, AML.TXN.POS> = ''
CALL F.WRITE(FN.REDO.AML.TXN.UPDATE,Y.AML.TXN.ID,R.REDO.AML.TXN.UPDATE)
RETURN
END
END
IF NOT(R.REDO.AML.TXN.UPDATE) THEN
AML.TXN.POS = 1
TOT.AML.LCY.AMT = AML.LCY.AMT
TOT.AML.FCY.AMT = TOT.AML.LCY.AMT / AML.LCY.RT
END ELSE
*        AML.TXN.POS = -1
AML.TXN.POS = DCOUNT(R.REDO.AML.TXN.UPDATE<AML.TXN.ID>, VM) + 1
TOT.AML.LCY.AMT = SUM(R.REDO.AML.TXN.UPDATE<AML.LCY.AMOUNT>) + AML.LCY.AMT
TOT.AML.FCY.AMT = TOT.AML.LCY.AMT / AML.LCY.RT
END

IF TOT.AML.FCY.AMT GE AML.LIMIT.AMOUNT THEN
AML.LMT.OVR = "Y"
AML.CURR.NO = DCOUNT(R.NEW(TT.TE.OVERRIDE),VM)
TEXT = 'FXSN.TXN.AMT.EXCEED.AML'
CALL STORE.OVERRIDE(AML.CURR.NO+1)
END ELSE
AML.LMT.OVR = "N"
END

R.REDO.AML.TXN.UPDATE<AML.TXN.ID, AML.TXN.POS> = ID.NEW
R.REDO.AML.TXN.UPDATE<AML.TRANS.DATE, AML.TXN.POS> = TIMEDATE()
R.REDO.AML.TXN.UPDATE<AML.TYPE.OF.ID, AML.TXN.POS> = Y.AML.TXN.ID['.',1,1]
R.REDO.AML.TXN.UPDATE<AML.LEGAL.ID.NUM, AML.TXN.POS> = Y.AML.TXN.ID['.',2,1]
R.REDO.AML.TXN.UPDATE<AML.CLIENT.NAME, AML.TXN.POS> = Y.TT.LEGAL.ID['.',3,1]
R.REDO.AML.TXN.UPDATE<AML.BUY.SELL.TXN, AML.TXN.POS> = AML.MARKER
R.REDO.AML.TXN.UPDATE<AML.CURRENCY, AML.TXN.POS> = AML.FCY
R.REDO.AML.TXN.UPDATE<AML.FCY.AMOUNT, AML.TXN.POS> = AML.FCY.AMT
R.REDO.AML.TXN.UPDATE<AML.LCY.AMOUNT, AML.TXN.POS> = AML.LCY.AMT
R.REDO.AML.TXN.UPDATE<AML.OVERRIDE.Y.N, AML.TXN.POS> = AML.LMT.OVR
R.REDO.AML.TXN.UPDATE<AML.BRANCH.CODE, AML.TXN.POS> = ID.COMPANY
R.REDO.AML.TXN.UPDATE<AML.CU.AMLBUY.RT, AML.TXN.POS> = AML.LCY.RT
R.REDO.AML.TXN.UPDATE<AML.TXN.ACTION, AML.TXN.POS> = V$FUNCTION

CALL F.WRITE(FN.REDO.AML.TXN.UPDATE,Y.AML.TXN.ID,R.REDO.AML.TXN.UPDATE)

RETURN

*---------------
GET.TXN.DETAILS:
*---------------

AML.CCY.1 = R.NEW(TT.TE.ACCOUNT.1)[1,3]
AML.CCY.2 = R.NEW(TT.TE.ACCOUNT.2)[1,3]

BEGIN CASE
CASE R.NEW(TT.TE.DR.CR.MARKER) EQ 'DEBIT' AND AML.CCY.1 EQ LCCY
AML.MARKER = 'SELL'
AML.FCY = AML.CCY.2
AML.FCY.AMT = R.NEW(TT.TE.AMOUNT.FCY.2)
AML.LCY.AMT = R.NEW(TT.TE.AMOUNT.LOCAL.2)
CASE R.NEW(TT.TE.DR.CR.MARKER) EQ 'DEBIT' AND AML.CCY.1 NE LCCY
AML.MARKER = 'BUY'
AML.FCY = AML.CCY.1
AML.FCY.AMT = R.NEW(TT.TE.AMOUNT.FCY.1)
AML.LCY.AMT = R.NEW(TT.TE.AMOUNT.LOCAL.1)
CASE R.NEW(TT.TE.DR.CR.MARKER) EQ 'CREDIT' AND AML.CCY.1 EQ LCCY
AML.MARKER = 'BUY'
AML.FCY = AML.CCY.2
AML.FCY.AMT = R.NEW(TT.TE.AMOUNT.FCY.2)
AML.LCY.AMT = R.NEW(TT.TE.AMOUNT.LOCAL.1)
CASE R.NEW(TT.TE.DR.CR.MARKER) EQ 'CREDIT' AND AML.CCY.1 NE LCCY
AML.MARKER = 'SELL'
AML.FCY = AML.CCY.1
AML.FCY.AMT = R.NEW(TT.TE.AMOUNT.FCY.1)
AML.LCY.AMT = R.NEW(TT.TE.AMOUNT.LOCAL.2)
END CASE
AML.CCY = 'USD'
CALL F.READ(FN.CURRENCY, AML.CCY, R.AML.CCY, F.CURRENCY, READ.ERR)

IF NOT(READ.ERR) THEN
AML.LCY.RT = R.AML.CCY<EB.CUR.LOCAL.REF, L.CU.AMLBUY.RT.POS>
*        AML.LCY.AMT = AML.LCY.RT * AML.FCY.AMT
END

*    AML.LCY.AMT = R.NEW(TT.TE.AMOUNT.LOCAL.1)

RETURN

*-----------------------
CHECK.PRELIM.CONDITIONS:
*-----------------------
*
GOSUB CHECK.T24.VERSION

IF NOT(PROCESS.GOAHEAD) THEN
RETURN
END

Y.TT.CLIENT.COD = R.NEW(TT.TE.LOCAL.REF)<1,L.TT.CLIENT.COD.POS>
Y.TT.LEGAL.ID = R.NEW(TT.TE.LOCAL.REF)<1,L.TT.LEGAL.ID.POS>
Y.TT.FXSN.NUM = R.NEW(TT.TE.LOCAL.REF)<1,L.TT.FXSN.NUM.POS>
IF OFS$SOURCE.ID NE 'FASTPATH' THEN
CUSTOMER.ERR = ''
R.CUSTOMER = ''
CALL F.READ(FN.CUSTOMER,Y.TT.CLIENT.COD,R.CUSTOMER,F.CUSTOMER,CUSTOMER.ERR)
IF R.CUSTOMER THEN
Y.CUSTOMER.TYPE = R.CUSTOMER<EB.CUS.CUSTOMER.TYPE>
IF Y.CUSTOMER.TYPE EQ 'PROSPECT' THEN
PROCESS.GOAHEAD = 1
END ELSE
PROCESS.GOAHEAD = ''
END
END ELSE
PROCESS.GOAHEAD = 1
END
END ELSE
PROCESS.GOAHEAD = ''
END
RETURN

*-----------------------
CHECK.T24.VERSION:
*-----------------------

BEGIN CASE

CASE ID.NEW[1,2] EQ 'TT'
GET.APPLICATION = 'TELLER'
PROCESS.GOAHEAD = 1
CASE ID.NEW[1,2] EQ 'FT'
*        GET.APPLICATION = 'FUNDS.TRANSFER'
PROCESS.GOAHEAD = ''
END CASE
IF NOT(PROCESS.GOAHEAD) THEN
RETURN
END
TXN.VERSION = GET.APPLICATION: PGM.VERSION

CALL F.READ(FN.REDO.FXSN.TXN.VERSION,"SYSTEM",R.REDO.FXSN.TXN.VERSION,F.REDO.FXSN.TXN.VERSION,REDO.FXSN.TXN.VERSION.ERR)
TXN.DESCS = R.REDO.FXSN.TXN.VERSION<REDO.TXN.VER.VERSION.NAME>
CHANGE VM TO FM IN TXN.DESCS
LOCATE TXN.VERSION IN TXN.DESCS SETTING VERSION.POS THEN
PROCESS.GOAHEAD = 1
END
RETURN

************************
GET.LOCAL.REF.POSITIONS:
************************

APP.NAME      = "CUSTOMER":FM:"TELLER":FM:"CURRENCY"

FIELD.ARR     = "L.CU.CIDENT":VM:"L.CU.RNC":FM:"L.TT.CLIENT.COD":VM:"L.TT.FXSN.NUM":VM:"L.TT.LEGAL.ID":FM:"L.CU.AMLBUY.RT"
FIELD.POS.ARR = ""
CALL MULTI.GET.LOC.REF(APP.NAME,FIELD.ARR,FIELD.POS.ARR)
L.CU.CIDENT.POS = FIELD.POS.ARR<1,1>
L.CU.RNC.POS    = FIELD.POS.ARR<1,2>

L.TT.CLIENT.COD.POS = FIELD.POS.ARR<2,1>
L.TT.FXSN.NUM.POS = FIELD.POS.ARR<2,2>
L.TT.LEGAL.ID.POS = FIELD.POS.ARR<2,3>

L.CU.AMLBUY.RT.POS = FIELD.POS.ARR<3,1>

RETURN

************
OPEN.FILES:
************

FN.CURRENCY = 'F.CURRENCY'
F.CURRENCY  = ''
CALL OPF(FN.CURRENCY,F.CURRENCY)

FN.REDO.H.FOREX.AML = 'F.REDO.H.FOREX.AML'
F.REDO.H.FOREX.AML = ''
CALL OPF(FN.REDO.H.FOREX.AML,F.REDO.H.FOREX.AML)

FN.TELLER = 'F.TELLER'
F.TELLER  = ''
CALL OPF(FN.TELLER,F.TELLER)

FN.CUSTOMER = 'F.CUSTOMER'
F.CUSTOMER = ''
CALL OPF(FN.CUSTOMER,F.CUSTOMER)

FN.REDO.FXSN.TXN.VERSION = 'F.REDO.FXSN.TXN.VERSION'
F.REDO.FXSN.TXN.VERSION = ''
CALL OPF(FN.REDO.FXSN.TXN.VERSION,F.REDO.FXSN.TXN.VERSION)

FN.REDO.AML.TXN.UPDATE = 'F.REDO.AML.TXN.UPDATE'
F.REDO.AML.TXN.UPDATE = ''
CALL OPF(FN.REDO.AML.TXN.UPDATE, F.REDO.AML.TXN.UPDATE)

CIDENT.PROVIDED    = ""
RNC.PROVIDED       = ""
CUSTOMER.FULL.NAME = ""
CIDENT.NUMBER      = ""
RNC.NUMBER         = ""
VAR.CUS.DETAILS    = ''
APAP.CUSTOMER      = ''

RETURN
