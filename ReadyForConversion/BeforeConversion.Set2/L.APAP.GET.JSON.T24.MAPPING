*-----------------------------------------------------------------------------
* <Rating>260</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE  L.APAP.GET.JSON.T24.MAPPING(Y.MAPPING.NAME,Y.DYN.MAPPING, Y.RABBIT.MQ, Y.JSON.OBJECT.IN, Y.ERROR)
    $INCLUDE T24.BP I_COMMON
    $INCLUDE T24.BP I_EQUATE
    $INCLUDE T24.BP I_F.STANDARD.SELECTION
    $INCLUDE T24.BP I_F.ENQUIRY
    $INCLUDE BP I_F.L.APAP.JSON.TO.OFS

*Subroutine to Get the Mapping Metadata for INPUT/OUTPUT
*----------------------------------------------------------------------------------------------------------------------------------------------------
*DEBUG
    GOSUB INITIALISE
    GOSUB OPENFILES
    GOSUB VALIDATE
    GOSUB PROCESS
    RETURN

INITIALISE:
*CLEAN OUTPUT PARAMETERS
    Y.DYN.MAPPING = ''
    Y.RABBIT.MQ = ''
    Y.ERROR=''
    Y.ERROR<3>='L.APAP.GET.JSON.T24.MAPPING'

*INTERNAL VARIABLE
    FN.LAPAP.JSON.OFS = 'F.ST.L.APAP.JSON.TO.OFS'
    FN.LAPAP.JSON.OFS<2> = 'NO.FATAL.ERROR'
    F.LAPAP.JSON.OFS = ''
    R.LAPAP.JSON.OFS = ''
    LAPAP.JSON.OFS.ERR = ''

    FN.SS = 'F.STANDARD.SELECTION'
    FN.SS<2> = 'NO.FATAL.ERROR'
    F.SS = ''
    R.SS = ''
    SS.ERR = ''
    SS.ID = ''

    FN.ENQ = 'F.ENQUIRY'
    FN.ENQ<2> = 'NO.FATAL.ERROR'
    F.ENQ = ''
    R.ENQ = ''
    ENQ.ERR = ''
    ENQ.ID = ''

    Y.JSON.OBJECT.TYPE = ''
    Y.JSON.OBJECT = ''
    Y.JSON.CNT = 0
    Y.SS.POS =  0

    RETURN

OPENFILES:
    CALL OPF(FN.LAPAP.JSON.OFS, F.LAPAP.JSON.OFS)
    CALL OPF(FN.SS, F.SS)
    RETURN

VALIDATE:
    IF TRIM(Y.MAPPING.NAME, " ", "R") = "" THEN
        Y.ERROR<1> = 1
        Y.ERROR<2> = "UNASSIGNED MAPPING NAME"
        RETURN
    END

    RETURN

PROCESS:
*DEBUG
    IF Y.ERROR<1> = 1 THEN
        RETURN
    END




*  CALL F.READ(FN.LAPAP.JSON.OFS,Y.MAPPING.NAME,R.LAPAP.JSON.OFS,F.LAPAP.JSON.OFS,LAPAP.JSON.OFS.ERR)

    CALL CACHE.READ(FN.LAPAP.JSON.OFS,Y.MAPPING.NAME,R.LAPAP.JSON.OFS,LAPAP.JSON.OFS.ERR)


    Y.JSON.OBJECT.TYPE = R.LAPAP.JSON.OFS<ST.JSON.OBJECT.TYPE>
    BEGIN CASE
    CASE Y.JSON.OBJECT.TYPE EQ "VERSION"
        GOSUB SUB.VERSION
    CASE Y.JSON.OBJECT.TYPE EQ "ENQUIRY"
        GOSUB SUB.ENQUIRY
    CASE Y.JSON.OBJECT.TYPE EQ "ROUTINE"
        GOSUB SUB.ROUTINE
    CASE 1
        Y.ERROR<1> = 1
        Y.ERROR<2> = 'INVALID PARAMETER SETTING AT ST.L.APAP.JSON.TO.OFS>OBJECT.TYPE <' : Y.JSON.OBJECT.TYPE :  '> OF MAPPING: ' : Y.MAPPING.NAME
        RETURN
    END CASE

    RETURN

SUB.VERSION:
*DEBUG
    Y.DYN.MAPPING<1>=Y.MAPPING.NAME
    Y.DYN.MAPPING<2>=R.LAPAP.JSON.OFS<ST.JSON.OPERATION.TYPE>
    Y.DYN.MAPPING<3>=R.LAPAP.JSON.OFS<ST.JSON.OBJECT.TYPE>
    Y.DYN.MAPPING<4>=R.LAPAP.JSON.OFS<ST.JSON.OBJECT>
    Y.DYN.MAPPING<5>=R.LAPAP.JSON.OFS<ST.JSON.FIELD.JSON>
    Y.DYN.MAPPING<6>=R.LAPAP.JSON.OFS<ST.JSON.FIELD.T24>
*Y.DYN.MAPPING<7>  FILL FROM SSL.SYS.SINGLE.MULT/SSL.USR.SINGLE.MULT
    Y.DYN.MAPPING<8>=R.LAPAP.JSON.OFS<ST.JSON.FIELD.MASK.OUT>

    IF Y.DYN.MAPPING<2> = 'OUT' AND Y.JSON.OBJECT.IN NE '' THEN
*DEBUG
        Y.JSON.OBJECT = Y.JSON.OBJECT.IN
    END
    ELSE
*DEBUG
        Y.JSON.OBJECT = R.LAPAP.JSON.OFS<ST.JSON.OBJECT>
    END

    CHANGE ',' TO @FM IN Y.JSON.OBJECT
    SS.ID = Y.JSON.OBJECT<1>

    IF SS.ID NE '' THEN
*   CALL F.READ(FN.SS,SS.ID,R.SS,F.SS,SS.ERR)
        CALL CACHE.READ(FN.SS,SS.ID,R.SS,SS.ERR)

    END
    ELSE
        Y.ERROR<1> = 1
        Y.ERROR<2> = 'INVALID T24 APPLICATION <': SS.ID :'>, CHECK ST.L.APAP.JSON.TO.OFS>OBJECT OF MAPPING: ' :  Y.MAPPING.NAME
        RETURN
    END

    Y.JSON.CNT = DCOUNT(Y.DYN.MAPPING<6>, @VM)

    Y.SS.FIELD.NAME.SYS = R.SS<SSL.SYS.FIELD.NAME>
    Y.SS.FIELD.NAME.USR = R.SS<SSL.USR.FIELD.NAME>
    FOR V.I = 1 TO Y.JSON.CNT
        Y.DYN.FIELD.T24 = Y.DYN.MAPPING<6,V.I>
        IF Y.DYN.FIELD.T24 = 'ID' THEN
            Y.DYN.FIELD.T24 = '@ID'
        END
        LOCATE Y.DYN.FIELD.T24 IN Y.SS.FIELD.NAME.SYS<1,1> SETTING Y.SS.POS THEN
            Y.DYN.MAPPING<7, V.I> = R.SS<SSL.SYS.SINGLE.MULT, Y.SS.POS>
        END
        ELSE
            LOCATE Y.DYN.FIELD.T24 IN Y.SS.FIELD.NAME.USR<1,1> SETTING Y.SS.POS THEN
                Y.DYN.MAPPING<7, V.I> = R.SS<SSL.USR.SINGLE.MULT, Y.SS.POS>
            END
            ELSE
                Y.ERROR<1> = 1
                Y.ERROR<2> = 'INVALID FIELD, CHECK ST.L.APAP.JSON.TO.OFS>FIELD.T24: ':  Y.DYN.MAPPING<6,V.I> :' OF MAPPING: ' :  Y.MAPPING.NAME
                RETURN
            END
        END
    NEXT V.I

    GOSUB GET.RABBIT
    RETURN

SUB.ENQUIRY:
*DEBUG
    Y.DYN.MAPPING<1>=Y.MAPPING.NAME
    Y.DYN.MAPPING<2>=R.LAPAP.JSON.OFS<ST.JSON.OPERATION.TYPE>
    Y.DYN.MAPPING<3>=R.LAPAP.JSON.OFS<ST.JSON.OBJECT.TYPE>
    Y.DYN.MAPPING<4>=R.LAPAP.JSON.OFS<ST.JSON.OBJECT>
    Y.DYN.MAPPING<5>=R.LAPAP.JSON.OFS<ST.JSON.FIELD.JSON>
    Y.DYN.MAPPING<6>=R.LAPAP.JSON.OFS<ST.JSON.FIELD.T24>
*Y.DYN.MAPPING<7>  FILL FROM SSL.SYS.SINGLE.MULT/SSL.USR.SINGLE.MULT
    Y.DYN.MAPPING<8>=R.LAPAP.JSON.OFS<ST.JSON.FIELD.MASK.OUT>


    IF Y.DYN.MAPPING<2> = 'OUT' AND Y.JSON.OBJECT.IN NE '' THEN
*DEBUG
        Y.JSON.OBJECT = Y.JSON.OBJECT.IN
    END
    ELSE
*DEBUG
        Y.JSON.OBJECT = R.LAPAP.JSON.OFS<ST.JSON.OBJECT>
    END

    CHANGE ',' TO @FM IN Y.JSON.OBJECT
    ENQ.ID = Y.JSON.OBJECT<1>

    Y.ENQ.OPERATORS = 'EQ'  : @VM :  'NE': @VM :  'GT': @VM :  'GE': @VM :  'LT': @VM :  'LE': @VM :  'RG' : @VM : 'NR': @VM :  'CT' : @VM :  'NC' : @VM : 'BW': @VM :  'EW' : @VM : 'LK': @VM :  'DNBW' : @VM :  'DNEW'

    IF ENQ.ID NE '' THEN
*    CALL F.READ(FN.ENQ,ENQ.ID,R.ENQ,F.ENQ,ENQ.ERR)
        CALL CACHE.READ(FN.ENQ,ENQ.ID,R.ENQ,ENQ.ERR)
    END
    ELSE
        Y.ERROR<1> = 1
        Y.ERROR<2> = 'INVALID T24 ENQUIRY <': ENQ.ID :'>, CHECK ST.L.APAP.JSON.TO.OFS>OBJECT OF MAPPING: ' :  Y.MAPPING.NAME
        RETURN
    END


    Y.JSON.CNT = DCOUNT(Y.DYN.MAPPING<6>, @VM)

    IF Y.DYN.MAPPING<2> = 'IN' THEN
        Y.ENQ.SELECTION.FLDS = R.ENQ<ENQ.SELECTION.FLDS>
        Y.ENQ.SEL.FLD.OPER = R.ENQ<ENQ.SEL.FLD.OPER>
        FOR V.I = 1 TO Y.JSON.CNT
*DEBUG

            Y.DYN.SEL.FIELD.T24 = Y.DYN.MAPPING<6,V.I>
            CHANGE ':' TO @FM IN Y.DYN.SEL.FIELD.T24

            Y.SEL.FIELD = Y.DYN.SEL.FIELD.T24<1>
            Y.SEL.OPER = Y.DYN.SEL.FIELD.T24<2>

            IF Y.SEL.OPER NE '' THEN
                LOCATE Y.SEL.OPER IN Y.ENQ.OPERATORS SETTING Y.ENQ.POS  ELSE
                    Y.ERROR<1> = 1
                    Y.ERROR<2> = 'INVALID SELECTION OPERATOR, CHECK JSON MESSAGE>FIELD.T24: ':  Y.DYN.MAPPING<6,V.I> :' OF MAPPING: ' :  Y.MAPPING.NAME
                    RETURN
                END
            END

            LOCATE Y.SEL.FIELD IN Y.ENQ.SELECTION.FLDS<1,1> SETTING Y.ENQ.POS THEN
                Y.ENQ.OPER = R.ENQ<ENQ.SEL.FLD.OPER, Y.ENQ.POS>
                IF Y.SEL.OPER EQ '' AND Y.ENQ.OPER EQ '' THEN
*Y.ERROR<1> = 1
*Y.ERROR<2> = 'BLANK SELECTION OPERATOR, CHECK ST.L.APAP.JSON.TO.OFS>FIELD.T24: ':  Y.DYN.MAPPING<6,V.I> :' OF MAPPING: ' :  *Y.MAPPING.NAME
*RETURN
                    Y.ENQ.OPER = "EQ"
                    Y.DYN.MAPPING<6,V.I> = Y.DYN.MAPPING<6,V.I> : ':' : Y.ENQ.OPER
                END
                ELSE
                    IF  Y.SEL.OPER EQ '' AND Y.ENQ.OPER  NE '' THEN
                        Y.DYN.MAPPING<6,V.I> = Y.DYN.MAPPING<6,V.I> : ':' : Y.ENQ.OPER
                    END
                END
            END
            ELSE
                Y.ERROR<1> = 1
                Y.ERROR<2> = 'INVALID SELECTION FIELD, CHECK ST.L.APAP.JSON.TO.OFS>FIELD.T24: ':  Y.DYN.MAPPING<6,V.I> :' OF MAPPING: ' :  Y.MAPPING.NAME
                RETURN
            END

        NEXT V.I
    END

    IF Y.DYN.MAPPING<2> = 'OUT' THEN
        Y.ENQ.FIELD.NAME = R.ENQ<ENQ.FIELD.NAME>
        Y.ENQ.SINGLE.MULTI = R.ENQ<ENQ.SINGLE.MULTI>
        Y.ENQ.COLUMN = R.ENQ<ENQ.COLUMN>
        FOR V.I = 1 TO Y.JSON.CNT
*DEBUG
            Y.DYN.ENQ.FIELD.T24 = Y.DYN.MAPPING<6,V.I>
            LOCATE Y.DYN.ENQ.FIELD.T24  IN Y.ENQ.FIELD.NAME<1,1> SETTING Y.ENQ.POS THEN
                Y.COLUMN = Y.ENQ.COLUMN<1,Y.ENQ.POS>
                IF Y.COLUMN EQ ''  THEN
                    Y.ERROR<1> = 1
                    Y.ERROR<2> = "INVALID FIELD, COLUMN DON'T CHECK HAVE COLUMN OUTPUT NUMBER ST.L.APAP.JSON.TO.OFS>FIELD.T24: ":  Y.DYN.MAPPING<6,V.I> :' OF MAPPING: ' :  Y.MAPPING.NAME
                    RETURN
                END

                Y.SINGLE.MULTI = Y.ENQ.SINGLE.MULTI<1,Y.ENQ.POS>
                IF Y.SINGLE.MULTI  EQ '' THEN
                    Y.DYN.MAPPING<7,V.I> =  'S'
                END
                ELSE
                    Y.DYN.MAPPING<7,V.I> = 'M'
                END
            END
            ELSE
                Y.ERROR<1> = 1
                Y.ERROR<2> = 'INVALID ENQUIRY FIELD, CHECK ST.L.APAP.JSON.TO.OFS>FIELD.T24: ':  Y.DYN.MAPPING<6,V.I> :' OF MAPPING: ' :  Y.MAPPING.NAME
                RETURN
            END
        NEXT V.I
    END

    GOSUB GET.RABBIT
    RETURN

SUB.ROUTINE:
*DEBUG
    Y.JSON.OBJECT = R.LAPAP.JSON.OFS<ST.JSON.OBJECT>

    IF Y.JSON.OBJECT  NE '' THEN
        Y.DYN.MAPPING<1>=Y.MAPPING.NAME
        Y.DYN.MAPPING<2>=R.LAPAP.JSON.OFS<ST.JSON.OPERATION.TYPE>
        Y.DYN.MAPPING<3>=R.LAPAP.JSON.OFS<ST.JSON.OBJECT.TYPE>
        Y.DYN.MAPPING<4>=R.LAPAP.JSON.OFS<ST.JSON.OBJECT>
        Y.DYN.MAPPING<5>=R.LAPAP.JSON.OFS<ST.JSON.FIELD.JSON>
        Y.DYN.MAPPING<6>=R.LAPAP.JSON.OFS<ST.JSON.FIELD.T24>
*Y.DYN.MAPPING<7>  FILL FROM SSL.SYS.SINGLE.MULT/SSL.USR.SINGLE.MULT
        Y.DYN.MAPPING<8>=R.LAPAP.JSON.OFS<ST.JSON.FIELD.MASK.OUT>

        GOSUB GET.RABBIT
    END
    ELSE
        Y.ERROR<1> = 1
        Y.ERROR<2> = 'UNASSIGNED ROUTINE <': Y.JSON.OBJECT :'>, CHECK ST.L.APAP.JSON.TO.OFS>OBJECT OF MAPPING: ' :  Y.MAPPING.NAME
        RETURN
    END

    RETURN

GET.RABBIT:
    Y.RABBIT.MQ<1> = R.LAPAP.JSON.OFS <ST.JSON.MAP.RESPONSE.ID>
    Y.RABBIT.MQ<2> = R.LAPAP.JSON.OFS <ST.JSON.ROUTING.KEY.OUT>
    Y.RABBIT.MQ<3> = R.LAPAP.JSON.OFS <ST.JSON.RABBIT.QUEUE.OUT>
    Y.RABBIT.MQ<4> = R.LAPAP.JSON.OFS <ST.JSON.QUEUE.NAME>
    Y.RABBIT.MQ<5> = R.LAPAP.JSON.OFS <ST.JSON.AUT.ROLE>
    RETURN

    RETURN
END
